--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AddAppointmentOperation

   procedure Initialize (this : in out AddAppointmentOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out AddAppointmentOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAddAppointmentOperation, IAddAppointmentOperation_Ptr);
   begin
      if this.m_IAddAppointmentOperation /= null then
         if this.m_IAddAppointmentOperation.all /= null then
            RefCount := this.m_IAddAppointmentOperation.all.Release;
            Free (this.m_IAddAppointmentOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AddAppointmentOperation

   function get_AppointmentInformation
   (
      this : in out AddAppointmentOperation
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IAddAppointmentOperation.all.get_AppointmentInformation (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_SourcePackageFamilyName
   (
      this : in out AddAppointmentOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAddAppointmentOperation.all.get_SourcePackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out AddAppointmentOperation;
      itemId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_itemId : WinRt.HString := To_HString (itemId);
   begin
      Hr := this.m_IAddAppointmentOperation.all.ReportCompleted (HStr_itemId);
      Hr := WindowsDeleteString (HStr_itemId);
   end;

   procedure ReportCanceled
   (
      this : in out AddAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddAppointmentOperation.all.ReportCanceled;
   end;

   procedure ReportError
   (
      this : in out AddAppointmentOperation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAddAppointmentOperation.all.ReportError (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure DismissUI
   (
      this : in out AddAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAddAppointmentOperation.all.DismissUI;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppointmentsProviderLaunchActionVerbs is

      function get_AddAppointment
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentsProviderLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AddAppointment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ReplaceAppointment
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentsProviderLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ReplaceAppointment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RemoveAppointment
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentsProviderLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RemoveAppointment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ShowTimeFrame
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentsProviderLaunchActionVerbsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShowTimeFrame (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ShowAppointmentDetails
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs");
         m_Factory        : access WinRt.Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppointmentsProviderLaunchActionVerbsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ShowAppointmentDetails (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end AppointmentsProviderLaunchActionVerbs;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RemoveAppointmentOperation

   procedure Initialize (this : in out RemoveAppointmentOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out RemoveAppointmentOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRemoveAppointmentOperation, IRemoveAppointmentOperation_Ptr);
   begin
      if this.m_IRemoveAppointmentOperation /= null then
         if this.m_IRemoveAppointmentOperation.all /= null then
            RefCount := this.m_IRemoveAppointmentOperation.all.Release;
            Free (this.m_IRemoveAppointmentOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RemoveAppointmentOperation

   function get_AppointmentId
   (
      this : in out RemoveAppointmentOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.get_AppointmentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstanceStartDate
   (
      this : in out RemoveAppointmentOperation
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.get_InstanceStartDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SourcePackageFamilyName
   (
      this : in out RemoveAppointmentOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.get_SourcePackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out RemoveAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.ReportCompleted;
   end;

   procedure ReportCanceled
   (
      this : in out RemoveAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.ReportCanceled;
   end;

   procedure ReportError
   (
      this : in out RemoveAppointmentOperation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.ReportError (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure DismissUI
   (
      this : in out RemoveAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRemoveAppointmentOperation.all.DismissUI;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ReplaceAppointmentOperation

   procedure Initialize (this : in out ReplaceAppointmentOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ReplaceAppointmentOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IReplaceAppointmentOperation, IReplaceAppointmentOperation_Ptr);
   begin
      if this.m_IReplaceAppointmentOperation /= null then
         if this.m_IReplaceAppointmentOperation.all /= null then
            RefCount := this.m_IReplaceAppointmentOperation.all.Release;
            Free (this.m_IReplaceAppointmentOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ReplaceAppointmentOperation

   function get_AppointmentId
   (
      this : in out ReplaceAppointmentOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.get_AppointmentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppointmentInformation
   (
      this : in out ReplaceAppointmentOperation
   )
   return WinRt.Windows.ApplicationModel.Appointments.Appointment'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Appointments.IAppointment;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Appointments.Appointment do
         Hr := this.m_IReplaceAppointmentOperation.all.get_AppointmentInformation (m_ComRetVal'Access);
         Retval.m_IAppointment := new Windows.ApplicationModel.Appointments.IAppointment;
         Retval.m_IAppointment.all := m_ComRetVal;
      end return;
   end;

   function get_InstanceStartDate
   (
      this : in out ReplaceAppointmentOperation
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.get_InstanceStartDate (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SourcePackageFamilyName
   (
      this : in out ReplaceAppointmentOperation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.get_SourcePackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompleted
   (
      this : in out ReplaceAppointmentOperation;
      itemId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_itemId : WinRt.HString := To_HString (itemId);
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.ReportCompleted (HStr_itemId);
      Hr := WindowsDeleteString (HStr_itemId);
   end;

   procedure ReportCanceled
   (
      this : in out ReplaceAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.ReportCanceled;
   end;

   procedure ReportError
   (
      this : in out ReplaceAppointmentOperation;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.ReportError (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure DismissUI
   (
      this : in out ReplaceAppointmentOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IReplaceAppointmentOperation.all.DismissUI;
   end;

end;

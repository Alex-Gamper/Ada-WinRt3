--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.UI.Composition;
with WinRt.Windows.UI.Xaml.Media;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Shapes is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Shape

   procedure Initialize (this : in out Shape) is
   begin
      null;
   end;

   procedure Finalize (this : in out Shape) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IShape, IShape_Ptr);
   begin
      if this.m_IShape /= null then
         if this.m_IShape.all /= null then
            RefCount := this.m_IShape.all.Release;
            Free (this.m_IShape);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Shape

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Shape is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory    : access IShapeFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IShape;
   begin
      return RetVal : Shape do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IShape := new Windows.UI.Xaml.Shapes.IShape;
            Retval.m_IShape.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Shape

   function get_FillProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeMiterLimitProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeMiterLimitProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeThicknessProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeThicknessProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeStartLineCapProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeStartLineCapProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeEndLineCapProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeEndLineCapProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeLineJoinProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeLineJoinProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeDashOffsetProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeDashOffsetProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeDashCapProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeDashCapProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StrokeDashArrayProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StrokeDashArrayProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_StretchProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Shape");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IShapeStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IShapeStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StretchProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Shape

   function get_Fill
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IShape.all.get_Fill (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Fill
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_Fill (value.m_IBrush.all);
   end;

   function get_Stroke
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.Brush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IBrush;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Brush do
         Hr := this.m_IShape.all.get_Stroke (m_ComRetVal'Access);
         Retval.m_IBrush := new Windows.UI.Xaml.Media.IBrush;
         Retval.m_IBrush.all := m_ComRetVal;
      end return;
   end;

   procedure put_Stroke
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.Brush'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_Stroke (value.m_IBrush.all);
   end;

   function get_StrokeMiterLimit
   (
      this : in out Shape
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IShape.all.get_StrokeMiterLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeMiterLimit
   (
      this : in out Shape;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeMiterLimit (value);
   end;

   function get_StrokeThickness
   (
      this : in out Shape
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IShape.all.get_StrokeThickness (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeThickness
   (
      this : in out Shape;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeThickness (value);
   end;

   function get_StrokeStartLineCap
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.PenLineCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.PenLineCap;
   begin
      Hr := this.m_IShape.all.get_StrokeStartLineCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeStartLineCap
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.PenLineCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeStartLineCap (value);
   end;

   function get_StrokeEndLineCap
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.PenLineCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.PenLineCap;
   begin
      Hr := this.m_IShape.all.get_StrokeEndLineCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeEndLineCap
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.PenLineCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeEndLineCap (value);
   end;

   function get_StrokeLineJoin
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.PenLineJoin is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.PenLineJoin;
   begin
      Hr := this.m_IShape.all.get_StrokeLineJoin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeLineJoin
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.PenLineJoin
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeLineJoin (value);
   end;

   function get_StrokeDashOffset
   (
      this : in out Shape
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IShape.all.get_StrokeDashOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeDashOffset
   (
      this : in out Shape;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeDashOffset (value);
   end;

   function get_StrokeDashCap
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.PenLineCap is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.PenLineCap;
   begin
      Hr := this.m_IShape.all.get_StrokeDashCap (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StrokeDashCap
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.PenLineCap
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeDashCap (value);
   end;

   function get_StrokeDashArray
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.DoubleCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.DoubleCollection do
         Hr := this.m_IShape.all.get_StrokeDashArray (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_StrokeDashArray
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.DoubleCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_StrokeDashArray (value.m_GenericObject.all);
   end;

   function get_Stretch
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.Stretch is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Stretch;
   begin
      Hr := this.m_IShape.all.get_Stretch (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Stretch
   (
      this : in out Shape;
      value : Windows.UI.Xaml.Media.Stretch
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IShape.all.put_Stretch (value);
   end;

   function get_GeometryTransform
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Xaml.Media.Transform'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.ITransform;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Transform do
         Hr := this.m_IShape.all.get_GeometryTransform (m_ComRetVal'Access);
         Retval.m_ITransform := new Windows.UI.Xaml.Media.ITransform;
         Retval.m_ITransform.all := m_ComRetVal;
      end return;
   end;

   function GetAlphaMask
   (
      this : in out Shape
   )
   return WinRt.Windows.UI.Composition.CompositionBrush'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Xaml.Shapes.IShape2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Composition.ICompositionBrush;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Xaml.Shapes.IShape_Interface, WinRt.Windows.UI.Xaml.Shapes.IShape2, WinRt.Windows.UI.Xaml.Shapes.IID_IShape2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Composition.CompositionBrush do
         m_Interface := QInterface (this.m_IShape.all);
         Hr := m_Interface.GetAlphaMask (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICompositionBrush := new Windows.UI.Composition.ICompositionBrush;
         Retval.m_ICompositionBrush.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Ellipse

   procedure Initialize (this : in out Ellipse) is
   begin
      null;
   end;

   procedure Finalize (this : in out Ellipse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEllipse, IEllipse_Ptr);
   begin
      if this.m_IEllipse /= null then
         if this.m_IEllipse.all /= null then
            RefCount := this.m_IEllipse.all.Release;
            Free (this.m_IEllipse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Ellipse

   function Constructor return Ellipse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Ellipse");
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IEllipse;
   begin
      return RetVal : Ellipse do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IEllipse := new Windows.UI.Xaml.Shapes.IEllipse;
            Retval.m_IEllipse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Ellipse

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Line

   procedure Initialize (this : in out Line) is
   begin
      null;
   end;

   procedure Finalize (this : in out Line) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILine, ILine_Ptr);
   begin
      if this.m_ILine /= null then
         if this.m_ILine.all /= null then
            RefCount := this.m_ILine.all.Release;
            Free (this.m_ILine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Line

   function Constructor return Line is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Line");
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.ILine;
   begin
      return RetVal : Line do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILine := new Windows.UI.Xaml.Shapes.ILine;
            Retval.m_ILine.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Line

   function get_X1Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Line");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.ILineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_X1Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Y1Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Line");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.ILineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Y1Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_X2Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Line");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.ILineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_X2Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_Y2Property
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Line");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.ILineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ILineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Y2Property (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Line

   function get_X1
   (
      this : in out Line
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ILine.all.get_X1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_X1
   (
      this : in out Line;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILine.all.put_X1 (value);
   end;

   function get_Y1
   (
      this : in out Line
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ILine.all.get_Y1 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Y1
   (
      this : in out Line;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILine.all.put_Y1 (value);
   end;

   function get_X2
   (
      this : in out Line
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ILine.all.get_X2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_X2
   (
      this : in out Line;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILine.all.put_X2 (value);
   end;

   function get_Y2
   (
      this : in out Line
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ILine.all.get_Y2 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Y2
   (
      this : in out Line;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILine.all.put_Y2 (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Path

   procedure Initialize (this : in out Path) is
   begin
      null;
   end;

   procedure Finalize (this : in out Path) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPath, IPath_Ptr);
   begin
      if this.m_IPath /= null then
         if this.m_IPath.all /= null then
            RefCount := this.m_IPath.all.Release;
            Free (this.m_IPath);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Path

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Path is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Path");
      m_Factory    : access IPathFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IPath;
   begin
      return RetVal : Path do
         Hr := RoGetActivationFactory (m_hString, IID_IPathFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPath := new Windows.UI.Xaml.Shapes.IPath;
            Retval.m_IPath.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Path

   function get_DataProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Path");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IPathStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPathStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DataProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Path

   function get_Data
   (
      this : in out Path
   )
   return WinRt.Windows.UI.Xaml.Media.Geometry'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.IGeometry;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.Geometry do
         Hr := this.m_IPath.all.get_Data (m_ComRetVal'Access);
         Retval.m_IGeometry := new Windows.UI.Xaml.Media.IGeometry;
         Retval.m_IGeometry.all := m_ComRetVal;
      end return;
   end;

   procedure put_Data
   (
      this : in out Path;
      value : Windows.UI.Xaml.Media.Geometry'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPath.all.put_Data (value.m_IGeometry.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Polygon

   procedure Initialize (this : in out Polygon) is
   begin
      null;
   end;

   procedure Finalize (this : in out Polygon) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPolygon, IPolygon_Ptr);
   begin
      if this.m_IPolygon /= null then
         if this.m_IPolygon.all /= null then
            RefCount := this.m_IPolygon.all.Release;
            Free (this.m_IPolygon);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Polygon

   function Constructor return Polygon is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polygon");
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IPolygon;
   begin
      return RetVal : Polygon do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPolygon := new Windows.UI.Xaml.Shapes.IPolygon;
            Retval.m_IPolygon.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Polygon

   function get_FillRuleProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polygon");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IPolygonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolygonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillRuleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointsProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polygon");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IPolygonStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolygonStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Polygon

   function get_FillRule
   (
      this : in out Polygon
   )
   return WinRt.Windows.UI.Xaml.Media.FillRule is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.FillRule;
   begin
      Hr := this.m_IPolygon.all.get_FillRule (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FillRule
   (
      this : in out Polygon;
      value : Windows.UI.Xaml.Media.FillRule
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolygon.all.put_FillRule (value);
   end;

   function get_Points
   (
      this : in out Polygon
   )
   return WinRt.Windows.UI.Xaml.Media.PointCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PointCollection do
         Hr := this.m_IPolygon.all.get_Points (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Points
   (
      this : in out Polygon;
      value : Windows.UI.Xaml.Media.PointCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolygon.all.put_Points (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Polyline

   procedure Initialize (this : in out Polyline) is
   begin
      null;
   end;

   procedure Finalize (this : in out Polyline) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPolyline, IPolyline_Ptr);
   begin
      if this.m_IPolyline /= null then
         if this.m_IPolyline.all /= null then
            RefCount := this.m_IPolyline.all.Release;
            Free (this.m_IPolyline);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Polyline

   function Constructor return Polyline is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polyline");
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IPolyline;
   begin
      return RetVal : Polyline do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPolyline := new Windows.UI.Xaml.Shapes.IPolyline;
            Retval.m_IPolyline.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Polyline

   function get_FillRuleProperty_Polyline
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polyline");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IPolylineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolylineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FillRuleProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_PointsProperty_Polyline
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Polyline");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IPolylineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPolylineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PointsProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Polyline

   function get_FillRule
   (
      this : in out Polyline
   )
   return WinRt.Windows.UI.Xaml.Media.FillRule is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.FillRule;
   begin
      Hr := this.m_IPolyline.all.get_FillRule (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FillRule
   (
      this : in out Polyline;
      value : Windows.UI.Xaml.Media.FillRule
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolyline.all.put_FillRule (value);
   end;

   function get_Points
   (
      this : in out Polyline
   )
   return WinRt.Windows.UI.Xaml.Media.PointCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.Media.PointCollection do
         Hr := this.m_IPolyline.all.get_Points (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   procedure put_Points
   (
      this : in out Polyline;
      value : Windows.UI.Xaml.Media.PointCollection'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPolyline.all.put_Points (value.m_GenericObject.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Rectangle

   procedure Initialize (this : in out Rectangle) is
   begin
      null;
   end;

   procedure Finalize (this : in out Rectangle) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRectangle, IRectangle_Ptr);
   begin
      if this.m_IRectangle /= null then
         if this.m_IRectangle.all /= null then
            RefCount := this.m_IRectangle.all.Release;
            Free (this.m_IRectangle);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Rectangle

   function Constructor return Rectangle is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Rectangle");
      m_ComRetVal  : aliased Windows.UI.Xaml.Shapes.IRectangle;
   begin
      return RetVal : Rectangle do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRectangle := new Windows.UI.Xaml.Shapes.IRectangle;
            Retval.m_IRectangle.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Rectangle

   function get_RadiusXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Rectangle");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IRectangleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRectangleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RadiusXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RadiusYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Shapes.Rectangle");
      m_Factory        : access WinRt.Windows.UI.Xaml.Shapes.IRectangleStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IRectangleStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RadiusYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Rectangle

   function get_RadiusX
   (
      this : in out Rectangle
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRectangle.all.get_RadiusX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RadiusX
   (
      this : in out Rectangle;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRectangle.all.put_RadiusX (value);
   end;

   function get_RadiusY
   (
      this : in out Rectangle
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IRectangle.all.get_RadiusY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RadiusY
   (
      this : in out Rectangle;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRectangle.all.put_RadiusY (value);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Geolocation;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Services.Maps.OfflineMaps is

   package IAsyncOperation_OfflineMapPackageStartDownloadResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStartDownloadResult);
   package AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStartDownloadResult);

   package IAsyncOperation_OfflineMapPackageQueryResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult);
   package AsyncOperationCompletedHandler_OfflineMapPackageQueryResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OfflineMapPackage

   procedure Initialize (this : in out OfflineMapPackage) is
   begin
      null;
   end;

   procedure Finalize (this : in out OfflineMapPackage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOfflineMapPackage, IOfflineMapPackage_Ptr);
   begin
      if this.m_IOfflineMapPackage /= null then
         if this.m_IOfflineMapPackage.all /= null then
            RefCount := this.m_IOfflineMapPackage.all.Release;
            Free (this.m_IOfflineMapPackage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for OfflineMapPackage

   function FindPackagesAsync
   (
      queryPoint : Windows.Devices.Geolocation.Geopoint'Class
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.OfflineMaps.OfflineMapPackage");
      m_Factory        : access WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OfflineMapPackageQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OfflineMapPackageQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
      m_IID            : aliased WinRt.IID := (3222955581, 28059, 21381, (174, 104, 10, 101, 169, 84, 69, 20 )); -- Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (2320364489, 9621, 23532, (139, 161, 193, 217, 85, 241, 104, 192 ));
      m_Handler        : AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind := new AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OfflineMapPackageQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult do
         Hr := RoGetActivationFactory (m_hString, IID_IOfflineMapPackageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackagesAsync (queryPoint.m_IGeopoint.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IOfflineMapPackageQueryResult := new Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
                     Retval.m_IOfflineMapPackageQueryResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindPackagesInBoundingBoxAsync
   (
      queryBoundingBox : Windows.Devices.Geolocation.GeoboundingBox'Class
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.OfflineMaps.OfflineMapPackage");
      m_Factory        : access WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OfflineMapPackageQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OfflineMapPackageQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
      m_IID            : aliased WinRt.IID := (3222955581, 28059, 21381, (174, 104, 10, 101, 169, 84, 69, 20 )); -- Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (2320364489, 9621, 23532, (139, 161, 193, 217, 85, 241, 104, 192 ));
      m_Handler        : AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind := new AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OfflineMapPackageQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult do
         Hr := RoGetActivationFactory (m_hString, IID_IOfflineMapPackageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackagesInBoundingBoxAsync (queryBoundingBox.m_IGeoboundingBox.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IOfflineMapPackageQueryResult := new Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
                     Retval.m_IOfflineMapPackageQueryResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function FindPackagesInGeocircleAsync
   (
      queryCircle : Windows.Devices.Geolocation.Geocircle'Class
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.Maps.OfflineMaps.OfflineMapPackage");
      m_Factory        : access WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OfflineMapPackageQueryResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OfflineMapPackageQueryResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
      m_IID            : aliased WinRt.IID := (3222955581, 28059, 21381, (174, 104, 10, 101, 169, 84, 69, 20 )); -- Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult;
      m_HandlerIID     : aliased WinRt.IID := (2320364489, 9621, 23532, (139, 161, 193, 217, 85, 241, 104, 192 ));
      m_Handler        : AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind := new AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OfflineMapPackageQueryResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind_Delegate, AsyncOperationCompletedHandler_OfflineMapPackageQueryResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryResult do
         Hr := RoGetActivationFactory (m_hString, IID_IOfflineMapPackageStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FindPackagesInGeocircleAsync (queryCircle.m_IGeocircle.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IOfflineMapPackageQueryResult := new Windows.Services.Maps.OfflineMaps.IOfflineMapPackageQueryResult;
                     Retval.m_IOfflineMapPackageQueryResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OfflineMapPackage

   function get_Status
   (
      this : in out OfflineMapPackage
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.OfflineMaps.OfflineMapPackageStatus;
   begin
      Hr := this.m_IOfflineMapPackage.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out OfflineMapPackage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOfflineMapPackage.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EnclosingRegionName
   (
      this : in out OfflineMapPackage
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOfflineMapPackage.all.get_EnclosingRegionName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EstimatedSizeInBytes
   (
      this : in out OfflineMapPackage
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IOfflineMapPackage.all.get_EstimatedSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out OfflineMapPackage;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IOfflineMapPackage.all.remove_StatusChanged (token);
   end;

   function add_StatusChanged
   (
      this : in out OfflineMapPackage;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IOfflineMapPackage.all.add_StatusChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestStartDownloadAsync
   (
      this : in out OfflineMapPackage
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageStartDownloadResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OfflineMapPackageStartDownloadResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OfflineMapPackageStartDownloadResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStartDownloadResult;
      m_IID            : aliased WinRt.IID := (2433905399, 62890, 21395, (148, 161, 233, 106, 223, 173, 61, 164 )); -- Windows.Services.Maps.OfflineMaps.OfflineMapPackageStartDownloadResult;
      m_HandlerIID     : aliased WinRt.IID := (2253694878, 50479, 24472, (175, 10, 82, 36, 102, 194, 114, 70 ));
      m_Handler        : AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult.Kind := new AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OfflineMapPackageStartDownloadResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult.Kind_Delegate, AsyncOperationCompletedHandler_OfflineMapPackageStartDownloadResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageStartDownloadResult do
         Hr := this.m_IOfflineMapPackage.all.RequestStartDownloadAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IOfflineMapPackageStartDownloadResult := new Windows.Services.Maps.OfflineMaps.IOfflineMapPackageStartDownloadResult;
                  Retval.m_IOfflineMapPackageStartDownloadResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OfflineMapPackageQueryResult

   procedure Initialize (this : in out OfflineMapPackageQueryResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out OfflineMapPackageQueryResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOfflineMapPackageQueryResult, IOfflineMapPackageQueryResult_Ptr);
   begin
      if this.m_IOfflineMapPackageQueryResult /= null then
         if this.m_IOfflineMapPackageQueryResult.all /= null then
            RefCount := this.m_IOfflineMapPackageQueryResult.all.Release;
            Free (this.m_IOfflineMapPackageQueryResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OfflineMapPackageQueryResult

   function get_Status
   (
      this : in out OfflineMapPackageQueryResult
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.OfflineMaps.OfflineMapPackageQueryStatus;
   begin
      Hr := this.m_IOfflineMapPackageQueryResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Packages
   (
      this : in out OfflineMapPackageQueryResult
   )
   return IVectorView_IOfflineMapPackage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IOfflineMapPackage.Kind;
   begin
      Hr := this.m_IOfflineMapPackageQueryResult.all.get_Packages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IOfflineMapPackage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OfflineMapPackageStartDownloadResult

   procedure Initialize (this : in out OfflineMapPackageStartDownloadResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out OfflineMapPackageStartDownloadResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOfflineMapPackageStartDownloadResult, IOfflineMapPackageStartDownloadResult_Ptr);
   begin
      if this.m_IOfflineMapPackageStartDownloadResult /= null then
         if this.m_IOfflineMapPackageStartDownloadResult.all /= null then
            RefCount := this.m_IOfflineMapPackageStartDownloadResult.all.Release;
            Free (this.m_IOfflineMapPackageStartDownloadResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OfflineMapPackageStartDownloadResult

   function get_Status
   (
      this : in out OfflineMapPackageStartDownloadResult
   )
   return WinRt.Windows.Services.Maps.OfflineMaps.OfflineMapPackageStartDownloadStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.Maps.OfflineMaps.OfflineMapPackageStartDownloadStatus;
   begin
      Hr := this.m_IOfflineMapPackageStartDownloadResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Media.Effects;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Media.Transcoding;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Editing is

   package IAsyncOperation_BackgroundAudioTrack is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Editing.IBackgroundAudioTrack);
   package AsyncOperationCompletedHandler_BackgroundAudioTrack is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Editing.IBackgroundAudioTrack);

   package IAsyncOperation_MediaClip is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Editing.IMediaClip);
   package AsyncOperationCompletedHandler_MediaClip is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Editing.IMediaClip);

   package IAsyncOperation_ImageStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_ImageStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_TranscodeFailureReason is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Media.Transcoding.TranscodeFailureReason, GenericObject);
   package AsyncOperationCompletedHandler_TranscodeFailureReason is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Media.Transcoding.TranscodeFailureReason, GenericObject);

   package IAsyncOperation_MediaComposition is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Editing.IMediaComposition);
   package AsyncOperationCompletedHandler_MediaComposition is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Editing.IMediaComposition);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundAudioTrack

   procedure Initialize (this : in out BackgroundAudioTrack) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundAudioTrack) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundAudioTrack, IBackgroundAudioTrack_Ptr);
   begin
      if this.m_IBackgroundAudioTrack /= null then
         if this.m_IBackgroundAudioTrack.all /= null then
            RefCount := this.m_IBackgroundAudioTrack.all.Release;
            Free (this.m_IBackgroundAudioTrack);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BackgroundAudioTrack

   function CreateFromEmbeddedAudioTrack
   (
      embeddedAudioTrack_p : Windows.Media.Editing.EmbeddedAudioTrack'Class
   )
   return WinRt.Windows.Media.Editing.BackgroundAudioTrack is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.BackgroundAudioTrack");
      m_Factory        : access WinRt.Windows.Media.Editing.IBackgroundAudioTrackStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IBackgroundAudioTrack;
   begin
      return RetVal : WinRt.Windows.Media.Editing.BackgroundAudioTrack do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundAudioTrackStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromEmbeddedAudioTrack (embeddedAudioTrack_p.m_IEmbeddedAudioTrack.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBackgroundAudioTrack := new Windows.Media.Editing.IBackgroundAudioTrack;
            Retval.m_IBackgroundAudioTrack.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromFileAsync
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Editing.BackgroundAudioTrack is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.BackgroundAudioTrack");
      m_Factory        : access WinRt.Windows.Media.Editing.IBackgroundAudioTrackStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_BackgroundAudioTrack.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_BackgroundAudioTrack.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Editing.IBackgroundAudioTrack;
      m_IID            : aliased WinRt.IID := (1228785816, 24694, 22005, (171, 132, 204, 249, 115, 172, 3, 151 )); -- Windows.Media.Editing.BackgroundAudioTrack;
      m_HandlerIID     : aliased WinRt.IID := (3095595975, 6283, 23589, (163, 187, 149, 144, 82, 188, 183, 64 ));
      m_Handler        : AsyncOperationCompletedHandler_BackgroundAudioTrack.Kind := new AsyncOperationCompletedHandler_BackgroundAudioTrack.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BackgroundAudioTrack.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BackgroundAudioTrack.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BackgroundAudioTrack.Kind_Delegate, AsyncOperationCompletedHandler_BackgroundAudioTrack.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Editing.BackgroundAudioTrack do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundAudioTrackStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IBackgroundAudioTrack := new Windows.Media.Editing.IBackgroundAudioTrack;
                     Retval.m_IBackgroundAudioTrack.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundAudioTrack

   function get_TrimTimeFromStart
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_TrimTimeFromStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimTimeFromStart
   (
      this : in out BackgroundAudioTrack;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.put_TrimTimeFromStart (value);
   end;

   function get_TrimTimeFromEnd
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_TrimTimeFromEnd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimTimeFromEnd
   (
      this : in out BackgroundAudioTrack;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.put_TrimTimeFromEnd (value);
   end;

   function get_OriginalDuration
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_OriginalDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrimmedDuration
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_TrimmedDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserData
   (
      this : in out BackgroundAudioTrack
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_UserData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Delay
   (
      this : in out BackgroundAudioTrack;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.put_Delay (value);
   end;

   function get_Delay
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Volume
   (
      this : in out BackgroundAudioTrack;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.put_Volume (value);
   end;

   function get_Volume
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_Volume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Clone
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Media.Editing.BackgroundAudioTrack'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IBackgroundAudioTrack;
   begin
      return RetVal : WinRt.Windows.Media.Editing.BackgroundAudioTrack do
         Hr := this.m_IBackgroundAudioTrack.all.Clone (m_ComRetVal'Access);
         Retval.m_IBackgroundAudioTrack := new Windows.Media.Editing.IBackgroundAudioTrack;
         Retval.m_IBackgroundAudioTrack.all := m_ComRetVal;
      end return;
   end;

   function GetAudioEncodingProperties
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IBackgroundAudioTrack.all.GetAudioEncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_AudioEffectDefinitions
   (
      this : in out BackgroundAudioTrack
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IBackgroundAudioTrack.all.get_AudioEffectDefinitions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmbeddedAudioTrack

   procedure Initialize (this : in out EmbeddedAudioTrack) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmbeddedAudioTrack) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmbeddedAudioTrack, IEmbeddedAudioTrack_Ptr);
   begin
      if this.m_IEmbeddedAudioTrack /= null then
         if this.m_IEmbeddedAudioTrack.all /= null then
            RefCount := this.m_IEmbeddedAudioTrack.all.Release;
            Free (this.m_IEmbeddedAudioTrack);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmbeddedAudioTrack

   function GetAudioEncodingProperties
   (
      this : in out EmbeddedAudioTrack
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IEmbeddedAudioTrack.all.GetAudioEncodingProperties (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaClip

   procedure Initialize (this : in out MediaClip) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaClip) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaClip, IMediaClip_Ptr);
   begin
      if this.m_IMediaClip /= null then
         if this.m_IMediaClip.all /= null then
            RefCount := this.m_IMediaClip.all.Release;
            Free (this.m_IMediaClip);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaClip

   function CreateFromColor
   (
      color : Windows.UI.Color;
      originalDuration : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Editing.MediaClip is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.MediaClip");
      m_Factory        : access WinRt.Windows.Media.Editing.IMediaClipStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaClip;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaClipStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromColor (color, originalDuration, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
            Retval.m_IMediaClip.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromFileAsync_MediaClip
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Editing.MediaClip is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.MediaClip");
      m_Factory        : access WinRt.Windows.Media.Editing.IMediaClipStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaClip.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaClip.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Editing.IMediaClip;
      m_IID            : aliased WinRt.IID := (3051788765, 46833, 20928, (183, 82, 224, 47, 160, 6, 141, 121 )); -- Windows.Media.Editing.MediaClip;
      m_HandlerIID     : aliased WinRt.IID := (1624105916, 4511, 20648, (156, 203, 158, 165, 126, 169, 107, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaClip.Kind := new AsyncOperationCompletedHandler_MediaClip.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaClip.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaClip.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaClip.Kind_Delegate, AsyncOperationCompletedHandler_MediaClip.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaClipStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
                     Retval.m_IMediaClip.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromImageFileAsync
   (
      file : Windows.Storage.IStorageFile;
      originalDuration : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Editing.MediaClip is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.MediaClip");
      m_Factory        : access WinRt.Windows.Media.Editing.IMediaClipStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaClip.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaClip.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Editing.IMediaClip;
      m_IID            : aliased WinRt.IID := (3051788765, 46833, 20928, (183, 82, 224, 47, 160, 6, 141, 121 )); -- Windows.Media.Editing.MediaClip;
      m_HandlerIID     : aliased WinRt.IID := (1624105916, 4511, 20648, (156, 203, 158, 165, 126, 169, 107, 253 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaClip.Kind := new AsyncOperationCompletedHandler_MediaClip.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaClip.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaClip.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaClip.Kind_Delegate, AsyncOperationCompletedHandler_MediaClip.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaClipStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromImageFileAsync (file, originalDuration, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
                     Retval.m_IMediaClip.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromSurface
   (
      surface : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface;
      originalDuration : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Editing.MediaClip is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.MediaClip");
      m_Factory        : access WinRt.Windows.Media.Editing.IMediaClipStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaClip;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaClipStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromSurface (surface, originalDuration, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
            Retval.m_IMediaClip.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaClip

   function get_TrimTimeFromStart
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_TrimTimeFromStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimTimeFromStart
   (
      this : in out MediaClip;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaClip.all.put_TrimTimeFromStart (value);
   end;

   function get_TrimTimeFromEnd
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_TrimTimeFromEnd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TrimTimeFromEnd
   (
      this : in out MediaClip;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaClip.all.put_TrimTimeFromEnd (value);
   end;

   function get_OriginalDuration
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_OriginalDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrimmedDuration
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_TrimmedDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UserData
   (
      this : in out MediaClip
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IMediaClip.all.get_UserData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function Clone
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Media.Editing.MediaClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaClip;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := this.m_IMediaClip.all.Clone (m_ComRetVal'Access);
         Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
         Retval.m_IMediaClip.all := m_ComRetVal;
      end return;
   end;

   function get_StartTimeInComposition
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_StartTimeInComposition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndTimeInComposition
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaClip.all.get_EndTimeInComposition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EmbeddedAudioTracks
   (
      this : in out MediaClip
   )
   return IVectorView_IEmbeddedAudioTrack.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IEmbeddedAudioTrack.Kind;
   begin
      Hr := this.m_IMediaClip.all.get_EmbeddedAudioTracks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IEmbeddedAudioTrack (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SelectedEmbeddedAudioTrackIndex
   (
      this : in out MediaClip
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaClip.all.get_SelectedEmbeddedAudioTrackIndex (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedEmbeddedAudioTrackIndex
   (
      this : in out MediaClip;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaClip.all.put_SelectedEmbeddedAudioTrackIndex (value);
   end;

   procedure put_Volume
   (
      this : in out MediaClip;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaClip.all.put_Volume (value);
   end;

   function get_Volume
   (
      this : in out MediaClip
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaClip.all.get_Volume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetVideoEncodingProperties
   (
      this : in out MediaClip
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := this.m_IMediaClip.all.GetVideoEncodingProperties (m_ComRetVal'Access);
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_AudioEffectDefinitions
   (
      this : in out MediaClip
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IMediaClip.all.get_AudioEffectDefinitions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoEffectDefinitions
   (
      this : in out MediaClip
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IMediaClip.all.get_VideoEffectDefinitions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaComposition

   procedure Initialize (this : in out MediaComposition) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaComposition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaComposition, IMediaComposition_Ptr);
   begin
      if this.m_IMediaComposition /= null then
         if this.m_IMediaComposition.all /= null then
            RefCount := this.m_IMediaComposition.all.Release;
            Free (this.m_IMediaComposition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaComposition

   function Constructor return MediaComposition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Editing.MediaComposition");
      m_ComRetVal  : aliased Windows.Media.Editing.IMediaComposition;
   begin
      return RetVal : MediaComposition do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaComposition := new Windows.Media.Editing.IMediaComposition;
            Retval.m_IMediaComposition.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaComposition

   function LoadAsync
   (
      file : Windows.Storage.StorageFile'Class
   )
   return WinRt.Windows.Media.Editing.MediaComposition is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Editing.MediaComposition");
      m_Factory        : access WinRt.Windows.Media.Editing.IMediaCompositionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaComposition.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaComposition.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Editing.IMediaComposition;
      m_IID            : aliased WinRt.IID := (3782273176, 53535, 20564, (171, 19, 16, 128, 164, 128, 118, 54 )); -- Windows.Media.Editing.MediaComposition;
      m_HandlerIID     : aliased WinRt.IID := (3989984248, 20157, 22245, (149, 146, 60, 9, 55, 94, 189, 196 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaComposition.Kind := new AsyncOperationCompletedHandler_MediaComposition.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaComposition.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaComposition.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaComposition.Kind_Delegate, AsyncOperationCompletedHandler_MediaComposition.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaComposition do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaCompositionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.LoadAsync (file.m_IStorageFile.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaComposition := new Windows.Media.Editing.IMediaComposition;
                     Retval.m_IMediaComposition.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaComposition

   function get_Duration
   (
      this : in out MediaComposition
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaComposition.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Clips
   (
      this : in out MediaComposition
   )
   return IVector_IMediaClip.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IMediaClip.Kind;
   begin
      Hr := this.m_IMediaComposition.all.get_Clips (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IMediaClip (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_BackgroundAudioTracks
   (
      this : in out MediaComposition
   )
   return IVector_IBackgroundAudioTrack.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IBackgroundAudioTrack.Kind;
   begin
      Hr := this.m_IMediaComposition.all.get_BackgroundAudioTracks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IBackgroundAudioTrack (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_UserData
   (
      this : in out MediaComposition
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IMediaComposition.all.get_UserData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function Clone
   (
      this : in out MediaComposition
   )
   return WinRt.Windows.Media.Editing.MediaComposition'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaComposition;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaComposition do
         Hr := this.m_IMediaComposition.all.Clone (m_ComRetVal'Access);
         Retval.m_IMediaComposition := new Windows.Media.Editing.IMediaComposition;
         Retval.m_IMediaComposition.all := m_ComRetVal;
      end return;
   end;

   procedure SaveAsync
   (
      this : in out MediaComposition;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaComposition.all.SaveAsync (file, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetThumbnailAsync
   (
      this : in out MediaComposition;
      timeFromStart : Windows.Foundation.TimeSpan;
      scaledWidth : WinRt.Int32;
      scaledHeight : WinRt.Int32;
      framePrecision : Windows.Media.Editing.VideoFramePrecision
   )
   return WinRt.Windows.Graphics.Imaging.ImageStream'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (1749116350, 17, 22230, (190, 191, 67, 0, 22, 213, 27, 122 )); -- Windows.Graphics.Imaging.ImageStream;
      m_HandlerIID     : aliased WinRt.IID := (700154504, 17506, 20846, (166, 117, 140, 146, 53, 196, 41, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageStream.Kind := new AsyncOperationCompletedHandler_ImageStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageStream.Kind_Delegate, AsyncOperationCompletedHandler_ImageStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.ImageStream do
         Hr := this.m_IMediaComposition.all.GetThumbnailAsync (timeFromStart, scaledWidth, scaledHeight, framePrecision, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IRandomAccessStreamWithContentType := new Windows.Storage.Streams.IRandomAccessStreamWithContentType;
                  Retval.m_IRandomAccessStreamWithContentType.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetThumbnailsAsync
   (
      this : in out MediaComposition;
      timesFromStart : GenericObject;
      scaledWidth : WinRt.Int32;
      scaledHeight : WinRt.Int32;
      framePrecision : Windows.Media.Editing.VideoFramePrecision
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2777515646, 48879, 24343, (183, 207, 228, 200, 123, 226, 46, 228 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1719915676, 40917, 23304, (137, 159, 226, 215, 220, 92, 249, 196 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaComposition.all.GetThumbnailsAsync (timesFromStart, scaledWidth, scaledHeight, framePrecision, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RenderToFileAsync
   (
      this : in out MediaComposition;
      destination : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Transcoding.TranscodeFailureReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TranscodeFailureReason.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TranscodeFailureReason.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.TranscodeFailureReason;
      m_IID            : aliased WinRt.IID := (657386528, 19300, 23891, (166, 68, 249, 145, 123, 61, 25, 216 )); -- Windows.Media.Transcoding.TranscodeFailureReason;
      m_HandlerIID     : aliased WinRt.IID := (135207056, 20426, 20837, (169, 137, 75, 7, 218, 142, 11, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_TranscodeFailureReason.Kind := new AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TranscodeFailureReason.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_TranscodeFailureReason.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaComposition.all.RenderToFileAsync (destination, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RenderToFileAsync
   (
      this : in out MediaComposition;
      destination : Windows.Storage.IStorageFile;
      trimmingPreference : Windows.Media.Editing.MediaTrimmingPreference
   )
   return WinRt.Windows.Media.Transcoding.TranscodeFailureReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TranscodeFailureReason.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TranscodeFailureReason.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.TranscodeFailureReason;
      m_IID            : aliased WinRt.IID := (657386528, 19300, 23891, (166, 68, 249, 145, 123, 61, 25, 216 )); -- Windows.Media.Transcoding.TranscodeFailureReason;
      m_HandlerIID     : aliased WinRt.IID := (135207056, 20426, 20837, (169, 137, 75, 7, 218, 142, 11, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_TranscodeFailureReason.Kind := new AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TranscodeFailureReason.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_TranscodeFailureReason.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaComposition.all.RenderToFileAsync (destination, trimmingPreference, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RenderToFileAsync
   (
      this : in out MediaComposition;
      destination : Windows.Storage.IStorageFile;
      trimmingPreference : Windows.Media.Editing.MediaTrimmingPreference;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Transcoding.TranscodeFailureReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TranscodeFailureReason.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TranscodeFailureReason.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Transcoding.TranscodeFailureReason;
      m_IID            : aliased WinRt.IID := (657386528, 19300, 23891, (166, 68, 249, 145, 123, 61, 25, 216 )); -- Windows.Media.Transcoding.TranscodeFailureReason;
      m_HandlerIID     : aliased WinRt.IID := (135207056, 20426, 20837, (169, 137, 75, 7, 218, 142, 11, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_TranscodeFailureReason.Kind := new AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TranscodeFailureReason.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TranscodeFailureReason.Kind_Delegate, AsyncOperationCompletedHandler_TranscodeFailureReason.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaComposition.all.RenderToFileAsync (destination, trimmingPreference, encodingProfile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function CreateDefaultEncodingProfile
   (
      this : in out MediaComposition
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := this.m_IMediaComposition.all.CreateDefaultEncodingProfile (m_ComRetVal'Access);
         Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
         Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
      end return;
   end;

   function GenerateMediaStreamSource
   (
      this : in out MediaComposition
   )
   return WinRt.Windows.Media.Core.MediaStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSource do
         Hr := this.m_IMediaComposition.all.GenerateMediaStreamSource (m_ComRetVal'Access);
         Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
         Retval.m_IMediaStreamSource.all := m_ComRetVal;
      end return;
   end;

   function GenerateMediaStreamSource
   (
      this : in out MediaComposition;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class
   )
   return WinRt.Windows.Media.Core.MediaStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSource do
         Hr := this.m_IMediaComposition.all.GenerateMediaStreamSource (encodingProfile.m_IMediaEncodingProfile.all, m_ComRetVal'Access);
         Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
         Retval.m_IMediaStreamSource.all := m_ComRetVal;
      end return;
   end;

   function GeneratePreviewMediaStreamSource
   (
      this : in out MediaComposition;
      scaledWidth : WinRt.Int32;
      scaledHeight : WinRt.Int32
   )
   return WinRt.Windows.Media.Core.MediaStreamSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaStreamSource;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaStreamSource do
         Hr := this.m_IMediaComposition.all.GeneratePreviewMediaStreamSource (scaledWidth, scaledHeight, m_ComRetVal'Access);
         Retval.m_IMediaStreamSource := new Windows.Media.Core.IMediaStreamSource;
         Retval.m_IMediaStreamSource.all := m_ComRetVal;
      end return;
   end;

   function get_OverlayLayers
   (
      this : in out MediaComposition
   )
   return IVector_IMediaOverlayLayer.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Editing.IMediaComposition2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IMediaOverlayLayer.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Editing.IMediaComposition_Interface, WinRt.Windows.Media.Editing.IMediaComposition2, WinRt.Windows.Media.Editing.IID_IMediaComposition2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaComposition.all);
      Hr := m_Interface.get_OverlayLayers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_IMediaOverlayLayer (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaOverlay

   procedure Initialize (this : in out MediaOverlay) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaOverlay) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaOverlay, IMediaOverlay_Ptr);
   begin
      if this.m_IMediaOverlay /= null then
         if this.m_IMediaOverlay.all /= null then
            RefCount := this.m_IMediaOverlay.all.Release;
            Free (this.m_IMediaOverlay);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaOverlay

   function Constructor
   (
      clip : Windows.Media.Editing.MediaClip'Class
   )
   return MediaOverlay is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Editing.MediaOverlay");
      m_Factory    : access IMediaOverlayFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Editing.IMediaOverlay;
   begin
      return RetVal : MediaOverlay do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaOverlayFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (clip.m_IMediaClip.all, m_ComRetVal'Access);
            Retval.m_IMediaOverlay := new Windows.Media.Editing.IMediaOverlay;
            Retval.m_IMediaOverlay.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      clip : Windows.Media.Editing.MediaClip'Class;
      position : Windows.Foundation.Rect;
      opacity : WinRt.Double
   )
   return MediaOverlay is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Editing.MediaOverlay");
      m_Factory    : access IMediaOverlayFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Editing.IMediaOverlay;
   begin
      return RetVal : MediaOverlay do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaOverlayFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPositionAndOpacity (clip.m_IMediaClip.all, position, opacity, m_ComRetVal'Access);
            Retval.m_IMediaOverlay := new Windows.Media.Editing.IMediaOverlay;
            Retval.m_IMediaOverlay.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaOverlay

   function get_Position
   (
      this : in out MediaOverlay
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IMediaOverlay.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Position
   (
      this : in out MediaOverlay;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaOverlay.all.put_Position (value);
   end;

   procedure put_Delay
   (
      this : in out MediaOverlay;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaOverlay.all.put_Delay (value);
   end;

   function get_Delay
   (
      this : in out MediaOverlay
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaOverlay.all.get_Delay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Opacity
   (
      this : in out MediaOverlay
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaOverlay.all.get_Opacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Opacity
   (
      this : in out MediaOverlay;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaOverlay.all.put_Opacity (value);
   end;

   function Clone
   (
      this : in out MediaOverlay
   )
   return WinRt.Windows.Media.Editing.MediaOverlay'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaOverlay;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaOverlay do
         Hr := this.m_IMediaOverlay.all.Clone (m_ComRetVal'Access);
         Retval.m_IMediaOverlay := new Windows.Media.Editing.IMediaOverlay;
         Retval.m_IMediaOverlay.all := m_ComRetVal;
      end return;
   end;

   function get_Clip
   (
      this : in out MediaOverlay
   )
   return WinRt.Windows.Media.Editing.MediaClip'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaClip;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaClip do
         Hr := this.m_IMediaOverlay.all.get_Clip (m_ComRetVal'Access);
         Retval.m_IMediaClip := new Windows.Media.Editing.IMediaClip;
         Retval.m_IMediaClip.all := m_ComRetVal;
      end return;
   end;

   function get_AudioEnabled
   (
      this : in out MediaOverlay
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaOverlay.all.get_AudioEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AudioEnabled
   (
      this : in out MediaOverlay;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaOverlay.all.put_AudioEnabled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaOverlayLayer

   procedure Initialize (this : in out MediaOverlayLayer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaOverlayLayer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaOverlayLayer, IMediaOverlayLayer_Ptr);
   begin
      if this.m_IMediaOverlayLayer /= null then
         if this.m_IMediaOverlayLayer.all /= null then
            RefCount := this.m_IMediaOverlayLayer.all.Release;
            Free (this.m_IMediaOverlayLayer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaOverlayLayer

   function Constructor return MediaOverlayLayer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Editing.MediaOverlayLayer");
      m_ComRetVal  : aliased Windows.Media.Editing.IMediaOverlayLayer;
   begin
      return RetVal : MediaOverlayLayer do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaOverlayLayer := new Windows.Media.Editing.IMediaOverlayLayer;
            Retval.m_IMediaOverlayLayer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      compositorDefinition : Windows.Media.Effects.IVideoCompositorDefinition
   )
   return MediaOverlayLayer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Editing.MediaOverlayLayer");
      m_Factory    : access IMediaOverlayLayerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Editing.IMediaOverlayLayer;
   begin
      return RetVal : MediaOverlayLayer do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaOverlayLayerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithCompositorDefinition (compositorDefinition, m_ComRetVal'Access);
            Retval.m_IMediaOverlayLayer := new Windows.Media.Editing.IMediaOverlayLayer;
            Retval.m_IMediaOverlayLayer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaOverlayLayer

   function Clone
   (
      this : in out MediaOverlayLayer
   )
   return WinRt.Windows.Media.Editing.MediaOverlayLayer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Editing.IMediaOverlayLayer;
   begin
      return RetVal : WinRt.Windows.Media.Editing.MediaOverlayLayer do
         Hr := this.m_IMediaOverlayLayer.all.Clone (m_ComRetVal'Access);
         Retval.m_IMediaOverlayLayer := new Windows.Media.Editing.IMediaOverlayLayer;
         Retval.m_IMediaOverlayLayer.all := m_ComRetVal;
      end return;
   end;

   function get_Overlays
   (
      this : in out MediaOverlayLayer
   )
   return IVector_IMediaOverlay.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IMediaOverlay.Kind;
   begin
      Hr := this.m_IMediaOverlayLayer.all.get_Overlays (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IMediaOverlay (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CustomCompositorDefinition
   (
      this : in out MediaOverlayLayer
   )
   return WinRt.Windows.Media.Effects.IVideoCompositorDefinition is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Effects.IVideoCompositorDefinition;
   begin
      Hr := this.m_IMediaOverlayLayer.all.get_CustomCompositorDefinition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

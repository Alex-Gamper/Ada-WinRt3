--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
limited with WinRt.Windows.Security.Cryptography.Certificates;
limited with WinRt.Windows.Storage.Streams;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Security.Cryptography.Core is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IAsymmetricAlgorithmNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IAsymmetricAlgorithmNamesStatics is access all IAsymmetricAlgorithmNamesStatics_Interface'Class;

   type IAsymmetricAlgorithmNamesStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IAsymmetricAlgorithmNamesStatics2 is access all IAsymmetricAlgorithmNamesStatics2_Interface'Class;

   type IAsymmetricKeyAlgorithmProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IAsymmetricKeyAlgorithmProvider is access all IAsymmetricKeyAlgorithmProvider_Interface'Class;
   type IAsymmetricKeyAlgorithmProvider_Ptr is access all IAsymmetricKeyAlgorithmProvider;

   type IAsymmetricKeyAlgorithmProvider2_Interface is interface and WinRt.IInspectable_Interface;
   type IAsymmetricKeyAlgorithmProvider2 is access all IAsymmetricKeyAlgorithmProvider2_Interface'Class;

   type IAsymmetricKeyAlgorithmProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IAsymmetricKeyAlgorithmProviderStatics is access all IAsymmetricKeyAlgorithmProviderStatics_Interface'Class;

   type ICryptographicEngineStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ICryptographicEngineStatics is access all ICryptographicEngineStatics_Interface'Class;

   type ICryptographicEngineStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type ICryptographicEngineStatics2 is access all ICryptographicEngineStatics2_Interface'Class;

   type ICryptographicKey_Interface is interface and WinRt.IInspectable_Interface;
   type ICryptographicKey is access all ICryptographicKey_Interface'Class;
   type ICryptographicKey_Ptr is access all ICryptographicKey;

   type IEccCurveNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IEccCurveNamesStatics is access all IEccCurveNamesStatics_Interface'Class;

   type IEncryptedAndAuthenticatedData_Interface is interface and WinRt.IInspectable_Interface;
   type IEncryptedAndAuthenticatedData is access all IEncryptedAndAuthenticatedData_Interface'Class;
   type IEncryptedAndAuthenticatedData_Ptr is access all IEncryptedAndAuthenticatedData;

   type IHashAlgorithmNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IHashAlgorithmNamesStatics is access all IHashAlgorithmNamesStatics_Interface'Class;

   type IHashAlgorithmProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IHashAlgorithmProvider is access all IHashAlgorithmProvider_Interface'Class;
   type IHashAlgorithmProvider_Ptr is access all IHashAlgorithmProvider;

   type IHashAlgorithmProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IHashAlgorithmProviderStatics is access all IHashAlgorithmProviderStatics_Interface'Class;

   type IHashComputation_Interface is interface and WinRt.IInspectable_Interface;
   type IHashComputation is access all IHashComputation_Interface'Class;
   type IHashComputation_Ptr is access all IHashComputation;

   type IKeyDerivationAlgorithmNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationAlgorithmNamesStatics is access all IKeyDerivationAlgorithmNamesStatics_Interface'Class;

   type IKeyDerivationAlgorithmNamesStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationAlgorithmNamesStatics2 is access all IKeyDerivationAlgorithmNamesStatics2_Interface'Class;

   type IKeyDerivationAlgorithmProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationAlgorithmProvider is access all IKeyDerivationAlgorithmProvider_Interface'Class;
   type IKeyDerivationAlgorithmProvider_Ptr is access all IKeyDerivationAlgorithmProvider;

   type IKeyDerivationAlgorithmProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationAlgorithmProviderStatics is access all IKeyDerivationAlgorithmProviderStatics_Interface'Class;

   type IKeyDerivationParameters_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationParameters is access all IKeyDerivationParameters_Interface'Class;
   type IKeyDerivationParameters_Ptr is access all IKeyDerivationParameters;

   type IKeyDerivationParameters2_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationParameters2 is access all IKeyDerivationParameters2_Interface'Class;

   type IKeyDerivationParametersStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationParametersStatics is access all IKeyDerivationParametersStatics_Interface'Class;

   type IKeyDerivationParametersStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IKeyDerivationParametersStatics2 is access all IKeyDerivationParametersStatics2_Interface'Class;

   type IMacAlgorithmNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IMacAlgorithmNamesStatics is access all IMacAlgorithmNamesStatics_Interface'Class;

   type IMacAlgorithmProvider_Interface is interface and WinRt.IInspectable_Interface;
   type IMacAlgorithmProvider is access all IMacAlgorithmProvider_Interface'Class;
   type IMacAlgorithmProvider_Ptr is access all IMacAlgorithmProvider;

   type IMacAlgorithmProvider2_Interface is interface and WinRt.IInspectable_Interface;
   type IMacAlgorithmProvider2 is access all IMacAlgorithmProvider2_Interface'Class;

   type IMacAlgorithmProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IMacAlgorithmProviderStatics is access all IMacAlgorithmProviderStatics_Interface'Class;

   type IPersistedKeyProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IPersistedKeyProviderStatics is access all IPersistedKeyProviderStatics_Interface'Class;

   type ISymmetricAlgorithmNamesStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ISymmetricAlgorithmNamesStatics is access all ISymmetricAlgorithmNamesStatics_Interface'Class;

   type ISymmetricKeyAlgorithmProvider_Interface is interface and WinRt.IInspectable_Interface;
   type ISymmetricKeyAlgorithmProvider is access all ISymmetricKeyAlgorithmProvider_Interface'Class;
   type ISymmetricKeyAlgorithmProvider_Ptr is access all ISymmetricKeyAlgorithmProvider;

   type ISymmetricKeyAlgorithmProviderStatics_Interface is interface and WinRt.IInspectable_Interface;
   type ISymmetricKeyAlgorithmProviderStatics is access all ISymmetricKeyAlgorithmProviderStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type AsymmetricKeyAlgorithmProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IAsymmetricKeyAlgorithmProvider : access Windows.Security.Cryptography.Core.IAsymmetricKeyAlgorithmProvider;
      end record;
   type AsymmetricKeyAlgorithmProvider_Ptr is access all AsymmetricKeyAlgorithmProvider;

   type CryptographicHash is new Ada.Finalization.Limited_Controlled with
      record
         m_IHashComputation : access Windows.Security.Cryptography.Core.IHashComputation;
      end record;
   type CryptographicHash_Ptr is access all CryptographicHash;

   type CryptographicKey is new Ada.Finalization.Limited_Controlled with
      record
         m_ICryptographicKey : access Windows.Security.Cryptography.Core.ICryptographicKey;
      end record;
   type CryptographicKey_Ptr is access all CryptographicKey;

   type EncryptedAndAuthenticatedData is new Ada.Finalization.Limited_Controlled with
      record
         m_IEncryptedAndAuthenticatedData : access Windows.Security.Cryptography.Core.IEncryptedAndAuthenticatedData;
      end record;
   type EncryptedAndAuthenticatedData_Ptr is access all EncryptedAndAuthenticatedData;

   type HashAlgorithmProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IHashAlgorithmProvider : access Windows.Security.Cryptography.Core.IHashAlgorithmProvider;
      end record;
   type HashAlgorithmProvider_Ptr is access all HashAlgorithmProvider;

   type KeyDerivationAlgorithmProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IKeyDerivationAlgorithmProvider : access Windows.Security.Cryptography.Core.IKeyDerivationAlgorithmProvider;
      end record;
   type KeyDerivationAlgorithmProvider_Ptr is access all KeyDerivationAlgorithmProvider;

   type KeyDerivationParameters is new Ada.Finalization.Limited_Controlled with
      record
         m_IKeyDerivationParameters : access Windows.Security.Cryptography.Core.IKeyDerivationParameters;
      end record;
   type KeyDerivationParameters_Ptr is access all KeyDerivationParameters;

   type MacAlgorithmProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_IMacAlgorithmProvider : access Windows.Security.Cryptography.Core.IMacAlgorithmProvider;
      end record;
   type MacAlgorithmProvider_Ptr is access all MacAlgorithmProvider;

   type SymmetricKeyAlgorithmProvider is new Ada.Finalization.Limited_Controlled with
      record
         m_ISymmetricKeyAlgorithmProvider : access Windows.Security.Cryptography.Core.ISymmetricKeyAlgorithmProvider;
      end record;
   type SymmetricKeyAlgorithmProvider_Ptr is access all SymmetricKeyAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type Capi1KdfTargetAlgorithm is (
      NotAes_e,
      Aes_e
   );
   for Capi1KdfTargetAlgorithm use (
      NotAes_e => 0,
      Aes_e => 1
   );
   type Capi1KdfTargetAlgorithm_Ptr is access all Capi1KdfTargetAlgorithm;

   type CryptographicPadding is (
      None_e,
      RsaOaep_e,
      RsaPkcs1V15_e,
      RsaPss_e
   );
   for CryptographicPadding use (
      None_e => 0,
      RsaOaep_e => 1,
      RsaPkcs1V15_e => 2,
      RsaPss_e => 3
   );
   type CryptographicPadding_Ptr is access all CryptographicPadding;

   type CryptographicPrivateKeyBlobType is (
      Pkcs8RawPrivateKeyInfo_e,
      Pkcs1RsaPrivateKey_e,
      BCryptPrivateKey_e,
      Capi1PrivateKey_e,
      BCryptEccFullPrivateKey_e
   );
   for CryptographicPrivateKeyBlobType use (
      Pkcs8RawPrivateKeyInfo_e => 0,
      Pkcs1RsaPrivateKey_e => 1,
      BCryptPrivateKey_e => 2,
      Capi1PrivateKey_e => 3,
      BCryptEccFullPrivateKey_e => 4
   );
   type CryptographicPrivateKeyBlobType_Ptr is access all CryptographicPrivateKeyBlobType;

   type CryptographicPublicKeyBlobType is (
      X509SubjectPublicKeyInfo_e,
      Pkcs1RsaPublicKey_e,
      BCryptPublicKey_e,
      Capi1PublicKey_e,
      BCryptEccFullPublicKey_e
   );
   for CryptographicPublicKeyBlobType use (
      X509SubjectPublicKeyInfo_e => 0,
      Pkcs1RsaPublicKey_e => 1,
      BCryptPublicKey_e => 2,
      Capi1PublicKey_e => 3,
      BCryptEccFullPublicKey_e => 4
   );
   type CryptographicPublicKeyBlobType_Ptr is access all CryptographicPublicKeyBlobType;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IAsymmetricAlgorithmNamesStatics is interface and WinRt.IInspectable;

      function get_RsaPkcs1
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaOaepSha1
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaOaepSha256
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaOaepSha384
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaOaepSha512
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_EcdsaP256Sha256
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_EcdsaP384Sha384
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_EcdsaP521Sha512
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DsaSha1
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DsaSha256
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPkcs1Sha1
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPkcs1Sha256
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPkcs1Sha384
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPkcs1Sha512
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPssSha1
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPssSha256
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPssSha384
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_RsaSignPssSha512
      (
         this : access IAsymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IAsymmetricAlgorithmNamesStatics : aliased WinRt.IID := (3405184228, 26560, 18090, (132, 249, 117, 46, 119, 68, 159, 155 ));

   -----------------------------------------------------------------------------
   -- type IAsymmetricAlgorithmNamesStatics2 is interface and WinRt.IInspectable;

      function get_EcdsaSha256
      (
         this : access IAsymmetricAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_EcdsaSha384
      (
         this : access IAsymmetricAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_EcdsaSha512
      (
         this : access IAsymmetricAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IAsymmetricAlgorithmNamesStatics2 : aliased WinRt.IID := (4047618262, 19455, 20259, (186, 102, 96, 69, 177, 55, 213, 223 ));

   -----------------------------------------------------------------------------
   -- type IAsymmetricKeyAlgorithmProvider is interface and WinRt.IInspectable;

      function get_AlgorithmName
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function CreateKeyPair
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         keySize : WinRt.UInt32;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      function ImportKeyPair
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         keyBlob : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      function ImportKeyPair
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         keyBlob : Windows.Storage.Streams.IBuffer;
         BlobType : Windows.Security.Cryptography.Core.CryptographicPrivateKeyBlobType;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      function ImportPublicKey
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         keyBlob : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      function ImportPublicKey
      (
         this : access IAsymmetricKeyAlgorithmProvider_Interface;
         keyBlob : Windows.Storage.Streams.IBuffer;
         BlobType : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_IAsymmetricKeyAlgorithmProvider : aliased WinRt.IID := (3906142007, 25177, 20104, (183, 224, 148, 25, 31, 222, 105, 158 ));

   -----------------------------------------------------------------------------
   -- type IAsymmetricKeyAlgorithmProvider2 is interface and WinRt.IInspectable;

      function CreateKeyPairWithCurveName
      (
         this : access IAsymmetricKeyAlgorithmProvider2_Interface;
         curveName : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      function CreateKeyPairWithCurveParameters
      (
         this : access IAsymmetricKeyAlgorithmProvider2_Interface;
         parametersSize : WinRt.UInt32;
         parameters : WinRt.Byte_Ptr;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_IAsymmetricKeyAlgorithmProvider2 : aliased WinRt.IID := (1311910526, 31821, 18839, (172, 79, 27, 132, 139, 54, 48, 110 ));

   -----------------------------------------------------------------------------
   -- type IAsymmetricKeyAlgorithmProviderStatics is interface and WinRt.IInspectable;

      function OpenAlgorithm
      (
         this : access IAsymmetricKeyAlgorithmProviderStatics_Interface;
         algorithm : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.IAsymmetricKeyAlgorithmProvider
      )
      return WinRt.Hresult is abstract;

      IID_IAsymmetricKeyAlgorithmProviderStatics : aliased WinRt.IID := (1113316888, 42995, 18342, (168, 210, 196, 141, 96, 51, 166, 92 ));

   -----------------------------------------------------------------------------
   -- type ICryptographicEngineStatics is interface and WinRt.IInspectable;

      function Encrypt
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function Decrypt
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function EncryptAndAuthenticate
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         nonce : Windows.Storage.Streams.IBuffer;
         authenticatedData : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.IEncryptedAndAuthenticatedData
      )
      return WinRt.Hresult is abstract;

      function DecryptAndAuthenticate
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         nonce : Windows.Storage.Streams.IBuffer;
         authenticationTag : Windows.Storage.Streams.IBuffer;
         authenticatedData : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function Sign
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function VerifySignature
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         signature : Windows.Storage.Streams.IBuffer;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function DeriveKeyMaterial
      (
         this : access ICryptographicEngineStatics_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         parameters : Windows.Security.Cryptography.Core.IKeyDerivationParameters;
         desiredKeySize : WinRt.UInt32;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      IID_ICryptographicEngineStatics : aliased WinRt.IID := (2682914361, 28663, 19589, (160, 149, 149, 235, 49, 113, 94, 185 ));

   -----------------------------------------------------------------------------
   -- type ICryptographicEngineStatics2 is interface and WinRt.IInspectable;

      function SignHashedData
      (
         this : access ICryptographicEngineStatics2_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function VerifySignatureWithHashInput
      (
         this : access ICryptographicEngineStatics2_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         signature : Windows.Storage.Streams.IBuffer;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function DecryptAsync
      (
         this : access ICryptographicEngineStatics2_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function SignAsync
      (
         this : access ICryptographicEngineStatics2_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function SignHashedDataAsync
      (
         this : access ICryptographicEngineStatics2_Interface;
         key : Windows.Security.Cryptography.Core.ICryptographicKey;
         data : Windows.Storage.Streams.IBuffer;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_ICryptographicEngineStatics2 : aliased WinRt.IID := (1733904638, 57247, 16785, (146, 199, 108, 230, 245, 132, 32, 224 ));

   -----------------------------------------------------------------------------
   -- type ICryptographicKey is interface and WinRt.IInspectable;

      function get_KeySize
      (
         this : access ICryptographicKey_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function Export
      (
         this : access ICryptographicKey_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function Export
      (
         this : access ICryptographicKey_Interface;
         BlobType : Windows.Security.Cryptography.Core.CryptographicPrivateKeyBlobType;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function ExportPublicKey
      (
         this : access ICryptographicKey_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function ExportPublicKey
      (
         this : access ICryptographicKey_Interface;
         BlobType : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      IID_ICryptographicKey : aliased WinRt.IID := (3978967920, 36475, 16393, (132, 1, 255, 209, 166, 46, 235, 39 ));

   -----------------------------------------------------------------------------
   -- type IEccCurveNamesStatics is interface and WinRt.IInspectable;

      function get_BrainpoolP160r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP160t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP192r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP192t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP224r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP224t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP256r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP256t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP320r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP320t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP384r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP384t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP512r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BrainpoolP512t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Curve25519
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Ec192wapi
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NistP192
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NistP224
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NistP256
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NistP384
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NistP521
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NumsP256t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NumsP384t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_NumsP512t1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP160k1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP160r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP160r2
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP192k1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP192r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP224k1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP224r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP256k1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP256r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP384r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_SecP521r1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Wtls7
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Wtls9
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Wtls12
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P192v1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P192v2
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P192v3
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P239v1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P239v2
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P239v3
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_X962P256v1
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AllEccCurveNames
      (
         this : access IEccCurveNamesStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IEccCurveNamesStatics : aliased WinRt.IID := (3019870988, 44779, 16542, (183, 212, 155, 149, 41, 90, 174, 207 ));

   -----------------------------------------------------------------------------
   -- type IEncryptedAndAuthenticatedData is interface and WinRt.IInspectable;

      function get_EncryptedData
      (
         this : access IEncryptedAndAuthenticatedData_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function get_AuthenticationTag
      (
         this : access IEncryptedAndAuthenticatedData_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      IID_IEncryptedAndAuthenticatedData : aliased WinRt.IID := (1873031143, 7883, 19200, (190, 165, 96, 184, 63, 134, 47, 23 ));

   -----------------------------------------------------------------------------
   -- type IHashAlgorithmNamesStatics is interface and WinRt.IInspectable;

      function get_Md5
      (
         this : access IHashAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sha1
      (
         this : access IHashAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sha256
      (
         this : access IHashAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sha384
      (
         this : access IHashAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sha512
      (
         this : access IHashAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IHashAlgorithmNamesStatics : aliased WinRt.IID := (1801323798, 56982, 20234, (141, 87, 220, 201, 218, 227, 108, 118 ));

   -----------------------------------------------------------------------------
   -- type IHashAlgorithmProvider is interface and WinRt.IInspectable;

      function get_AlgorithmName
      (
         this : access IHashAlgorithmProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_HashLength
      (
         this : access IHashAlgorithmProvider_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function HashData
      (
         this : access IHashAlgorithmProvider_Interface;
         data : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function CreateHash
      (
         this : access IHashAlgorithmProvider_Interface;
         RetVal : access Windows.Security.Cryptography.Core.IHashComputation
      )
      return WinRt.Hresult is abstract;

      IID_IHashAlgorithmProvider : aliased WinRt.IID := (3197841536, 45763, 16939, (188, 225, 236, 144, 239, 181, 215, 181 ));

   -----------------------------------------------------------------------------
   -- type IHashAlgorithmProviderStatics is interface and WinRt.IInspectable;

      function OpenAlgorithm
      (
         this : access IHashAlgorithmProviderStatics_Interface;
         algorithm : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.IHashAlgorithmProvider
      )
      return WinRt.Hresult is abstract;

      IID_IHashAlgorithmProviderStatics : aliased WinRt.IID := (2678888257, 23748, 17206, (174, 56, 98, 18, 183, 90, 145, 90 ));

   -----------------------------------------------------------------------------
   -- type IHashComputation is interface and WinRt.IInspectable;

      function Append
      (
         this : access IHashComputation_Interface;
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function GetValueAndReset
      (
         this : access IHashComputation_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      IID_IHashComputation : aliased WinRt.IID := (1493488054, 44337, 17923, (163, 164, 177, 189, 169, 142, 37, 98 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationAlgorithmNamesStatics is interface and WinRt.IInspectable;

      function get_Pbkdf2Md5
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Pbkdf2Sha1
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Pbkdf2Sha256
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Pbkdf2Sha384
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Pbkdf2Sha512
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp800108CtrHmacMd5
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp800108CtrHmacSha1
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp800108CtrHmacSha256
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp800108CtrHmacSha384
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp800108CtrHmacSha512
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp80056aConcatMd5
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp80056aConcatSha1
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp80056aConcatSha256
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp80056aConcatSha384
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Sp80056aConcatSha512
      (
         this : access IKeyDerivationAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationAlgorithmNamesStatics : aliased WinRt.IID := (2070820414, 38098, 18233, (165, 123, 2, 46, 12, 58, 64, 42 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationAlgorithmNamesStatics2 is interface and WinRt.IInspectable;

      function get_CapiKdfMd5
      (
         this : access IKeyDerivationAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_CapiKdfSha1
      (
         this : access IKeyDerivationAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_CapiKdfSha256
      (
         this : access IKeyDerivationAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_CapiKdfSha384
      (
         this : access IKeyDerivationAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_CapiKdfSha512
      (
         this : access IKeyDerivationAlgorithmNamesStatics2_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationAlgorithmNamesStatics2 : aliased WinRt.IID := (1469398955, 24644, 18031, (151, 244, 51, 123, 120, 8, 56, 77 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationAlgorithmProvider is interface and WinRt.IInspectable;

      function get_AlgorithmName
      (
         this : access IKeyDerivationAlgorithmProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function CreateKey
      (
         this : access IKeyDerivationAlgorithmProvider_Interface;
         keyMaterial : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationAlgorithmProvider : aliased WinRt.IID := (3791366203, 18033, 17335, (145, 88, 118, 58, 170, 152, 182, 191 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationAlgorithmProviderStatics is interface and WinRt.IInspectable;

      function OpenAlgorithm
      (
         this : access IKeyDerivationAlgorithmProviderStatics_Interface;
         algorithm : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.IKeyDerivationAlgorithmProvider
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationAlgorithmProviderStatics : aliased WinRt.IID := (170002810, 2588, 17467, (148, 24, 185, 73, 138, 235, 22, 3 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationParameters is interface and WinRt.IInspectable;

      function get_KdfGenericBinary
      (
         this : access IKeyDerivationParameters_Interface;
         RetVal : access Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function put_KdfGenericBinary
      (
         this : access IKeyDerivationParameters_Interface;
         value : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Hresult is abstract;

      function get_IterationCount
      (
         this : access IKeyDerivationParameters_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationParameters : aliased WinRt.IID := (2079349095, 1147, 19084, (150, 74, 70, 159, 253, 85, 34, 226 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationParameters2 is interface and WinRt.IInspectable;

      function get_Capi1KdfTargetAlgorithm
      (
         this : access IKeyDerivationParameters2_Interface;
         RetVal : access Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm
      )
      return WinRt.Hresult is abstract;

      function put_Capi1KdfTargetAlgorithm
      (
         this : access IKeyDerivationParameters2_Interface;
         value : Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationParameters2 : aliased WinRt.IID := (3443615441, 16766, 20300, (182, 102, 192, 216, 121, 243, 248, 224 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationParametersStatics is interface and WinRt.IInspectable;

      function BuildForPbkdf2
      (
         this : access IKeyDerivationParametersStatics_Interface;
         pbkdf2Salt : Windows.Storage.Streams.IBuffer;
         iterationCount : WinRt.UInt32;
         RetVal : access Windows.Security.Cryptography.Core.IKeyDerivationParameters
      )
      return WinRt.Hresult is abstract;

      function BuildForSP800108
      (
         this : access IKeyDerivationParametersStatics_Interface;
         label : Windows.Storage.Streams.IBuffer;
         context : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.IKeyDerivationParameters
      )
      return WinRt.Hresult is abstract;

      function BuildForSP80056a
      (
         this : access IKeyDerivationParametersStatics_Interface;
         algorithmId : Windows.Storage.Streams.IBuffer;
         partyUInfo : Windows.Storage.Streams.IBuffer;
         partyVInfo : Windows.Storage.Streams.IBuffer;
         suppPubInfo : Windows.Storage.Streams.IBuffer;
         suppPrivInfo : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.IKeyDerivationParameters
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationParametersStatics : aliased WinRt.IID := (3935707070, 62335, 16710, (157, 254, 164, 86, 241, 115, 95, 75 ));

   -----------------------------------------------------------------------------
   -- type IKeyDerivationParametersStatics2 is interface and WinRt.IInspectable;

      function BuildForCapi1Kdf
      (
         this : access IKeyDerivationParametersStatics2_Interface;
         capi1KdfTargetAlgorithm : Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm;
         RetVal : access Windows.Security.Cryptography.Core.IKeyDerivationParameters
      )
      return WinRt.Hresult is abstract;

      IID_IKeyDerivationParametersStatics2 : aliased WinRt.IID := (2776120789, 22755, 20219, (178, 131, 161, 101, 49, 38, 225, 190 ));

   -----------------------------------------------------------------------------
   -- type IMacAlgorithmNamesStatics is interface and WinRt.IInspectable;

      function get_HmacMd5
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_HmacSha1
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_HmacSha256
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_HmacSha384
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_HmacSha512
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesCmac
      (
         this : access IMacAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_IMacAlgorithmNamesStatics : aliased WinRt.IID := (1094788728, 64286, 17316, (137, 94, 169, 2, 110, 67, 144, 163 ));

   -----------------------------------------------------------------------------
   -- type IMacAlgorithmProvider is interface and WinRt.IInspectable;

      function get_AlgorithmName
      (
         this : access IMacAlgorithmProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_MacLength
      (
         this : access IMacAlgorithmProvider_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function CreateKey
      (
         this : access IMacAlgorithmProvider_Interface;
         keyMaterial : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_IMacAlgorithmProvider : aliased WinRt.IID := (1245693379, 7357, 16846, (160, 146, 170, 11, 197, 210, 210, 245 ));

   -----------------------------------------------------------------------------
   -- type IMacAlgorithmProvider2 is interface and WinRt.IInspectable;

      function CreateHash
      (
         this : access IMacAlgorithmProvider2_Interface;
         keyMaterial : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.IHashComputation
      )
      return WinRt.Hresult is abstract;

      IID_IMacAlgorithmProvider2 : aliased WinRt.IID := (1839409685, 55601, 17133, (142, 126, 195, 1, 202, 238, 17, 156 ));

   -----------------------------------------------------------------------------
   -- type IMacAlgorithmProviderStatics is interface and WinRt.IInspectable;

      function OpenAlgorithm
      (
         this : access IMacAlgorithmProviderStatics_Interface;
         algorithm : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.IMacAlgorithmProvider
      )
      return WinRt.Hresult is abstract;

      IID_IMacAlgorithmProviderStatics : aliased WinRt.IID := (3384656199, 52343, 19952, (158, 78, 185, 33, 224, 128, 100, 76 ));

   -----------------------------------------------------------------------------
   -- type IPersistedKeyProviderStatics is interface and WinRt.IInspectable;

      function OpenKeyPairFromCertificateAsync
      (
         this : access IPersistedKeyProviderStatics_Interface;
         certificate : Windows.Security.Cryptography.Certificates.ICertificate;
         hashAlgorithmName : WinRt.HString;
         padding : Windows.Security.Cryptography.Core.CryptographicPadding;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function OpenPublicKeyFromCertificate
      (
         this : access IPersistedKeyProviderStatics_Interface;
         certificate : Windows.Security.Cryptography.Certificates.ICertificate;
         hashAlgorithmName : WinRt.HString;
         padding : Windows.Security.Cryptography.Core.CryptographicPadding;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_IPersistedKeyProviderStatics : aliased WinRt.IID := (1999063060, 55764, 19701, (182, 104, 224, 69, 125, 243, 8, 148 ));

   -----------------------------------------------------------------------------
   -- type ISymmetricAlgorithmNamesStatics is interface and WinRt.IInspectable;

      function get_DesCbc
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DesEcb
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_TripleDesCbc
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_TripleDesEcb
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Rc2Cbc
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Rc2Ecb
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesCbc
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesEcb
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesGcm
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesCcm
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesCbcPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_AesEcbPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DesCbcPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_DesEcbPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_TripleDesCbcPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_TripleDesEcbPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Rc2CbcPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Rc2EcbPkcs7
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_Rc4
      (
         this : access ISymmetricAlgorithmNamesStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      IID_ISymmetricAlgorithmNamesStatics : aliased WinRt.IID := (1752199803, 51606, 20142, (132, 215, 121, 178, 174, 183, 59, 156 ));

   -----------------------------------------------------------------------------
   -- type ISymmetricKeyAlgorithmProvider is interface and WinRt.IInspectable;

      function get_AlgorithmName
      (
         this : access ISymmetricKeyAlgorithmProvider_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_BlockLength
      (
         this : access ISymmetricKeyAlgorithmProvider_Interface;
         RetVal : access WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      function CreateSymmetricKey
      (
         this : access ISymmetricKeyAlgorithmProvider_Interface;
         keyMaterial : Windows.Storage.Streams.IBuffer;
         RetVal : access Windows.Security.Cryptography.Core.ICryptographicKey
      )
      return WinRt.Hresult is abstract;

      IID_ISymmetricKeyAlgorithmProvider : aliased WinRt.IID := (1031686707, 15312, 18690, (138, 200, 71, 13, 80, 210, 19, 118 ));

   -----------------------------------------------------------------------------
   -- type ISymmetricKeyAlgorithmProviderStatics is interface and WinRt.IInspectable;

      function OpenAlgorithm
      (
         this : access ISymmetricKeyAlgorithmProviderStatics_Interface;
         algorithm : WinRt.HString;
         RetVal : access Windows.Security.Cryptography.Core.ISymmetricKeyAlgorithmProvider
      )
      return WinRt.Hresult is abstract;

      IID_ISymmetricKeyAlgorithmProviderStatics : aliased WinRt.IID := (2369463078, 7991, 18719, (182, 14, 245, 67, 27, 38, 180, 131 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package AsymmetricAlgorithmNames is

      function get_EcdsaSha256
      return WinRt.WString;

      function get_EcdsaSha384
      return WinRt.WString;

      function get_EcdsaSha512
      return WinRt.WString;

      function get_RsaPkcs1
      return WinRt.WString;

      function get_RsaOaepSha1
      return WinRt.WString;

      function get_RsaOaepSha256
      return WinRt.WString;

      function get_RsaOaepSha384
      return WinRt.WString;

      function get_RsaOaepSha512
      return WinRt.WString;

      function get_EcdsaP256Sha256
      return WinRt.WString;

      function get_EcdsaP384Sha384
      return WinRt.WString;

      function get_EcdsaP521Sha512
      return WinRt.WString;

      function get_DsaSha1
      return WinRt.WString;

      function get_DsaSha256
      return WinRt.WString;

      function get_RsaSignPkcs1Sha1
      return WinRt.WString;

      function get_RsaSignPkcs1Sha256
      return WinRt.WString;

      function get_RsaSignPkcs1Sha384
      return WinRt.WString;

      function get_RsaSignPkcs1Sha512
      return WinRt.WString;

      function get_RsaSignPssSha1
      return WinRt.WString;

      function get_RsaSignPssSha256
      return WinRt.WString;

      function get_RsaSignPssSha384
      return WinRt.WString;

      function get_RsaSignPssSha512
      return WinRt.WString;

   end AsymmetricAlgorithmNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AsymmetricKeyAlgorithmProvider

   overriding procedure Initialize (this : in out AsymmetricKeyAlgorithmProvider);
   overriding procedure Finalize (this : in out AsymmetricKeyAlgorithmProvider);

   -----------------------------------------------------------------------------
   -- Static Interfaces for AsymmetricKeyAlgorithmProvider

   function OpenAlgorithm
   (
      algorithm : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.AsymmetricKeyAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AsymmetricKeyAlgorithmProvider

   function get_AlgorithmName
   (
      this : in out AsymmetricKeyAlgorithmProvider
   )
   return WinRt.WString;

   function CreateKeyPair
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      keySize : WinRt.UInt32
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function ImportKeyPair
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      keyBlob : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function ImportKeyPair
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      keyBlob : Windows.Storage.Streams.IBuffer;
      BlobType : Windows.Security.Cryptography.Core.CryptographicPrivateKeyBlobType
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function ImportPublicKey
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      keyBlob : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function ImportPublicKey
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      keyBlob : Windows.Storage.Streams.IBuffer;
      BlobType : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function CreateKeyPairWithCurveName
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      curveName : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function CreateKeyPairWithCurveParameters
   (
      this : in out AsymmetricKeyAlgorithmProvider;
      parameters : WinRt.Byte_Array
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package CryptographicEngine is

      function SignHashedData
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function VerifySignatureWithHashInput
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         signature : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Boolean;

      function DecryptAsync
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function SignAsync
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function SignHashedDataAsync
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function Encrypt
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function Decrypt
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         iv : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function EncryptAndAuthenticate
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         nonce : Windows.Storage.Streams.IBuffer;
         authenticatedData : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData;

      function DecryptAndAuthenticate
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         nonce : Windows.Storage.Streams.IBuffer;
         authenticationTag : Windows.Storage.Streams.IBuffer;
         authenticatedData : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function Sign
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

      function VerifySignature
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         data : Windows.Storage.Streams.IBuffer;
         signature : Windows.Storage.Streams.IBuffer
      )
      return WinRt.Boolean;

      function DeriveKeyMaterial
      (
         key : Windows.Security.Cryptography.Core.CryptographicKey'Class;
         parameters : Windows.Security.Cryptography.Core.KeyDerivationParameters'Class;
         desiredKeySize : WinRt.UInt32
      )
      return WinRt.Windows.Storage.Streams.IBuffer;

   end CryptographicEngine;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CryptographicHash

   overriding procedure Initialize (this : in out CryptographicHash);
   overriding procedure Finalize (this : in out CryptographicHash);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CryptographicHash

   procedure Append
   (
      this : in out CryptographicHash;
      data : Windows.Storage.Streams.IBuffer
   );

   function GetValueAndReset
   (
      this : in out CryptographicHash
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CryptographicKey

   overriding procedure Initialize (this : in out CryptographicKey);
   overriding procedure Finalize (this : in out CryptographicKey);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CryptographicKey

   function get_KeySize
   (
      this : in out CryptographicKey
   )
   return WinRt.UInt32;

   function Export
   (
      this : in out CryptographicKey
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   function Export
   (
      this : in out CryptographicKey;
      BlobType : Windows.Security.Cryptography.Core.CryptographicPrivateKeyBlobType
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   function ExportPublicKey
   (
      this : in out CryptographicKey
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   function ExportPublicKey
   (
      this : in out CryptographicKey;
      BlobType : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package EccCurveNames is

      function get_BrainpoolP160r1
      return WinRt.WString;

      function get_BrainpoolP160t1
      return WinRt.WString;

      function get_BrainpoolP192r1
      return WinRt.WString;

      function get_BrainpoolP192t1
      return WinRt.WString;

      function get_BrainpoolP224r1
      return WinRt.WString;

      function get_BrainpoolP224t1
      return WinRt.WString;

      function get_BrainpoolP256r1
      return WinRt.WString;

      function get_BrainpoolP256t1
      return WinRt.WString;

      function get_BrainpoolP320r1
      return WinRt.WString;

      function get_BrainpoolP320t1
      return WinRt.WString;

      function get_BrainpoolP384r1
      return WinRt.WString;

      function get_BrainpoolP384t1
      return WinRt.WString;

      function get_BrainpoolP512r1
      return WinRt.WString;

      function get_BrainpoolP512t1
      return WinRt.WString;

      function get_Curve25519
      return WinRt.WString;

      function get_Ec192wapi
      return WinRt.WString;

      function get_NistP192
      return WinRt.WString;

      function get_NistP224
      return WinRt.WString;

      function get_NistP256
      return WinRt.WString;

      function get_NistP384
      return WinRt.WString;

      function get_NistP521
      return WinRt.WString;

      function get_NumsP256t1
      return WinRt.WString;

      function get_NumsP384t1
      return WinRt.WString;

      function get_NumsP512t1
      return WinRt.WString;

      function get_SecP160k1
      return WinRt.WString;

      function get_SecP160r1
      return WinRt.WString;

      function get_SecP160r2
      return WinRt.WString;

      function get_SecP192k1
      return WinRt.WString;

      function get_SecP192r1
      return WinRt.WString;

      function get_SecP224k1
      return WinRt.WString;

      function get_SecP224r1
      return WinRt.WString;

      function get_SecP256k1
      return WinRt.WString;

      function get_SecP256r1
      return WinRt.WString;

      function get_SecP384r1
      return WinRt.WString;

      function get_SecP521r1
      return WinRt.WString;

      function get_Wtls7
      return WinRt.WString;

      function get_Wtls9
      return WinRt.WString;

      function get_Wtls12
      return WinRt.WString;

      function get_X962P192v1
      return WinRt.WString;

      function get_X962P192v2
      return WinRt.WString;

      function get_X962P192v3
      return WinRt.WString;

      function get_X962P239v1
      return WinRt.WString;

      function get_X962P239v2
      return WinRt.WString;

      function get_X962P239v3
      return WinRt.WString;

      function get_X962P256v1
      return WinRt.WString;

      function get_AllEccCurveNames
      return WinRt.GenericObject;

   end EccCurveNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EncryptedAndAuthenticatedData

   overriding procedure Initialize (this : in out EncryptedAndAuthenticatedData);
   overriding procedure Finalize (this : in out EncryptedAndAuthenticatedData);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EncryptedAndAuthenticatedData

   function get_EncryptedData
   (
      this : in out EncryptedAndAuthenticatedData
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   function get_AuthenticationTag
   (
      this : in out EncryptedAndAuthenticatedData
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package HashAlgorithmNames is

      function get_Md5
      return WinRt.WString;

      function get_Sha1
      return WinRt.WString;

      function get_Sha256
      return WinRt.WString;

      function get_Sha384
      return WinRt.WString;

      function get_Sha512
      return WinRt.WString;

   end HashAlgorithmNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HashAlgorithmProvider

   overriding procedure Initialize (this : in out HashAlgorithmProvider);
   overriding procedure Finalize (this : in out HashAlgorithmProvider);

   -----------------------------------------------------------------------------
   -- Static Interfaces for HashAlgorithmProvider

   function OpenAlgorithm
   (
      algorithm : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.HashAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HashAlgorithmProvider

   function get_AlgorithmName
   (
      this : in out HashAlgorithmProvider
   )
   return WinRt.WString;

   function get_HashLength
   (
      this : in out HashAlgorithmProvider
   )
   return WinRt.UInt32;

   function HashData
   (
      this : in out HashAlgorithmProvider;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   function CreateHash
   (
      this : in out HashAlgorithmProvider
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicHash'Class;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package KeyDerivationAlgorithmNames is

      function get_CapiKdfMd5
      return WinRt.WString;

      function get_CapiKdfSha1
      return WinRt.WString;

      function get_CapiKdfSha256
      return WinRt.WString;

      function get_CapiKdfSha384
      return WinRt.WString;

      function get_CapiKdfSha512
      return WinRt.WString;

      function get_Pbkdf2Md5
      return WinRt.WString;

      function get_Pbkdf2Sha1
      return WinRt.WString;

      function get_Pbkdf2Sha256
      return WinRt.WString;

      function get_Pbkdf2Sha384
      return WinRt.WString;

      function get_Pbkdf2Sha512
      return WinRt.WString;

      function get_Sp800108CtrHmacMd5
      return WinRt.WString;

      function get_Sp800108CtrHmacSha1
      return WinRt.WString;

      function get_Sp800108CtrHmacSha256
      return WinRt.WString;

      function get_Sp800108CtrHmacSha384
      return WinRt.WString;

      function get_Sp800108CtrHmacSha512
      return WinRt.WString;

      function get_Sp80056aConcatMd5
      return WinRt.WString;

      function get_Sp80056aConcatSha1
      return WinRt.WString;

      function get_Sp80056aConcatSha256
      return WinRt.WString;

      function get_Sp80056aConcatSha384
      return WinRt.WString;

      function get_Sp80056aConcatSha512
      return WinRt.WString;

   end KeyDerivationAlgorithmNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyDerivationAlgorithmProvider

   overriding procedure Initialize (this : in out KeyDerivationAlgorithmProvider);
   overriding procedure Finalize (this : in out KeyDerivationAlgorithmProvider);

   -----------------------------------------------------------------------------
   -- Static Interfaces for KeyDerivationAlgorithmProvider

   function OpenAlgorithm
   (
      algorithm : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.KeyDerivationAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyDerivationAlgorithmProvider

   function get_AlgorithmName
   (
      this : in out KeyDerivationAlgorithmProvider
   )
   return WinRt.WString;

   function CreateKey
   (
      this : in out KeyDerivationAlgorithmProvider;
      keyMaterial : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for KeyDerivationParameters

   overriding procedure Initialize (this : in out KeyDerivationParameters);
   overriding procedure Finalize (this : in out KeyDerivationParameters);

   -----------------------------------------------------------------------------
   -- Static Interfaces for KeyDerivationParameters

   function BuildForCapi1Kdf
   (
      capi1KdfTargetAlgorithm : Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm
   )
   return WinRt.Windows.Security.Cryptography.Core.KeyDerivationParameters;

   function BuildForPbkdf2
   (
      pbkdf2Salt : Windows.Storage.Streams.IBuffer;
      iterationCount : WinRt.UInt32
   )
   return WinRt.Windows.Security.Cryptography.Core.KeyDerivationParameters;

   function BuildForSP800108
   (
      label : Windows.Storage.Streams.IBuffer;
      context : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.KeyDerivationParameters;

   function BuildForSP80056a
   (
      algorithmId : Windows.Storage.Streams.IBuffer;
      partyUInfo : Windows.Storage.Streams.IBuffer;
      partyVInfo : Windows.Storage.Streams.IBuffer;
      suppPubInfo : Windows.Storage.Streams.IBuffer;
      suppPrivInfo : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.KeyDerivationParameters;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for KeyDerivationParameters

   function get_KdfGenericBinary
   (
      this : in out KeyDerivationParameters
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   procedure put_KdfGenericBinary
   (
      this : in out KeyDerivationParameters;
      value : Windows.Storage.Streams.IBuffer
   );

   function get_IterationCount
   (
      this : in out KeyDerivationParameters
   )
   return WinRt.UInt32;

   function get_Capi1KdfTargetAlgorithm
   (
      this : in out KeyDerivationParameters
   )
   return WinRt.Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm;

   procedure put_Capi1KdfTargetAlgorithm
   (
      this : in out KeyDerivationParameters;
      value : Windows.Security.Cryptography.Core.Capi1KdfTargetAlgorithm
   );

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package MacAlgorithmNames is

      function get_HmacMd5
      return WinRt.WString;

      function get_HmacSha1
      return WinRt.WString;

      function get_HmacSha256
      return WinRt.WString;

      function get_HmacSha384
      return WinRt.WString;

      function get_HmacSha512
      return WinRt.WString;

      function get_AesCmac
      return WinRt.WString;

   end MacAlgorithmNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MacAlgorithmProvider

   overriding procedure Initialize (this : in out MacAlgorithmProvider);
   overriding procedure Finalize (this : in out MacAlgorithmProvider);

   -----------------------------------------------------------------------------
   -- Static Interfaces for MacAlgorithmProvider

   function OpenAlgorithm
   (
      algorithm : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.MacAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MacAlgorithmProvider

   function get_AlgorithmName
   (
      this : in out MacAlgorithmProvider
   )
   return WinRt.WString;

   function get_MacLength
   (
      this : in out MacAlgorithmProvider
   )
   return WinRt.UInt32;

   function CreateKey
   (
      this : in out MacAlgorithmProvider;
      keyMaterial : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

   function CreateHash
   (
      this : in out MacAlgorithmProvider;
      keyMaterial : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicHash'Class;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package PersistedKeyProvider is

      function OpenKeyPairFromCertificateAsync
      (
         certificate : Windows.Security.Cryptography.Certificates.Certificate'Class;
         hashAlgorithmName : WinRt.WString;
         padding : Windows.Security.Cryptography.Core.CryptographicPadding
      )
      return WinRt.Windows.Security.Cryptography.Core.CryptographicKey;

      function OpenPublicKeyFromCertificate
      (
         certificate : Windows.Security.Cryptography.Certificates.Certificate'Class;
         hashAlgorithmName : WinRt.WString;
         padding : Windows.Security.Cryptography.Core.CryptographicPadding
      )
      return WinRt.Windows.Security.Cryptography.Core.CryptographicKey;

   end PersistedKeyProvider;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package SymmetricAlgorithmNames is

      function get_DesCbc
      return WinRt.WString;

      function get_DesEcb
      return WinRt.WString;

      function get_TripleDesCbc
      return WinRt.WString;

      function get_TripleDesEcb
      return WinRt.WString;

      function get_Rc2Cbc
      return WinRt.WString;

      function get_Rc2Ecb
      return WinRt.WString;

      function get_AesCbc
      return WinRt.WString;

      function get_AesEcb
      return WinRt.WString;

      function get_AesGcm
      return WinRt.WString;

      function get_AesCcm
      return WinRt.WString;

      function get_AesCbcPkcs7
      return WinRt.WString;

      function get_AesEcbPkcs7
      return WinRt.WString;

      function get_DesCbcPkcs7
      return WinRt.WString;

      function get_DesEcbPkcs7
      return WinRt.WString;

      function get_TripleDesCbcPkcs7
      return WinRt.WString;

      function get_TripleDesEcbPkcs7
      return WinRt.WString;

      function get_Rc2CbcPkcs7
      return WinRt.WString;

      function get_Rc2EcbPkcs7
      return WinRt.WString;

      function get_Rc4
      return WinRt.WString;

   end SymmetricAlgorithmNames;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SymmetricKeyAlgorithmProvider

   overriding procedure Initialize (this : in out SymmetricKeyAlgorithmProvider);
   overriding procedure Finalize (this : in out SymmetricKeyAlgorithmProvider);

   -----------------------------------------------------------------------------
   -- Static Interfaces for SymmetricKeyAlgorithmProvider

   function OpenAlgorithm
   (
      algorithm : WinRt.WString
   )
   return WinRt.Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SymmetricKeyAlgorithmProvider

   function get_AlgorithmName
   (
      this : in out SymmetricKeyAlgorithmProvider
   )
   return WinRt.WString;

   function get_BlockLength
   (
      this : in out SymmetricKeyAlgorithmProvider
   )
   return WinRt.UInt32;

   function CreateSymmetricKey
   (
      this : in out SymmetricKeyAlgorithmProvider;
      keyMaterial : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicKey'Class;

end;

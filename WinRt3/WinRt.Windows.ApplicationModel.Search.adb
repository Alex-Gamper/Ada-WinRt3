--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Search is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocalContentSuggestionSettings

   procedure Initialize (this : in out LocalContentSuggestionSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocalContentSuggestionSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocalContentSuggestionSettings, ILocalContentSuggestionSettings_Ptr);
   begin
      if this.m_ILocalContentSuggestionSettings /= null then
         if this.m_ILocalContentSuggestionSettings.all /= null then
            RefCount := this.m_ILocalContentSuggestionSettings.all.Release;
            Free (this.m_ILocalContentSuggestionSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LocalContentSuggestionSettings

   function Constructor return LocalContentSuggestionSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Search.LocalContentSuggestionSettings");
      m_ComRetVal  : aliased Windows.ApplicationModel.Search.ILocalContentSuggestionSettings;
   begin
      return RetVal : LocalContentSuggestionSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ILocalContentSuggestionSettings := new Windows.ApplicationModel.Search.ILocalContentSuggestionSettings;
            Retval.m_ILocalContentSuggestionSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocalContentSuggestionSettings

   procedure put_Enabled
   (
      this : in out LocalContentSuggestionSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.put_Enabled (value);
   end;

   function get_Enabled
   (
      this : in out LocalContentSuggestionSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.get_Enabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Locations
   (
      this : in out LocalContentSuggestionSettings
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.get_Locations (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AqsFilter
   (
      this : in out LocalContentSuggestionSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.put_AqsFilter (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AqsFilter
   (
      this : in out LocalContentSuggestionSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.get_AqsFilter (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PropertiesToMatch
   (
      this : in out LocalContentSuggestionSettings
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ILocalContentSuggestionSettings.all.get_PropertiesToMatch (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPane

   procedure Initialize (this : in out SearchPane) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPane) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPane, ISearchPane_Ptr);
   begin
      if this.m_ISearchPane /= null then
         if this.m_ISearchPane.all /= null then
            RefCount := this.m_ISearchPane.all.Release;
            Free (this.m_ISearchPane);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SearchPane

   procedure HideThisApplication is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Search.SearchPane");
      m_Factory        : access WinRt.Windows.ApplicationModel.Search.ISearchPaneStaticsWithHideThisApplication_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISearchPaneStaticsWithHideThisApplication'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.HideThisApplication;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.Search.SearchPane is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Search.SearchPane");
      m_Factory        : access WinRt.Windows.ApplicationModel.Search.ISearchPaneStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPane;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPane do
         Hr := RoGetActivationFactory (m_hString, IID_ISearchPaneStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ISearchPane := new Windows.ApplicationModel.Search.ISearchPane;
            Retval.m_ISearchPane.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPane

   procedure put_SearchHistoryEnabled
   (
      this : in out SearchPane;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.put_SearchHistoryEnabled (value);
   end;

   function get_SearchHistoryEnabled
   (
      this : in out SearchPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchPane.all.get_SearchHistoryEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SearchHistoryContext
   (
      this : in out SearchPane;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISearchPane.all.put_SearchHistoryContext (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SearchHistoryContext
   (
      this : in out SearchPane
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPane.all.get_SearchHistoryContext (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PlaceholderText
   (
      this : in out SearchPane;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISearchPane.all.put_PlaceholderText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PlaceholderText
   (
      this : in out SearchPane
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPane.all.get_PlaceholderText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_QueryText
   (
      this : in out SearchPane
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPane.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchPane
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPane.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Visible
   (
      this : in out SearchPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchPane.all.get_Visible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_VisibilityChanged
   (
      this : in out SearchPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchPane.all.add_VisibilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VisibilityChanged
   (
      this : in out SearchPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.remove_VisibilityChanged (token);
   end;

   function add_QueryChanged
   (
      this : in out SearchPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchPane.all.add_QueryChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_QueryChanged
   (
      this : in out SearchPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.remove_QueryChanged (token);
   end;

   function add_SuggestionsRequested
   (
      this : in out SearchPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchPane.all.add_SuggestionsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SuggestionsRequested
   (
      this : in out SearchPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.remove_SuggestionsRequested (token);
   end;

   function add_QuerySubmitted
   (
      this : in out SearchPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchPane.all.add_QuerySubmitted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_QuerySubmitted
   (
      this : in out SearchPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.remove_QuerySubmitted (token);
   end;

   function add_ResultSuggestionChosen
   (
      this : in out SearchPane;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISearchPane.all.add_ResultSuggestionChosen (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ResultSuggestionChosen
   (
      this : in out SearchPane;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.remove_ResultSuggestionChosen (token);
   end;

   procedure SetLocalContentSuggestionSettings
   (
      this : in out SearchPane;
      settings : Windows.ApplicationModel.Search.LocalContentSuggestionSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.SetLocalContentSuggestionSettings (settings.m_ILocalContentSuggestionSettings.all);
   end;

   procedure Show
   (
      this : in out SearchPane
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.Show;
   end;

   procedure Show
   (
      this : in out SearchPane;
      query : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_query : WinRt.HString := To_HString (query);
   begin
      Hr := this.m_ISearchPane.all.Show (HStr_query);
      Hr := WindowsDeleteString (HStr_query);
   end;

   procedure put_ShowOnKeyboardInput
   (
      this : in out SearchPane;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPane.all.put_ShowOnKeyboardInput (value);
   end;

   function get_ShowOnKeyboardInput
   (
      this : in out SearchPane
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchPane.all.get_ShowOnKeyboardInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TrySetQueryText
   (
      this : in out SearchPane;
      query : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_query : WinRt.HString := To_HString (query);
   begin
      Hr := this.m_ISearchPane.all.TrySetQueryText (HStr_query, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_query);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneQueryChangedEventArgs

   procedure Initialize (this : in out SearchPaneQueryChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneQueryChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneQueryChangedEventArgs, ISearchPaneQueryChangedEventArgs_Ptr);
   begin
      if this.m_ISearchPaneQueryChangedEventArgs /= null then
         if this.m_ISearchPaneQueryChangedEventArgs.all /= null then
            RefCount := this.m_ISearchPaneQueryChangedEventArgs.all.Release;
            Free (this.m_ISearchPaneQueryChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneQueryChangedEventArgs

   function get_QueryText
   (
      this : in out SearchPaneQueryChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPaneQueryChangedEventArgs.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchPaneQueryChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPaneQueryChangedEventArgs.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LinguisticDetails
   (
      this : in out SearchPaneQueryChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails do
         Hr := this.m_ISearchPaneQueryChangedEventArgs.all.get_LinguisticDetails (m_ComRetVal'Access);
         Retval.m_ISearchPaneQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
         Retval.m_ISearchPaneQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneQueryLinguisticDetails

   procedure Initialize (this : in out SearchPaneQueryLinguisticDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneQueryLinguisticDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneQueryLinguisticDetails, ISearchPaneQueryLinguisticDetails_Ptr);
   begin
      if this.m_ISearchPaneQueryLinguisticDetails /= null then
         if this.m_ISearchPaneQueryLinguisticDetails.all /= null then
            RefCount := this.m_ISearchPaneQueryLinguisticDetails.all.Release;
            Free (this.m_ISearchPaneQueryLinguisticDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneQueryLinguisticDetails

   function get_QueryTextAlternatives
   (
      this : in out SearchPaneQueryLinguisticDetails
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ISearchPaneQueryLinguisticDetails.all.get_QueryTextAlternatives (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_QueryTextCompositionStart
   (
      this : in out SearchPaneQueryLinguisticDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISearchPaneQueryLinguisticDetails.all.get_QueryTextCompositionStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_QueryTextCompositionLength
   (
      this : in out SearchPaneQueryLinguisticDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISearchPaneQueryLinguisticDetails.all.get_QueryTextCompositionLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneQuerySubmittedEventArgs

   procedure Initialize (this : in out SearchPaneQuerySubmittedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneQuerySubmittedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneQuerySubmittedEventArgs, ISearchPaneQuerySubmittedEventArgs_Ptr);
   begin
      if this.m_ISearchPaneQuerySubmittedEventArgs /= null then
         if this.m_ISearchPaneQuerySubmittedEventArgs.all /= null then
            RefCount := this.m_ISearchPaneQuerySubmittedEventArgs.all.Release;
            Free (this.m_ISearchPaneQuerySubmittedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneQuerySubmittedEventArgs

   function get_QueryText
   (
      this : in out SearchPaneQuerySubmittedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPaneQuerySubmittedEventArgs.all.get_QueryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchPaneQuerySubmittedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPaneQuerySubmittedEventArgs.all.get_Language (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LinguisticDetails
   (
      this : in out SearchPaneQuerySubmittedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Search.ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Search.ISearchPaneQuerySubmittedEventArgs_Interface, WinRt.Windows.ApplicationModel.Search.ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails, WinRt.Windows.ApplicationModel.Search.IID_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails do
         m_Interface := QInterface (this.m_ISearchPaneQuerySubmittedEventArgs.all);
         Hr := m_Interface.get_LinguisticDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISearchPaneQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
         Retval.m_ISearchPaneQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneResultSuggestionChosenEventArgs

   procedure Initialize (this : in out SearchPaneResultSuggestionChosenEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneResultSuggestionChosenEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneResultSuggestionChosenEventArgs, ISearchPaneResultSuggestionChosenEventArgs_Ptr);
   begin
      if this.m_ISearchPaneResultSuggestionChosenEventArgs /= null then
         if this.m_ISearchPaneResultSuggestionChosenEventArgs.all /= null then
            RefCount := this.m_ISearchPaneResultSuggestionChosenEventArgs.all.Release;
            Free (this.m_ISearchPaneResultSuggestionChosenEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneResultSuggestionChosenEventArgs

   function get_Tag
   (
      this : in out SearchPaneResultSuggestionChosenEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISearchPaneResultSuggestionChosenEventArgs.all.get_Tag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneSuggestionsRequest

   procedure Initialize (this : in out SearchPaneSuggestionsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneSuggestionsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneSuggestionsRequest, ISearchPaneSuggestionsRequest_Ptr);
   begin
      if this.m_ISearchPaneSuggestionsRequest /= null then
         if this.m_ISearchPaneSuggestionsRequest.all /= null then
            RefCount := this.m_ISearchPaneSuggestionsRequest.all.Release;
            Free (this.m_ISearchPaneSuggestionsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneSuggestionsRequest

   function get_IsCanceled
   (
      this : in out SearchPaneSuggestionsRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchPaneSuggestionsRequest.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SearchSuggestionCollection
   (
      this : in out SearchPaneSuggestionsRequest
   )
   return WinRt.Windows.ApplicationModel.Search.SearchSuggestionCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchSuggestionCollection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchSuggestionCollection do
         Hr := this.m_ISearchPaneSuggestionsRequest.all.get_SearchSuggestionCollection (m_ComRetVal'Access);
         Retval.m_ISearchSuggestionCollection := new Windows.ApplicationModel.Search.ISearchSuggestionCollection;
         Retval.m_ISearchSuggestionCollection.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out SearchPaneSuggestionsRequest
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequestDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestDeferral do
         Hr := this.m_ISearchPaneSuggestionsRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ISearchPaneSuggestionsRequestDeferral := new Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequestDeferral;
         Retval.m_ISearchPaneSuggestionsRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneSuggestionsRequestDeferral

   procedure Initialize (this : in out SearchPaneSuggestionsRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneSuggestionsRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneSuggestionsRequestDeferral, ISearchPaneSuggestionsRequestDeferral_Ptr);
   begin
      if this.m_ISearchPaneSuggestionsRequestDeferral /= null then
         if this.m_ISearchPaneSuggestionsRequestDeferral.all /= null then
            RefCount := this.m_ISearchPaneSuggestionsRequestDeferral.all.Release;
            Free (this.m_ISearchPaneSuggestionsRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneSuggestionsRequestDeferral

   procedure Complete
   (
      this : in out SearchPaneSuggestionsRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchPaneSuggestionsRequestDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneSuggestionsRequestedEventArgs

   procedure Initialize (this : in out SearchPaneSuggestionsRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneSuggestionsRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneSuggestionsRequestedEventArgs, ISearchPaneSuggestionsRequestedEventArgs_Ptr);
   begin
      if this.m_ISearchPaneSuggestionsRequestedEventArgs /= null then
         if this.m_ISearchPaneSuggestionsRequestedEventArgs.all /= null then
            RefCount := this.m_ISearchPaneSuggestionsRequestedEventArgs.all.Release;
            Free (this.m_ISearchPaneSuggestionsRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneSuggestionsRequestedEventArgs

   function get_Request
   (
      this : in out SearchPaneSuggestionsRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneSuggestionsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneSuggestionsRequest do
         Hr := this.m_ISearchPaneSuggestionsRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_ISearchPaneSuggestionsRequest := new Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequest;
         Retval.m_ISearchPaneSuggestionsRequest.all := m_ComRetVal;
      end return;
   end;

   function get_QueryText
   (
      this : in out SearchPaneSuggestionsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequestedEventArgs_Interface, WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs, WinRt.Windows.ApplicationModel.Search.IID_ISearchPaneQueryChangedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchPaneSuggestionsRequestedEventArgs.all);
      Hr := m_Interface.get_QueryText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Language
   (
      this : in out SearchPaneSuggestionsRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequestedEventArgs_Interface, WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs, WinRt.Windows.ApplicationModel.Search.IID_ISearchPaneQueryChangedEventArgs'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISearchPaneSuggestionsRequestedEventArgs.all);
      Hr := m_Interface.get_Language (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LinguisticDetails
   (
      this : in out SearchPaneSuggestionsRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Search.ISearchPaneSuggestionsRequestedEventArgs_Interface, WinRt.Windows.ApplicationModel.Search.ISearchPaneQueryChangedEventArgs, WinRt.Windows.ApplicationModel.Search.IID_ISearchPaneQueryChangedEventArgs'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails do
         m_Interface := QInterface (this.m_ISearchPaneSuggestionsRequestedEventArgs.all);
         Hr := m_Interface.get_LinguisticDetails (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISearchPaneQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchPaneQueryLinguisticDetails;
         Retval.m_ISearchPaneQueryLinguisticDetails.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchPaneVisibilityChangedEventArgs

   procedure Initialize (this : in out SearchPaneVisibilityChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchPaneVisibilityChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchPaneVisibilityChangedEventArgs, ISearchPaneVisibilityChangedEventArgs_Ptr);
   begin
      if this.m_ISearchPaneVisibilityChangedEventArgs /= null then
         if this.m_ISearchPaneVisibilityChangedEventArgs.all /= null then
            RefCount := this.m_ISearchPaneVisibilityChangedEventArgs.all.Release;
            Free (this.m_ISearchPaneVisibilityChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchPaneVisibilityChangedEventArgs

   function get_Visible
   (
      this : in out SearchPaneVisibilityChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchPaneVisibilityChangedEventArgs.all.get_Visible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchQueryLinguisticDetails

   procedure Initialize (this : in out SearchQueryLinguisticDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchQueryLinguisticDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchQueryLinguisticDetails, ISearchQueryLinguisticDetails_Ptr);
   begin
      if this.m_ISearchQueryLinguisticDetails /= null then
         if this.m_ISearchQueryLinguisticDetails.all /= null then
            RefCount := this.m_ISearchQueryLinguisticDetails.all.Release;
            Free (this.m_ISearchQueryLinguisticDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SearchQueryLinguisticDetails

   function Constructor
   (
      queryTextAlternatives : GenericObject;
      queryTextCompositionStart : WinRt.UInt32;
      queryTextCompositionLength : WinRt.UInt32
   )
   return SearchQueryLinguisticDetails is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Search.SearchQueryLinguisticDetails");
      m_Factory    : access ISearchQueryLinguisticDetailsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Search.ISearchQueryLinguisticDetails;
   begin
      return RetVal : SearchQueryLinguisticDetails do
         Hr := RoGetActivationFactory (m_hString, IID_ISearchQueryLinguisticDetailsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (queryTextAlternatives, queryTextCompositionStart, queryTextCompositionLength, m_ComRetVal'Access);
            Retval.m_ISearchQueryLinguisticDetails := new Windows.ApplicationModel.Search.ISearchQueryLinguisticDetails;
            Retval.m_ISearchQueryLinguisticDetails.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchQueryLinguisticDetails

   function get_QueryTextAlternatives
   (
      this : in out SearchQueryLinguisticDetails
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ISearchQueryLinguisticDetails.all.get_QueryTextAlternatives (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_QueryTextCompositionStart
   (
      this : in out SearchQueryLinguisticDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISearchQueryLinguisticDetails.all.get_QueryTextCompositionStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_QueryTextCompositionLength
   (
      this : in out SearchQueryLinguisticDetails
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISearchQueryLinguisticDetails.all.get_QueryTextCompositionLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestionCollection

   procedure Initialize (this : in out SearchSuggestionCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestionCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestionCollection, ISearchSuggestionCollection_Ptr);
   begin
      if this.m_ISearchSuggestionCollection /= null then
         if this.m_ISearchSuggestionCollection.all /= null then
            RefCount := this.m_ISearchSuggestionCollection.all.Release;
            Free (this.m_ISearchSuggestionCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestionCollection

   function get_Size
   (
      this : in out SearchSuggestionCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISearchSuggestionCollection.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AppendQuerySuggestion
   (
      this : in out SearchSuggestionCollection;
      text : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
   begin
      Hr := this.m_ISearchSuggestionCollection.all.AppendQuerySuggestion (HStr_text);
      Hr := WindowsDeleteString (HStr_text);
   end;

   procedure AppendQuerySuggestions
   (
      this : in out SearchSuggestionCollection;
      suggestions : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionCollection.all.AppendQuerySuggestions (suggestions);
   end;

   procedure AppendResultSuggestion
   (
      this : in out SearchSuggestionCollection;
      text : WinRt.WString;
      detailText : WinRt.WString;
      tag : WinRt.WString;
      image : Windows.Storage.Streams.IRandomAccessStreamReference;
      imageAlternateText : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_text : WinRt.HString := To_HString (text);
      HStr_detailText : WinRt.HString := To_HString (detailText);
      HStr_tag : WinRt.HString := To_HString (tag);
      HStr_imageAlternateText : WinRt.HString := To_HString (imageAlternateText);
   begin
      Hr := this.m_ISearchSuggestionCollection.all.AppendResultSuggestion (HStr_text, HStr_detailText, HStr_tag, image, HStr_imageAlternateText);
      Hr := WindowsDeleteString (HStr_text);
      Hr := WindowsDeleteString (HStr_detailText);
      Hr := WindowsDeleteString (HStr_tag);
      Hr := WindowsDeleteString (HStr_imageAlternateText);
   end;

   procedure AppendSearchSeparator
   (
      this : in out SearchSuggestionCollection;
      label : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      Hr := this.m_ISearchSuggestionCollection.all.AppendSearchSeparator (HStr_label);
      Hr := WindowsDeleteString (HStr_label);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestionsRequest

   procedure Initialize (this : in out SearchSuggestionsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestionsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestionsRequest, ISearchSuggestionsRequest_Ptr);
   begin
      if this.m_ISearchSuggestionsRequest /= null then
         if this.m_ISearchSuggestionsRequest.all /= null then
            RefCount := this.m_ISearchSuggestionsRequest.all.Release;
            Free (this.m_ISearchSuggestionsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestionsRequest

   function get_IsCanceled
   (
      this : in out SearchSuggestionsRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISearchSuggestionsRequest.all.get_IsCanceled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SearchSuggestionCollection
   (
      this : in out SearchSuggestionsRequest
   )
   return WinRt.Windows.ApplicationModel.Search.SearchSuggestionCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchSuggestionCollection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchSuggestionCollection do
         Hr := this.m_ISearchSuggestionsRequest.all.get_SearchSuggestionCollection (m_ComRetVal'Access);
         Retval.m_ISearchSuggestionCollection := new Windows.ApplicationModel.Search.ISearchSuggestionCollection;
         Retval.m_ISearchSuggestionCollection.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out SearchSuggestionsRequest
   )
   return WinRt.Windows.ApplicationModel.Search.SearchSuggestionsRequestDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Search.ISearchSuggestionsRequestDeferral;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Search.SearchSuggestionsRequestDeferral do
         Hr := this.m_ISearchSuggestionsRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ISearchSuggestionsRequestDeferral := new Windows.ApplicationModel.Search.ISearchSuggestionsRequestDeferral;
         Retval.m_ISearchSuggestionsRequestDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SearchSuggestionsRequestDeferral

   procedure Initialize (this : in out SearchSuggestionsRequestDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out SearchSuggestionsRequestDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISearchSuggestionsRequestDeferral, ISearchSuggestionsRequestDeferral_Ptr);
   begin
      if this.m_ISearchSuggestionsRequestDeferral /= null then
         if this.m_ISearchSuggestionsRequestDeferral.all /= null then
            RefCount := this.m_ISearchSuggestionsRequestDeferral.all.Release;
            Free (this.m_ISearchSuggestionsRequestDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SearchSuggestionsRequestDeferral

   procedure Complete
   (
      this : in out SearchSuggestionsRequestDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISearchSuggestionsRequestDeferral.all.Complete;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Globalization is

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ApplicationLanguages is

      function GetLanguagesForUser
      (
         user : Windows.System.User'Class
      )
      return IVectorView_HString.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ApplicationLanguages");
         m_Factory        : access WinRt.Windows.Globalization.IApplicationLanguagesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_HString.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationLanguagesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetLanguagesForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_PrimaryLanguageOverride
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ApplicationLanguages");
         m_Factory        : access WinRt.Windows.Globalization.IApplicationLanguagesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationLanguagesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PrimaryLanguageOverride (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      procedure put_PrimaryLanguageOverride
      (
         value : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ApplicationLanguages");
         m_Factory        : access WinRt.Windows.Globalization.IApplicationLanguagesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_value : WinRt.HString := To_HString (value);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationLanguagesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.put_PrimaryLanguageOverride (HStr_value);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end;

      function get_Languages
      return IVectorView_HString.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ApplicationLanguages");
         m_Factory        : access WinRt.Windows.Globalization.IApplicationLanguagesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_HString.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationLanguagesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Languages (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

      function get_ManifestLanguages
      return IVectorView_HString.Kind is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ApplicationLanguages");
         m_Factory        : access WinRt.Windows.Globalization.IApplicationLanguagesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         m_GenericRetval  : aliased IVectorView_HString.Kind;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IApplicationLanguagesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ManifestLanguages (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         return m_GenericRetVal;
      end;

   end ApplicationLanguages;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Calendar

   procedure Initialize (this : in out Calendar) is
   begin
      null;
   end;

   procedure Finalize (this : in out Calendar) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICalendar, ICalendar_Ptr);
   begin
      if this.m_ICalendar /= null then
         if this.m_ICalendar.all /= null then
            RefCount := this.m_ICalendar.all.Release;
            Free (this.m_ICalendar);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Calendar

   function Constructor
   (
      languages : GenericObject;
      calendar_p : WinRt.WString;
      clock : WinRt.WString;
      timeZoneId : WinRt.WString
   )
   return Calendar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Calendar");
      m_Factory    : access ICalendarFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.ICalendar;
      HStr_calendar_p : WinRt.HString := To_HString (calendar_p);
      HStr_clock : WinRt.HString := To_HString (clock);
      HStr_timeZoneId : WinRt.HString := To_HString (timeZoneId);
   begin
      return RetVal : Calendar do
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCalendarWithTimeZone (languages, HStr_calendar_p, HStr_clock, HStr_timeZoneId, m_ComRetVal'Access);
            Retval.m_ICalendar := new Windows.Globalization.ICalendar;
            Retval.m_ICalendar.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_calendar_p);
         Hr := WindowsDeleteString (HStr_clock);
         Hr := WindowsDeleteString (HStr_timeZoneId);
      end return;
   end;

   function Constructor return Calendar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Calendar");
      m_ComRetVal  : aliased Windows.Globalization.ICalendar;
   begin
      return RetVal : Calendar do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICalendar := new Windows.Globalization.ICalendar;
            Retval.m_ICalendar.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      languages : GenericObject
   )
   return Calendar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Calendar");
      m_Factory    : access ICalendarFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.ICalendar;
   begin
      return RetVal : Calendar do
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCalendarDefaultCalendarAndClock (languages, m_ComRetVal'Access);
            Retval.m_ICalendar := new Windows.Globalization.ICalendar;
            Retval.m_ICalendar.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      languages : GenericObject;
      calendar_p : WinRt.WString;
      clock : WinRt.WString
   )
   return Calendar is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Calendar");
      m_Factory    : access ICalendarFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.ICalendar;
      HStr_calendar_p : WinRt.HString := To_HString (calendar_p);
      HStr_clock : WinRt.HString := To_HString (clock);
   begin
      return RetVal : Calendar do
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCalendar (languages, HStr_calendar_p, HStr_clock, m_ComRetVal'Access);
            Retval.m_ICalendar := new Windows.Globalization.ICalendar;
            Retval.m_ICalendar.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_calendar_p);
         Hr := WindowsDeleteString (HStr_clock);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Calendar

   function Clone
   (
      this : in out Calendar
   )
   return WinRt.Windows.Globalization.Calendar'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ICalendar;
   begin
      return RetVal : WinRt.Windows.Globalization.Calendar do
         Hr := this.m_ICalendar.all.Clone (m_ComRetVal'Access);
         Retval.m_ICalendar := new Windows.Globalization.ICalendar;
         Retval.m_ICalendar.all := m_ComRetVal;
      end return;
   end;

   procedure SetToMin
   (
      this : in out Calendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.SetToMin;
   end;

   procedure SetToMax
   (
      this : in out Calendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.SetToMax;
   end;

   function get_Languages
   (
      this : in out Calendar
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ICalendar.all.get_Languages (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_NumeralSystem
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.get_NumeralSystem (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_NumeralSystem
   (
      this : in out Calendar;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICalendar.all.put_NumeralSystem (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetCalendarSystem
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.GetCalendarSystem (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ChangeCalendarSystem
   (
      this : in out Calendar;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICalendar.all.ChangeCalendarSystem (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetClock
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.GetClock (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ChangeClock
   (
      this : in out Calendar;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ICalendar.all.ChangeClock (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetDateTime
   (
      this : in out Calendar
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ICalendar.all.GetDateTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetDateTime
   (
      this : in out Calendar;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.SetDateTime (value);
   end;

   procedure SetToNow
   (
      this : in out Calendar
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.SetToNow;
   end;

   function get_FirstEra
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstEra (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastEra
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastEra (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfEras
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfEras (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Era
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Era (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Era
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Era (value);
   end;

   procedure AddEras
   (
      this : in out Calendar;
      eras : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddEras (eras);
   end;

   function EraAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.EraAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function EraAsString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.EraAsString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstYearInThisEra
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstYearInThisEra (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastYearInThisEra
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastYearInThisEra (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfYearsInThisEra
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfYearsInThisEra (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Year
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Year (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Year
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Year (value);
   end;

   procedure AddYears
   (
      this : in out Calendar;
      years : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddYears (years);
   end;

   function YearAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.YearAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function YearAsTruncatedString
   (
      this : in out Calendar;
      remainingDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.YearAsTruncatedString (remainingDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function YearAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.YearAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstMonthInThisYear
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstMonthInThisYear (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastMonthInThisYear
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastMonthInThisYear (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfMonthsInThisYear
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfMonthsInThisYear (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Month
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Month (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Month
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Month (value);
   end;

   procedure AddMonths
   (
      this : in out Calendar;
      months : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddMonths (months);
   end;

   function MonthAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MonthAsString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MonthAsSoloString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsSoloString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MonthAsSoloString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsSoloString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MonthAsNumericString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsNumericString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MonthAsPaddedNumericString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MonthAsPaddedNumericString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure AddWeeks
   (
      this : in out Calendar;
      weeks : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddWeeks (weeks);
   end;

   function get_FirstDayInThisMonth
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstDayInThisMonth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastDayInThisMonth
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastDayInThisMonth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfDaysInThisMonth
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfDaysInThisMonth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Day
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Day (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Day
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Day (value);
   end;

   procedure AddDays
   (
      this : in out Calendar;
      days : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddDays (days);
   end;

   function DayAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function DayAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DayOfWeek
   (
      this : in out Calendar
   )
   return WinRt.Windows.Globalization.DayOfWeek is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.DayOfWeek;
   begin
      Hr := this.m_ICalendar.all.get_DayOfWeek (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DayOfWeekAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayOfWeekAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function DayOfWeekAsString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayOfWeekAsString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function DayOfWeekAsSoloString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayOfWeekAsSoloString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function DayOfWeekAsSoloString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.DayOfWeekAsSoloString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstPeriodInThisDay
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstPeriodInThisDay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastPeriodInThisDay
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastPeriodInThisDay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfPeriodsInThisDay
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfPeriodsInThisDay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Period
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Period (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Period
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Period (value);
   end;

   procedure AddPeriods
   (
      this : in out Calendar;
      periods : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddPeriods (periods);
   end;

   function PeriodAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.PeriodAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function PeriodAsString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.PeriodAsString (idealLength, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FirstHourInThisPeriod
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstHourInThisPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastHourInThisPeriod
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastHourInThisPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfHoursInThisPeriod
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfHoursInThisPeriod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Hour
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Hour (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Hour
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Hour (value);
   end;

   procedure AddHours
   (
      this : in out Calendar;
      hours : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddHours (hours);
   end;

   function HourAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.HourAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function HourAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.HourAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Minute
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Minute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Minute
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Minute (value);
   end;

   procedure AddMinutes
   (
      this : in out Calendar;
      minutes : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddMinutes (minutes);
   end;

   function MinuteAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MinuteAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function MinuteAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.MinuteAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Second
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Second (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Second
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Second (value);
   end;

   procedure AddSeconds
   (
      this : in out Calendar;
      seconds : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddSeconds (seconds);
   end;

   function SecondAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.SecondAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function SecondAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.SecondAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Nanosecond
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_Nanosecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Nanosecond
   (
      this : in out Calendar;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.put_Nanosecond (value);
   end;

   procedure AddNanoseconds
   (
      this : in out Calendar;
      nanoseconds : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.AddNanoseconds (nanoseconds);
   end;

   function NanosecondAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.NanosecondAsString (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function NanosecondAsPaddedString
   (
      this : in out Calendar;
      minDigits : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.NanosecondAsPaddedString (minDigits, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Compare
   (
      this : in out Calendar;
      other : Windows.Globalization.Calendar'Class
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.Compare (other.m_ICalendar.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CompareDateTime
   (
      this : in out Calendar;
      other : Windows.Foundation.DateTime
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.CompareDateTime (other, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CopyTo
   (
      this : in out Calendar;
      other : Windows.Globalization.Calendar'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICalendar.all.CopyTo (other.m_ICalendar.all);
   end;

   function get_FirstMinuteInThisHour
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstMinuteInThisHour (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastMinuteInThisHour
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastMinuteInThisHour (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfMinutesInThisHour
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfMinutesInThisHour (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FirstSecondInThisMinute
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_FirstSecondInThisMinute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LastSecondInThisMinute
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_LastSecondInThisMinute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NumberOfSecondsInThisMinute
   (
      this : in out Calendar
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ICalendar.all.get_NumberOfSecondsInThisMinute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResolvedLanguage
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICalendar.all.get_ResolvedLanguage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsDaylightSavingTime
   (
      this : in out Calendar
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICalendar.all.get_IsDaylightSavingTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetTimeZone
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ITimeZoneOnCalendar := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ICalendar_Interface, WinRt.Windows.Globalization.ITimeZoneOnCalendar, WinRt.Windows.Globalization.IID_ITimeZoneOnCalendar'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendar.all);
      Hr := m_Interface.GetTimeZone (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ChangeTimeZone
   (
      this : in out Calendar;
      timeZoneId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ITimeZoneOnCalendar := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_timeZoneId : WinRt.HString := To_HString (timeZoneId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ICalendar_Interface, WinRt.Windows.Globalization.ITimeZoneOnCalendar, WinRt.Windows.Globalization.IID_ITimeZoneOnCalendar'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendar.all);
      Hr := m_Interface.ChangeTimeZone (HStr_timeZoneId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_timeZoneId);
   end;

   function TimeZoneAsString
   (
      this : in out Calendar
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ITimeZoneOnCalendar := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ICalendar_Interface, WinRt.Windows.Globalization.ITimeZoneOnCalendar, WinRt.Windows.Globalization.IID_ITimeZoneOnCalendar'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendar.all);
      Hr := m_Interface.TimeZoneAsString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function TimeZoneAsString
   (
      this : in out Calendar;
      idealLength : WinRt.Int32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ITimeZoneOnCalendar := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ICalendar_Interface, WinRt.Windows.Globalization.ITimeZoneOnCalendar, WinRt.Windows.Globalization.IID_ITimeZoneOnCalendar'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICalendar.all);
      Hr := m_Interface.TimeZoneAsString (idealLength, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CalendarIdentifiers is

      function get_Gregorian
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gregorian (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Hebrew
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Hebrew (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Hijri
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Hijri (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Japanese
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Japanese (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Julian
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Julian (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Korean
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Korean (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Taiwan
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Taiwan (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Thai
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Thai (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UmAlQura
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UmAlQura (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ChineseLunar
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ChineseLunar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_JapaneseLunar
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JapaneseLunar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KoreanLunar
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KoreanLunar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TaiwanLunar
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TaiwanLunar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VietnameseLunar
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VietnameseLunar (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Persian
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CalendarIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICalendarIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICalendarIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Persian (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end CalendarIdentifiers;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body ClockIdentifiers is

      function get_TwelveHour
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ClockIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.IClockIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClockIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TwelveHour (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TwentyFourHour
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.ClockIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.IClockIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IClockIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TwentyFourHour (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end ClockIdentifiers;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CurrencyAmount

   procedure Initialize (this : in out CurrencyAmount) is
   begin
      null;
   end;

   procedure Finalize (this : in out CurrencyAmount) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICurrencyAmount, ICurrencyAmount_Ptr);
   begin
      if this.m_ICurrencyAmount /= null then
         if this.m_ICurrencyAmount.all /= null then
            RefCount := this.m_ICurrencyAmount.all.Release;
            Free (this.m_ICurrencyAmount);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CurrencyAmount

   function Constructor
   (
      amount : WinRt.WString;
      currency : WinRt.WString
   )
   return CurrencyAmount is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.CurrencyAmount");
      m_Factory    : access ICurrencyAmountFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.ICurrencyAmount;
      HStr_amount : WinRt.HString := To_HString (amount);
      HStr_currency : WinRt.HString := To_HString (currency);
   begin
      return RetVal : CurrencyAmount do
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyAmountFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_amount, HStr_currency, m_ComRetVal'Access);
            Retval.m_ICurrencyAmount := new Windows.Globalization.ICurrencyAmount;
            Retval.m_ICurrencyAmount.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_amount);
         Hr := WindowsDeleteString (HStr_currency);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CurrencyAmount

   function get_Amount
   (
      this : in out CurrencyAmount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICurrencyAmount.all.get_Amount (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Currency
   (
      this : in out CurrencyAmount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICurrencyAmount.all.get_Currency (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CurrencyIdentifiers is

      function get_AED
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AED (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AFN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AFN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ALL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ALL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AMD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AMD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ANG
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ANG (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AOA
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AOA (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ARS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ARS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AUD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AUD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AWG
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AWG (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AZN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AZN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BAM
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BAM (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BBD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BBD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BDT
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BDT (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BGN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BGN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BHD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BHD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BIF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BIF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BMD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BMD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BND
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BND (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BOB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BOB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BRL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BRL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BSD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BSD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BTN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BTN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BWP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BWP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BYR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BYR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BZD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BZD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CAD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CAD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CDF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CDF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CHF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CHF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CLP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CLP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CNY
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CNY (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_COP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_COP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CRC
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CRC (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CUP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CUP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CVE
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CVE (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_CZK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CZK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DJF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DJF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DKK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DKK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DOP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DOP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_DZD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DZD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_EGP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EGP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ERN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ERN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ETB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ETB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_EUR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_EUR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FJD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FJD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FKP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FKP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GBP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GBP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GEL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GEL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GHS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GHS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GIP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GIP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GMD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GMD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GNF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GNF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GTQ
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GTQ (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_GYD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_GYD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HKD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HKD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HNL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HNL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HRK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HRK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HTG
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HTG (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HUF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HUF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IDR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IDR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ILS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ILS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_INR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_INR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IQD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IQD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_IRR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_IRR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ISK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ISK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_JMD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JMD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_JOD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JOD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_JPY
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JPY (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KES
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KES (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KGS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KGS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KHR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KHR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KMF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KMF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KPW
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KPW (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KRW
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KRW (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KWD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KWD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KYD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KYD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_KZT
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_KZT (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LAK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LAK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LBP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LBP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LKR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LKR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LRD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LRD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LSL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LSL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LTL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LTL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LVL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LVL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LYD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LYD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MAD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MAD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MDL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MDL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MGA
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MGA (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MKD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MKD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MMK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MMK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MNT
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MNT (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MOP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MOP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MRO
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MRO (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MUR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MUR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MVR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MVR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MWK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MWK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MXN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MXN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MYR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MYR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MZN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MZN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NAD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NAD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NGN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NGN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NIO
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NIO (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NOK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NOK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NPR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NPR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_NZD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_NZD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_OMR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OMR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PAB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PAB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PEN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PEN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PGK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PGK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PHP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PHP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PKR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PKR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PLN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PLN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_PYG
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PYG (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_QAR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_QAR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RON
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RON (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RSD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RSD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RUB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RUB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_RWF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RWF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SAR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SAR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SBD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SBD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SCR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SCR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SDG
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SDG (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SEK
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SEK (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SGD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SGD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SHP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SHP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SLL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SLL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SOS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SOS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SRD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SRD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_STD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_STD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SYP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SYP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SZL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SZL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_THB
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_THB (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TJS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TJS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TMT
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TMT (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TND
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TND (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TOP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TOP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TRY
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TRY (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TTD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TTD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TWD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TWD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TZS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TZS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UAH
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UAH (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UGX
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UGX (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_USD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_USD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UYU
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UYU (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_UZS
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UZS (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VEF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VEF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VND
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VND (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VUV
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VUV (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_WST
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_WST (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_XAF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XAF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_XCD
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XCD (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_XOF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XOF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_XPF
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XPF (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_XXX
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_XXX (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_YER
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_YER (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZAR
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZAR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZMW
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZMW (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZWL
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZWL (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_BYN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_BYN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MRU
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MRU (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_SSP
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SSP (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_STN
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_STN (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VES
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.CurrencyIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.ICurrencyIdentifiersStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICurrencyIdentifiersStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VES (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end CurrencyIdentifiers;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeographicRegion

   procedure Initialize (this : in out GeographicRegion) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeographicRegion) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeographicRegion, IGeographicRegion_Ptr);
   begin
      if this.m_IGeographicRegion /= null then
         if this.m_IGeographicRegion.all /= null then
            RefCount := this.m_IGeographicRegion.all.Release;
            Free (this.m_IGeographicRegion);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GeographicRegion

   function Constructor return GeographicRegion is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.GeographicRegion");
      m_ComRetVal  : aliased Windows.Globalization.IGeographicRegion;
   begin
      return RetVal : GeographicRegion do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGeographicRegion := new Windows.Globalization.IGeographicRegion;
            Retval.m_IGeographicRegion.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      geographicRegionCode : WinRt.WString
   )
   return GeographicRegion is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.GeographicRegion");
      m_Factory    : access IGeographicRegionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.IGeographicRegion;
      HStr_geographicRegionCode : WinRt.HString := To_HString (geographicRegionCode);
   begin
      return RetVal : GeographicRegion do
         Hr := RoGetActivationFactory (m_hString, IID_IGeographicRegionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateGeographicRegion (HStr_geographicRegionCode, m_ComRetVal'Access);
            Retval.m_IGeographicRegion := new Windows.Globalization.IGeographicRegion;
            Retval.m_IGeographicRegion.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_geographicRegionCode);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GeographicRegion

   function IsSupported
   (
      geographicRegionCode : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Globalization.GeographicRegion");
      m_Factory        : access WinRt.Windows.Globalization.IGeographicRegionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_geographicRegionCode : WinRt.HString := To_HString (geographicRegionCode);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGeographicRegionStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (HStr_geographicRegionCode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_geographicRegionCode);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeographicRegion

   function get_Code
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_Code (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CodeTwoLetter
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_CodeTwoLetter (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CodeThreeLetter
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_CodeThreeLetter (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CodeThreeDigit
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_CodeThreeDigit (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NativeName
   (
      this : in out GeographicRegion
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGeographicRegion.all.get_NativeName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CurrenciesInUse
   (
      this : in out GeographicRegion
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IGeographicRegion.all.get_CurrenciesInUse (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for JapanesePhoneme

   procedure Initialize (this : in out JapanesePhoneme) is
   begin
      null;
   end;

   procedure Finalize (this : in out JapanesePhoneme) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IJapanesePhoneme, IJapanesePhoneme_Ptr);
   begin
      if this.m_IJapanesePhoneme /= null then
         if this.m_IJapanesePhoneme.all /= null then
            RefCount := this.m_IJapanesePhoneme.all.Release;
            Free (this.m_IJapanesePhoneme);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for JapanesePhoneme

   function get_DisplayText
   (
      this : in out JapanesePhoneme
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IJapanesePhoneme.all.get_DisplayText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_YomiText
   (
      this : in out JapanesePhoneme
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IJapanesePhoneme.all.get_YomiText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsPhraseStart
   (
      this : in out JapanesePhoneme
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IJapanesePhoneme.all.get_IsPhraseStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body JapanesePhoneticAnalyzer is

      function GetWords
      (
         input : WinRt.WString
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.JapanesePhoneticAnalyzer");
         m_Factory        : access WinRt.Windows.Globalization.IJapanesePhoneticAnalyzerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         HStr_input : WinRt.HString := To_HString (input);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IJapanesePhoneticAnalyzerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetWords (HStr_input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
         return m_ComRetVal;
      end;

      function GetWords
      (
         input : WinRt.WString;
         monoRuby : WinRt.Boolean
      )
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.JapanesePhoneticAnalyzer");
         m_Factory        : access WinRt.Windows.Globalization.IJapanesePhoneticAnalyzerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
         HStr_input : WinRt.HString := To_HString (input);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IJapanesePhoneticAnalyzerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetWords (HStr_input, monoRuby, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_input);
         return m_ComRetVal;
      end;

   end JapanesePhoneticAnalyzer;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Language

   procedure Initialize (this : in out Language) is
   begin
      null;
   end;

   procedure Finalize (this : in out Language) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILanguage, ILanguage_Ptr);
   begin
      if this.m_ILanguage /= null then
         if this.m_ILanguage.all /= null then
            RefCount := this.m_ILanguage.all.Release;
            Free (this.m_ILanguage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Language

   function Constructor
   (
      languageTag : WinRt.WString
   )
   return Language is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Globalization.Language");
      m_Factory    : access ILanguageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Globalization.ILanguage;
      HStr_languageTag : WinRt.HString := To_HString (languageTag);
   begin
      return RetVal : Language do
         Hr := RoGetActivationFactory (m_hString, IID_ILanguageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateLanguage (HStr_languageTag, m_ComRetVal'Access);
            Retval.m_ILanguage := new Windows.Globalization.ILanguage;
            Retval.m_ILanguage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_languageTag);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Language

   function IsWellFormed
   (
      languageTag : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Globalization.Language");
      m_Factory        : access WinRt.Windows.Globalization.ILanguageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_languageTag : WinRt.HString := To_HString (languageTag);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILanguageStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsWellFormed (HStr_languageTag, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_languageTag);
      return m_ComRetVal;
   end;

   function get_CurrentInputMethodLanguageTag
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Globalization.Language");
      m_Factory        : access WinRt.Windows.Globalization.ILanguageStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILanguageStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_CurrentInputMethodLanguageTag (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function TrySetInputMethodLanguageTag
   (
      languageTag : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Globalization.Language");
      m_Factory        : access WinRt.Windows.Globalization.ILanguageStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_languageTag : WinRt.HString := To_HString (languageTag);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILanguageStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TrySetInputMethodLanguageTag (HStr_languageTag, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_languageTag);
      return m_ComRetVal;
   end;

   function GetMuiCompatibleLanguageListFromLanguageTags
   (
      languageTags : GenericObject
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Globalization.Language");
      m_Factory        : access WinRt.Windows.Globalization.ILanguageStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ILanguageStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetMuiCompatibleLanguageListFromLanguageTags (languageTags, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Language

   function get_LanguageTag
   (
      this : in out Language
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILanguage.all.get_LanguageTag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out Language
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILanguage.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NativeName
   (
      this : in out Language
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILanguage.all.get_NativeName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Script
   (
      this : in out Language
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ILanguage.all.get_Script (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetExtensionSubtags
   (
      this : in out Language;
      singleton : WinRt.WString
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ILanguageExtensionSubtags := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      HStr_singleton : WinRt.HString := To_HString (singleton);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ILanguage_Interface, WinRt.Windows.Globalization.ILanguageExtensionSubtags, WinRt.Windows.Globalization.IID_ILanguageExtensionSubtags'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILanguage.all);
      Hr := m_Interface.GetExtensionSubtags (HStr_singleton, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_singleton);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LayoutDirection
   (
      this : in out Language
   )
   return WinRt.Windows.Globalization.LanguageLayoutDirection is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ILanguage2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.LanguageLayoutDirection;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ILanguage_Interface, WinRt.Windows.Globalization.ILanguage2, WinRt.Windows.Globalization.IID_ILanguage2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILanguage.all);
      Hr := m_Interface.get_LayoutDirection (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AbbreviatedName
   (
      this : in out Language
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Globalization.ILanguage3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Globalization.ILanguage_Interface, WinRt.Windows.Globalization.ILanguage3, WinRt.Windows.Globalization.IID_ILanguage3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILanguage.all);
      Hr := m_Interface.get_AbbreviatedName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body NumeralSystemIdentifiers is

      function get_Arab
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Arab (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ArabExt
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ArabExt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Bali
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bali (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Beng
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Beng (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Cham
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Cham (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Deva
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Deva (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_FullWide
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_FullWide (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Gujr
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gujr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Guru
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Guru (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HaniDec
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HaniDec (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Java
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Java (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Kali
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Kali (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Khmr
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Khmr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Knda
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Knda (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Lana
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Lana (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_LanaTham
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_LanaTham (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Laoo
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Laoo (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Latn
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Latn (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Lepc
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Lepc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Limb
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Limb (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mlym
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mlym (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mong
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mong (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mtei
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mtei (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mymr
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mymr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MymrShan
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MymrShan (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Nkoo
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Nkoo (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Olck
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Olck (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Orya
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Orya (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Saur
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Saur (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Sund
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Sund (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Talu
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Talu (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_TamlDec
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TamlDec (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Telu
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Telu (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Thai_NumeralSystemIdentifiers
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Thai (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Tibt
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Tibt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Vaii
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Vaii (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Brah
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Brah (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Osma
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Osma (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MathBold
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathBold (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MathDbl
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathDbl (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MathSans
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathSans (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MathSanb
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathSanb (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_MathMono
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MathMono (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZmthBold
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZmthBold (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZmthDbl
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZmthDbl (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZmthSans
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZmthSans (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZmthSanb
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZmthSanb (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_ZmthMono
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Globalization.NumeralSystemIdentifiers");
         m_Factory        : access WinRt.Windows.Globalization.INumeralSystemIdentifiersStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_INumeralSystemIdentifiersStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ZmthMono (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end NumeralSystemIdentifiers;

end;

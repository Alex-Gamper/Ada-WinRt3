--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with WinRt.Windows.Devices.I2c.Provider;
with WinRt.Windows.Foundation;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Devices.I2c is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type II2cConnectionSettings_Interface is interface and WinRt.IInspectable_Interface;
   type II2cConnectionSettings is access all II2cConnectionSettings_Interface'Class;
   type II2cConnectionSettings_Ptr is access all II2cConnectionSettings;

   type II2cConnectionSettingsFactory_Interface is interface and WinRt.IInspectable_Interface;
   type II2cConnectionSettingsFactory is access all II2cConnectionSettingsFactory_Interface'Class;

   type II2cController_Interface is interface and WinRt.IInspectable_Interface;
   type II2cController is access all II2cController_Interface'Class;
   type II2cController_Ptr is access all II2cController;

   type II2cControllerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type II2cControllerStatics is access all II2cControllerStatics_Interface'Class;

   type II2cDevice_Interface is interface and WinRt.IInspectable_Interface;
   type II2cDevice is access all II2cDevice_Interface'Class;
   type II2cDevice_Ptr is access all II2cDevice;

   type II2cDeviceStatics_Interface is interface and WinRt.IInspectable_Interface;
   type II2cDeviceStatics is access all II2cDeviceStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type I2cConnectionSettings is new Ada.Finalization.Limited_Controlled with
      record
         m_II2cConnectionSettings : access Windows.Devices.I2c.II2cConnectionSettings;
      end record;
   type I2cConnectionSettings_Ptr is access all I2cConnectionSettings;

   type I2cController is new Ada.Finalization.Limited_Controlled with
      record
         m_II2cController : access Windows.Devices.I2c.II2cController;
      end record;
   type I2cController_Ptr is access all I2cController;

   type I2cDevice is new Ada.Finalization.Limited_Controlled with
      record
         m_II2cDevice : access Windows.Devices.I2c.II2cDevice;
      end record;
   type I2cDevice_Ptr is access all I2cDevice;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type I2cBusSpeed is (
      StandardMode_e,
      FastMode_e
   );
   for I2cBusSpeed use (
      StandardMode_e => 0,
      FastMode_e => 1
   );
   type I2cBusSpeed_Ptr is access all I2cBusSpeed;

   type I2cSharingMode is (
      Exclusive_e,
      Shared_e
   );
   for I2cSharingMode use (
      Exclusive_e => 0,
      Shared_e => 1
   );
   type I2cSharingMode_Ptr is access all I2cSharingMode;

   type I2cTransferStatus is (
      FullTransfer_e,
      PartialTransfer_e,
      SlaveAddressNotAcknowledged_e,
      ClockStretchTimeout_e,
      UnknownError_e
   );
   for I2cTransferStatus use (
      FullTransfer_e => 0,
      PartialTransfer_e => 1,
      SlaveAddressNotAcknowledged_e => 2,
      ClockStretchTimeout_e => 3,
      UnknownError_e => 4
   );
   type I2cTransferStatus_Ptr is access all I2cTransferStatus;

   -----------------------------------------------------------------------------
   -- Record declarations
   -----------------------------------------------------------------------------

   type I2cTransferResult is record
      Status : Windows.Devices.I2c.I2cTransferStatus;
      BytesTransferred : WinRt.UInt32;
   end record with Convention => C_Pass_By_Copy;
   type I2cTransferResult_Ptr is access all I2cTransferResult;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type II2cConnectionSettings is interface and WinRt.IInspectable;

      function get_SlaveAddress
      (
         this : access II2cConnectionSettings_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function put_SlaveAddress
      (
         this : access II2cConnectionSettings_Interface;
         value : WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_BusSpeed
      (
         this : access II2cConnectionSettings_Interface;
         RetVal : access Windows.Devices.I2c.I2cBusSpeed
      )
      return WinRt.Hresult is abstract;

      function put_BusSpeed
      (
         this : access II2cConnectionSettings_Interface;
         value : Windows.Devices.I2c.I2cBusSpeed
      )
      return WinRt.Hresult is abstract;

      function get_SharingMode
      (
         this : access II2cConnectionSettings_Interface;
         RetVal : access Windows.Devices.I2c.I2cSharingMode
      )
      return WinRt.Hresult is abstract;

      function put_SharingMode
      (
         this : access II2cConnectionSettings_Interface;
         value : Windows.Devices.I2c.I2cSharingMode
      )
      return WinRt.Hresult is abstract;

      IID_II2cConnectionSettings : aliased WinRt.IID := (4074443527, 43887, 17977, (167, 103, 84, 83, 109, 195, 70, 15 ));

   -----------------------------------------------------------------------------
   -- type II2cConnectionSettingsFactory is interface and WinRt.IInspectable;

      function Create
      (
         this : access II2cConnectionSettingsFactory_Interface;
         slaveAddress : WinRt.Int32;
         RetVal : access Windows.Devices.I2c.II2cConnectionSettings
      )
      return WinRt.Hresult is abstract;

      IID_II2cConnectionSettingsFactory : aliased WinRt.IID := (2176157363, 38547, 16817, (162, 67, 222, 212, 246, 230, 105, 38 ));

   -----------------------------------------------------------------------------
   -- type II2cController is interface and WinRt.IInspectable;

      function GetDevice
      (
         this : access II2cController_Interface;
         settings : Windows.Devices.I2c.II2cConnectionSettings;
         RetVal : access Windows.Devices.I2c.II2cDevice
      )
      return WinRt.Hresult is abstract;

      IID_II2cController : aliased WinRt.IID := (3297423794, 34720, 16742, (142, 62, 180, 184, 249, 124, 215, 41 ));

   -----------------------------------------------------------------------------
   -- type II2cControllerStatics is interface and WinRt.IInspectable;

      function GetControllersAsync
      (
         this : access II2cControllerStatics_Interface;
         provider : Windows.Devices.I2c.Provider.II2cProvider;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function GetDefaultAsync
      (
         this : access II2cControllerStatics_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_II2cControllerStatics : aliased WinRt.IID := (1090257765, 24325, 20094, (132, 189, 16, 13, 184, 224, 174, 197 ));

   -----------------------------------------------------------------------------
   -- type II2cDevice is interface and WinRt.IInspectable;

      function get_DeviceId
      (
         this : access II2cDevice_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function get_ConnectionSettings
      (
         this : access II2cDevice_Interface;
         RetVal : access Windows.Devices.I2c.II2cConnectionSettings
      )
      return WinRt.Hresult is abstract;

      function Write
      (
         this : access II2cDevice_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function WritePartial
      (
         this : access II2cDevice_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.I2cTransferResult
      )
      return WinRt.Hresult is abstract;

      function Read
      (
         this : access II2cDevice_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function ReadPartial
      (
         this : access II2cDevice_Interface;
         bufferSize : WinRt.UInt32;
         buffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.I2cTransferResult
      )
      return WinRt.Hresult is abstract;

      function WriteRead
      (
         this : access II2cDevice_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr
      )
      return WinRt.Hresult is abstract;

      function WriteReadPartial
      (
         this : access II2cDevice_Interface;
         writeBufferSize : WinRt.UInt32;
         writeBuffer : WinRt.Byte_Ptr;
         readBufferSize : WinRt.UInt32;
         readBuffer : WinRt.Byte_Ptr;
         RetVal : access Windows.Devices.I2c.I2cTransferResult
      )
      return WinRt.Hresult is abstract;

      IID_II2cDevice : aliased WinRt.IID := (2251735350, 47557, 20336, (148, 73, 204, 70, 220, 111, 87, 235 ));

   -----------------------------------------------------------------------------
   -- type II2cDeviceStatics is interface and WinRt.IInspectable;

      function GetDeviceSelector
      (
         this : access II2cDeviceStatics_Interface;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function GetDeviceSelector
      (
         this : access II2cDeviceStatics_Interface;
         friendlyName : WinRt.HString;
         RetVal : access WinRt.HString
      )
      return WinRt.Hresult is abstract;

      function FromIdAsync
      (
         this : access II2cDeviceStatics_Interface;
         deviceId : WinRt.HString;
         settings : Windows.Devices.I2c.II2cConnectionSettings;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_II2cDeviceStatics : aliased WinRt.IID := (2443394019, 29492, 17682, (150, 188, 251, 174, 148, 89, 245, 246 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cConnectionSettings

   overriding procedure Initialize (this : in out I2cConnectionSettings);
   overriding procedure Finalize (this : in out I2cConnectionSettings);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for I2cConnectionSettings

   function Constructor
   (
      slaveAddress : WinRt.Int32
   )
   return I2cConnectionSettings;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cConnectionSettings

   function get_SlaveAddress
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Int32;

   procedure put_SlaveAddress
   (
      this : in out I2cConnectionSettings;
      value : WinRt.Int32
   );

   function get_BusSpeed
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.I2cBusSpeed;

   procedure put_BusSpeed
   (
      this : in out I2cConnectionSettings;
      value : Windows.Devices.I2c.I2cBusSpeed
   );

   function get_SharingMode
   (
      this : in out I2cConnectionSettings
   )
   return WinRt.Windows.Devices.I2c.I2cSharingMode;

   procedure put_SharingMode
   (
      this : in out I2cConnectionSettings;
      value : Windows.Devices.I2c.I2cSharingMode
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cController

   overriding procedure Initialize (this : in out I2cController);
   overriding procedure Finalize (this : in out I2cController);

   -----------------------------------------------------------------------------
   -- Static Interfaces for I2cController

   function GetControllersAsync
   (
      provider : Windows.Devices.I2c.Provider.II2cProvider
   )
   return WinRt.GenericObject;

   function GetDefaultAsync
   return WinRt.Windows.Devices.I2c.I2cController;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cController

   function GetDevice
   (
      this : in out I2cController;
      settings : Windows.Devices.I2c.I2cConnectionSettings'Class
   )
   return WinRt.Windows.Devices.I2c.I2cDevice'Class;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for I2cDevice

   overriding procedure Initialize (this : in out I2cDevice);
   overriding procedure Finalize (this : in out I2cDevice);

   -----------------------------------------------------------------------------
   -- Static Interfaces for I2cDevice

   function GetDeviceSelector
   return WinRt.WString;

   function GetDeviceSelector
   (
      friendlyName : WinRt.WString
   )
   return WinRt.WString;

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      settings : Windows.Devices.I2c.I2cConnectionSettings'Class
   )
   return WinRt.Windows.Devices.I2c.I2cDevice;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for I2cDevice

   function get_DeviceId
   (
      this : in out I2cDevice
   )
   return WinRt.WString;

   function get_ConnectionSettings
   (
      this : in out I2cDevice
   )
   return WinRt.Windows.Devices.I2c.I2cConnectionSettings'Class;

   procedure Write
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   );

   function WritePartial
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult;

   procedure Read
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   );

   function ReadPartial
   (
      this : in out I2cDevice;
      buffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult;

   procedure WriteRead
   (
      this : in out I2cDevice;
      writeBuffer : WinRt.Byte_Array;
      readBuffer : WinRt.Byte_Array
   );

   function WriteReadPartial
   (
      this : in out I2cDevice;
      writeBuffer : WinRt.Byte_Array;
      readBuffer : WinRt.Byte_Array
   )
   return WinRt.Windows.Devices.I2c.I2cTransferResult;

   procedure Close
   (
      this : in out I2cDevice
   );

end;

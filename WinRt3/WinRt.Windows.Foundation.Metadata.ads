--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Foundation.Metadata is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IApiInformationStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IApiInformationStatics is access IApiInformationStatics_Interface'Class;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type AttributeTargets is (
      Delegate_e,
      Enum_e,
      Event_e,
      Field_e,
      Interface_e,
      Method_e,
      Parameter_e,
      Property_e,
      RuntimeClass_e,
      Struct_e,
      InterfaceImpl_e,
      ApiContract_e,
      All_e
   );
   for AttributeTargets use (
      Delegate_e => 1,
      Enum_e => 2,
      Event_e => 4,
      Field_e => 8,
      Interface_e => 16,
      Method_e => 64,
      Parameter_e => 128,
      Property_e => 256,
      RuntimeClass_e => 512,
      Struct_e => 1024,
      InterfaceImpl_e => 2048,
      ApiContract_e => 8192,
      All_e => 4294967295
   );
   type AttributeTargets_Ptr is access AttributeTargets;

   type CompositionType is (
      Protected_e,
      Public_e
   );
   for CompositionType use (
      Protected_e => 1,
      Public_e => 2
   );
   type CompositionType_Ptr is access CompositionType;

   type DeprecationType is (
      Deprecate_e,
      Remove_e
   );
   for DeprecationType use (
      Deprecate_e => 0,
      Remove_e => 1
   );
   type DeprecationType_Ptr is access DeprecationType;

   type FeatureStage is (
      AlwaysDisabled_e,
      DisabledByDefault_e,
      EnabledByDefault_e,
      AlwaysEnabled_e
   );
   for FeatureStage use (
      AlwaysDisabled_e => 0,
      DisabledByDefault_e => 1,
      EnabledByDefault_e => 2,
      AlwaysEnabled_e => 3
   );
   type FeatureStage_Ptr is access FeatureStage;

   type GCPressureAmount is (
      Low_e,
      Medium_e,
      High_e
   );
   for GCPressureAmount use (
      Low_e => 0,
      Medium_e => 1,
      High_e => 2
   );
   type GCPressureAmount_Ptr is access GCPressureAmount;

   type MarshalingType is (
      InvalidMarshaling_e,
      None_e,
      Agile_e,
      Standard_e
   );
   for MarshalingType use (
      InvalidMarshaling_e => 0,
      None_e => 1,
      Agile_e => 2,
      Standard_e => 3
   );
   type MarshalingType_Ptr is access MarshalingType;

   type Platform is (
      Windows_e,
      WindowsPhone_e
   );
   for Platform use (
      Windows_e => 0,
      WindowsPhone_e => 1
   );
   type Platform_Ptr is access Platform;

   type ThreadingModel is (
      InvalidThreading_e,
      STA_e,
      MTA_e,
      Both_e
   );
   for ThreadingModel use (
      InvalidThreading_e => 0,
      STA_e => 1,
      MTA_e => 2,
      Both_e => 3
   );
   type ThreadingModel_Ptr is access ThreadingModel;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IApiInformationStatics is interface and WinRt.IInspectable;

      function IsTypePresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsMethodPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         methodName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsMethodPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         methodName : WinRt.HString;
         inputParameterCount : WinRt.UInt32;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsEventPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         eventName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsPropertyPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         propertyName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsReadOnlyPropertyPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         propertyName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsWriteablePropertyPresent
      (
         this : access IApiInformationStatics_Interface;
         typeName : WinRt.HString;
         propertyName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsEnumNamedValuePresent
      (
         this : access IApiInformationStatics_Interface;
         enumTypeName : WinRt.HString;
         valueName : WinRt.HString;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsApiContractPresent
      (
         this : access IApiInformationStatics_Interface;
         contractName : WinRt.HString;
         majorVersion : WinRt.UInt16;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function IsApiContractPresent
      (
         this : access IApiInformationStatics_Interface;
         contractName : WinRt.HString;
         majorVersion : WinRt.UInt16;
         minorVersion : WinRt.UInt16;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      IID_IApiInformationStatics : aliased WinRt.IID := (2574531070, 63105, 18961, (180, 22, 193, 58, 71, 232, 186, 54 ));

end;

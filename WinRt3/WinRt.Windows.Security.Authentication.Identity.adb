--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Identity is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnterpriseKeyCredentialRegistrationInfo

   procedure Initialize (this : in out EnterpriseKeyCredentialRegistrationInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnterpriseKeyCredentialRegistrationInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnterpriseKeyCredentialRegistrationInfo, IEnterpriseKeyCredentialRegistrationInfo_Ptr);
   begin
      if this.m_IEnterpriseKeyCredentialRegistrationInfo /= null then
         if this.m_IEnterpriseKeyCredentialRegistrationInfo.all /= null then
            RefCount := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.Release;
            Free (this.m_IEnterpriseKeyCredentialRegistrationInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnterpriseKeyCredentialRegistrationInfo

   function get_TenantId
   (
      this : in out EnterpriseKeyCredentialRegistrationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.get_TenantId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TenantName
   (
      this : in out EnterpriseKeyCredentialRegistrationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.get_TenantName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Subject
   (
      this : in out EnterpriseKeyCredentialRegistrationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_KeyId
   (
      this : in out EnterpriseKeyCredentialRegistrationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.get_KeyId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_KeyName
   (
      this : in out EnterpriseKeyCredentialRegistrationInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationInfo.all.get_KeyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EnterpriseKeyCredentialRegistrationManager

   procedure Initialize (this : in out EnterpriseKeyCredentialRegistrationManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out EnterpriseKeyCredentialRegistrationManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEnterpriseKeyCredentialRegistrationManager, IEnterpriseKeyCredentialRegistrationManager_Ptr);
   begin
      if this.m_IEnterpriseKeyCredentialRegistrationManager /= null then
         if this.m_IEnterpriseKeyCredentialRegistrationManager.all /= null then
            RefCount := this.m_IEnterpriseKeyCredentialRegistrationManager.all.Release;
            Free (this.m_IEnterpriseKeyCredentialRegistrationManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for EnterpriseKeyCredentialRegistrationManager

   function get_Current
   return WinRt.Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationManager");
      m_Factory        : access WinRt.Windows.Security.Authentication.Identity.IEnterpriseKeyCredentialRegistrationManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Identity.IEnterpriseKeyCredentialRegistrationManager;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Identity.EnterpriseKeyCredentialRegistrationManager do
         Hr := RoGetActivationFactory (m_hString, IID_IEnterpriseKeyCredentialRegistrationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IEnterpriseKeyCredentialRegistrationManager := new Windows.Security.Authentication.Identity.IEnterpriseKeyCredentialRegistrationManager;
            Retval.m_IEnterpriseKeyCredentialRegistrationManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EnterpriseKeyCredentialRegistrationManager

   function GetRegistrationsAsync
   (
      this : in out EnterpriseKeyCredentialRegistrationManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (198593583, 35613, 22228, (167, 7, 250, 181, 49, 94, 114, 120 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1735683136, 44512, 22913, (174, 35, 16, 72, 145, 116, 136, 83 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IEnterpriseKeyCredentialRegistrationManager.all.GetRegistrationsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Store.LicenseManagement is

   package IAsyncOperation_LicenseSatisfactionResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionResult);
   package AsyncOperationCompletedHandler_LicenseSatisfactionResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionResult);

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body LicenseManager is

      procedure AddLicenseAsync
      (
         license : Windows.Storage.Streams.IBuffer
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.LicenseManagement.LicenseManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILicenseManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.AddLicenseAsync (license, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetSatisfactionInfosAsync
      (
         contentIds : GenericObject;
         keyIds : GenericObject
      )
      return WinRt.Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.LicenseManagement.LicenseManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_LicenseSatisfactionResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_LicenseSatisfactionResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionResult;
         m_IID            : aliased WinRt.IID := (3091495881, 43512, 22631, (139, 48, 205, 52, 114, 14, 220, 49 )); -- Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult;
         m_HandlerIID     : aliased WinRt.IID := (2473493617, 9519, 21305, (137, 195, 148, 40, 65, 32, 134, 202 ));
         m_Handler        : AsyncOperationCompletedHandler_LicenseSatisfactionResult.Kind := new AsyncOperationCompletedHandler_LicenseSatisfactionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LicenseSatisfactionResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LicenseSatisfactionResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LicenseSatisfactionResult.Kind_Delegate, AsyncOperationCompletedHandler_LicenseSatisfactionResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult do
            Hr := RoGetActivationFactory (m_hString, IID_ILicenseManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSatisfactionInfosAsync (contentIds, keyIds, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_ILicenseSatisfactionResult := new Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionResult;
                        Retval.m_ILicenseSatisfactionResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure RefreshLicensesAsync
      (
         refreshOption : Windows.ApplicationModel.Store.LicenseManagement.LicenseRefreshOption
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.LicenseManagement.LicenseManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

         procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               Hr := asyncInfo.GetResults;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

         m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
         procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      begin
         Hr := RoGetActivationFactory (m_hString, IID_ILicenseManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RefreshLicensesAsync (refreshOption, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_Captured := m_Completed;
               Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               m_RefCount := m_ComRetVal.Release;
               m_RefCount := m_CompletedHandler.Release;
               if m_RefCount = 0 then
                  Free (m_CompletedHandler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end LicenseManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LicenseSatisfactionInfo

   procedure Initialize (this : in out LicenseSatisfactionInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out LicenseSatisfactionInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILicenseSatisfactionInfo, ILicenseSatisfactionInfo_Ptr);
   begin
      if this.m_ILicenseSatisfactionInfo /= null then
         if this.m_ILicenseSatisfactionInfo.all /= null then
            RefCount := this.m_ILicenseSatisfactionInfo.all.Release;
            Free (this.m_ILicenseSatisfactionInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LicenseSatisfactionInfo

   function get_SatisfiedByDevice
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedByDevice (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SatisfiedByOpenLicense
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedByOpenLicense (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SatisfiedByTrial
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedByTrial (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SatisfiedByPass
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedByPass (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SatisfiedByInstallMedia
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedByInstallMedia (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SatisfiedBySignedInUser
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_SatisfiedBySignedInUser (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsSatisfied
   (
      this : in out LicenseSatisfactionInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ILicenseSatisfactionInfo.all.get_IsSatisfied (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LicenseSatisfactionResult

   procedure Initialize (this : in out LicenseSatisfactionResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out LicenseSatisfactionResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILicenseSatisfactionResult, ILicenseSatisfactionResult_Ptr);
   begin
      if this.m_ILicenseSatisfactionResult /= null then
         if this.m_ILicenseSatisfactionResult.all /= null then
            RefCount := this.m_ILicenseSatisfactionResult.all.Release;
            Free (this.m_ILicenseSatisfactionResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LicenseSatisfactionResult

   function get_LicenseSatisfactionInfos
   (
      this : in out LicenseSatisfactionResult
   )
   return IMapView_HString_ILicenseSatisfactionInfo.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_ILicenseSatisfactionInfo.Kind;
   begin
      Hr := this.m_ILicenseSatisfactionResult.all.get_LicenseSatisfactionInfos (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_ILicenseSatisfactionInfo (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out LicenseSatisfactionResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_ILicenseSatisfactionResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Audio;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.ConversationalAgent is

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_IInputStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IInputStream);
   package AsyncOperationCompletedHandler_IInputStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IInputStream);

   package IAsyncOperation_DetectionConfigurationTrainingStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus);
   package AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_ActivationSignalDetectionConfiguration is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration);
   package AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration);

   package IAsyncOperation_ConversationalAgentSessionUpdateResponse is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse);
   package AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse);

   package IAsyncOperation_IInspectable is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.IInspectable);
   package AsyncOperationCompletedHandler_IInspectable is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.IInspectable);

   package IAsyncOperation_AudioDeviceInputNode is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Audio.IAudioDeviceInputNode);
   package AsyncOperationCompletedHandler_AudioDeviceInputNode is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Audio.IAudioDeviceInputNode);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_ConversationalAgentSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession);
   package AsyncOperationCompletedHandler_ConversationalAgentSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivationSignalDetectionConfiguration

   procedure Initialize (this : in out ActivationSignalDetectionConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivationSignalDetectionConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivationSignalDetectionConfiguration, IActivationSignalDetectionConfiguration_Ptr);
   begin
      if this.m_IActivationSignalDetectionConfiguration /= null then
         if this.m_IActivationSignalDetectionConfiguration.all /= null then
            RefCount := this.m_IActivationSignalDetectionConfiguration.all.Release;
            Free (this.m_IActivationSignalDetectionConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivationSignalDetectionConfiguration

   function get_SignalId
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_SignalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ModelId
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_ModelId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayName
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsActive
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetEnabled
   (
      this : in out ActivationSignalDetectionConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.SetEnabled (value);
   end;

   procedure SetEnabledAsync
   (
      this : in out ActivationSignalDetectionConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.SetEnabledAsync (value, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_AvailabilityInfo
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationAvailabilityInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.IDetectionConfigurationAvailabilityInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationAvailabilityInfo do
         Hr := this.m_IActivationSignalDetectionConfiguration.all.get_AvailabilityInfo (m_ComRetVal'Access);
         Retval.m_IDetectionConfigurationAvailabilityInfo := new Windows.ApplicationModel.ConversationalAgent.IDetectionConfigurationAvailabilityInfo;
         Retval.m_IDetectionConfigurationAvailabilityInfo.all := m_ComRetVal;
      end return;
   end;

   function add_AvailabilityChanged
   (
      this : in out ActivationSignalDetectionConfiguration;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.add_AvailabilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailabilityChanged
   (
      this : in out ActivationSignalDetectionConfiguration;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.remove_AvailabilityChanged (token);
   end;

   procedure SetModelData
   (
      this : in out ActivationSignalDetectionConfiguration;
      dataType : WinRt.WString;
      data : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_dataType : WinRt.HString := To_HString (dataType);
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.SetModelData (HStr_dataType, data);
      Hr := WindowsDeleteString (HStr_dataType);
   end;

   procedure SetModelDataAsync
   (
      this : in out ActivationSignalDetectionConfiguration;
      dataType : WinRt.WString;
      data : Windows.Storage.Streams.IInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_dataType : WinRt.HString := To_HString (dataType);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.SetModelDataAsync (HStr_dataType, data, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_dataType);
   end;

   function GetModelDataType
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.GetModelDataType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetModelDataTypeAsync
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.GetModelDataTypeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetModelData
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.GetModelData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetModelDataAsync
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IInputStream;
      m_IID            : aliased WinRt.IID := (2835220274, 21869, 22593, (183, 238, 179, 69, 15, 181, 38, 102 )); -- Windows.Storage.Streams.IInputStream;
      m_HandlerIID     : aliased WinRt.IID := (3502047525, 36937, 22435, (189, 102, 226, 82, 93, 152, 200, 20 ));
      m_Handler        : AsyncOperationCompletedHandler_IInputStream.Kind := new AsyncOperationCompletedHandler_IInputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInputStream.Kind_Delegate, AsyncOperationCompletedHandler_IInputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.GetModelDataAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ClearModelData
   (
      this : in out ActivationSignalDetectionConfiguration
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ClearModelData;
   end;

   procedure ClearModelDataAsync
   (
      this : in out ActivationSignalDetectionConfiguration
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ClearModelDataAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_TrainingStepsCompleted
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_TrainingStepsCompleted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrainingStepsRemaining
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_TrainingStepsRemaining (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TrainingDataFormat
   (
      this : in out ActivationSignalDetectionConfiguration
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionTrainingDataFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionTrainingDataFormat;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.get_TrainingDataFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ApplyTrainingData
   (
      this : in out ActivationSignalDetectionConfiguration;
      trainingDataFormat : Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionTrainingDataFormat;
      trainingData : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ApplyTrainingData (trainingDataFormat, trainingData, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ApplyTrainingDataAsync
   (
      this : in out ActivationSignalDetectionConfiguration;
      trainingDataFormat : Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionTrainingDataFormat;
      trainingData : Windows.Storage.Streams.IInputStream
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DetectionConfigurationTrainingStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DetectionConfigurationTrainingStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus;
      m_IID            : aliased WinRt.IID := (1982963719, 37798, 21838, (188, 221, 59, 174, 231, 200, 194, 198 )); -- Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationTrainingStatus;
      m_HandlerIID     : aliased WinRt.IID := (1813191559, 2431, 22885, (132, 213, 150, 76, 82, 177, 120, 126 ));
      m_Handler        : AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus.Kind := new AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DetectionConfigurationTrainingStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus.Kind_Delegate, AsyncOperationCompletedHandler_DetectionConfigurationTrainingStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ApplyTrainingDataAsync (trainingDataFormat, trainingData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ClearTrainingData
   (
      this : in out ActivationSignalDetectionConfiguration
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ClearTrainingData;
   end;

   procedure ClearTrainingDataAsync
   (
      this : in out ActivationSignalDetectionConfiguration
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetectionConfiguration.all.ClearTrainingDataAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivationSignalDetector

   procedure Initialize (this : in out ActivationSignalDetector) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivationSignalDetector) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivationSignalDetector, IActivationSignalDetector_Ptr);
   begin
      if this.m_IActivationSignalDetector /= null then
         if this.m_IActivationSignalDetector.all /= null then
            RefCount := this.m_IActivationSignalDetector.all.Release;
            Free (this.m_IActivationSignalDetector);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivationSignalDetector

   function get_ProviderId
   (
      this : in out ActivationSignalDetector
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_ProviderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out ActivationSignalDetector
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectorKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectorKind;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanCreateConfigurations
   (
      this : in out ActivationSignalDetector
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_CanCreateConfigurations (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedModelDataTypes
   (
      this : in out ActivationSignalDetector
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_SupportedModelDataTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedTrainingDataFormats
   (
      this : in out ActivationSignalDetector
   )
   return IVectorView_ActivationSignalDetectionTrainingDataFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ActivationSignalDetectionTrainingDataFormat.Kind;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_SupportedTrainingDataFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ActivationSignalDetectionTrainingDataFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedPowerStates
   (
      this : in out ActivationSignalDetector
   )
   return IVectorView_ActivationSignalDetectorPowerState.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ActivationSignalDetectorPowerState.Kind;
   begin
      Hr := this.m_IActivationSignalDetector.all.get_SupportedPowerStates (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ActivationSignalDetectorPowerState (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetSupportedModelIdsForSignalId
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
      HStr_signalId : WinRt.HString := To_HString (signalId);
   begin
      Hr := this.m_IActivationSignalDetector.all.GetSupportedModelIdsForSignalId (HStr_signalId, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_signalId);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetSupportedModelIdsForSignalIdAsync
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IActivationSignalDetector.all.GetSupportedModelIdsForSignalIdAsync (HStr_signalId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_signalId);
      return m_RetVal;
   end;

   procedure CreateConfiguration
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString;
      displayName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      Hr := this.m_IActivationSignalDetector.all.CreateConfiguration (HStr_signalId, HStr_modelId, HStr_displayName);
      Hr := WindowsDeleteString (HStr_signalId);
      Hr := WindowsDeleteString (HStr_modelId);
      Hr := WindowsDeleteString (HStr_displayName);
   end;

   procedure CreateConfigurationAsync
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString;
      displayName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
      HStr_displayName : WinRt.HString := To_HString (displayName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetector.all.CreateConfigurationAsync (HStr_signalId, HStr_modelId, HStr_displayName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_signalId);
      Hr := WindowsDeleteString (HStr_modelId);
      Hr := WindowsDeleteString (HStr_displayName);
   end;

   function GetConfigurations
   (
      this : in out ActivationSignalDetector
   )
   return IVectorView_IActivationSignalDetectionConfiguration.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IActivationSignalDetectionConfiguration.Kind;
   begin
      Hr := this.m_IActivationSignalDetector.all.GetConfigurations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IActivationSignalDetectionConfiguration (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetConfigurationsAsync
   (
      this : in out ActivationSignalDetector
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3959604325, 9879, 24166, (184, 103, 20, 17, 221, 125, 87, 167 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (913896459, 15163, 21403, (139, 124, 111, 58, 178, 87, 251, 117 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IActivationSignalDetector.all.GetConfigurationsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetConfiguration
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionConfiguration do
         Hr := this.m_IActivationSignalDetector.all.GetConfiguration (HStr_signalId, HStr_modelId, m_ComRetVal'Access);
         Retval.m_IActivationSignalDetectionConfiguration := new Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration;
         Retval.m_IActivationSignalDetectionConfiguration.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_signalId);
         Hr := WindowsDeleteString (HStr_modelId);
      end return;
   end;

   function GetConfigurationAsync
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ActivationSignalDetectionConfiguration.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ActivationSignalDetectionConfiguration.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration;
      m_IID            : aliased WinRt.IID := (1967934161, 38882, 21571, (133, 88, 93, 157, 83, 5, 208, 27 )); -- Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionConfiguration;
      m_HandlerIID     : aliased WinRt.IID := (4072888290, 45896, 21585, (130, 163, 240, 0, 72, 195, 162, 23 ));
      m_Handler        : AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration.Kind := new AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ActivationSignalDetectionConfiguration.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration.Kind_Delegate, AsyncOperationCompletedHandler_ActivationSignalDetectionConfiguration.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectionConfiguration do
         Hr := this.m_IActivationSignalDetector.all.GetConfigurationAsync (HStr_signalId, HStr_modelId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IActivationSignalDetectionConfiguration := new Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration;
                  Retval.m_IActivationSignalDetectionConfiguration.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_signalId);
         Hr := WindowsDeleteString (HStr_modelId);
      end return;
   end;

   procedure RemoveConfiguration
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
   begin
      Hr := this.m_IActivationSignalDetector.all.RemoveConfiguration (HStr_signalId, HStr_modelId);
      Hr := WindowsDeleteString (HStr_signalId);
      Hr := WindowsDeleteString (HStr_modelId);
   end;

   procedure RemoveConfigurationAsync
   (
      this : in out ActivationSignalDetector;
      signalId : WinRt.WString;
      modelId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_signalId : WinRt.HString := To_HString (signalId);
      HStr_modelId : WinRt.HString := To_HString (modelId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IActivationSignalDetector.all.RemoveConfigurationAsync (HStr_signalId, HStr_modelId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_signalId);
      Hr := WindowsDeleteString (HStr_modelId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentDetectorManager

   procedure Initialize (this : in out ConversationalAgentDetectorManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentDetectorManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentDetectorManager, IConversationalAgentDetectorManager_Ptr);
   begin
      if this.m_IConversationalAgentDetectorManager /= null then
         if this.m_IConversationalAgentDetectorManager.all /= null then
            RefCount := this.m_IConversationalAgentDetectorManager.all.Release;
            Free (this.m_IConversationalAgentDetectorManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ConversationalAgentDetectorManager

   function get_Default
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentDetectorManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.ConversationalAgent.ConversationalAgentDetectorManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentDetectorManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.IConversationalAgentDetectorManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentDetectorManager do
         Hr := RoGetActivationFactory (m_hString, IID_IConversationalAgentDetectorManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Default (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IConversationalAgentDetectorManager := new Windows.ApplicationModel.ConversationalAgent.IConversationalAgentDetectorManager;
            Retval.m_IConversationalAgentDetectorManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentDetectorManager

   function GetAllActivationSignalDetectors
   (
      this : in out ConversationalAgentDetectorManager
   )
   return IVectorView_IActivationSignalDetector.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IActivationSignalDetector.Kind;
   begin
      Hr := this.m_IConversationalAgentDetectorManager.all.GetAllActivationSignalDetectors (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IActivationSignalDetector (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetAllActivationSignalDetectorsAsync
   (
      this : in out ConversationalAgentDetectorManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3972112693, 43173, 20921, (142, 26, 99, 64, 217, 245, 108, 174 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (247988659, 17460, 23922, (154, 18, 146, 110, 217, 23, 56, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentDetectorManager.all.GetAllActivationSignalDetectorsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetActivationSignalDetectors
   (
      this : in out ConversationalAgentDetectorManager;
      kind : Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectorKind
   )
   return IVectorView_IActivationSignalDetector.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IActivationSignalDetector.Kind;
   begin
      Hr := this.m_IConversationalAgentDetectorManager.all.GetActivationSignalDetectors (kind, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IActivationSignalDetector (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetActivationSignalDetectorsAsync
   (
      this : in out ConversationalAgentDetectorManager;
      kind : Windows.ApplicationModel.ConversationalAgent.ActivationSignalDetectorKind
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3972112693, 43173, 20921, (142, 26, 99, 64, 217, 245, 108, 174 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (247988659, 17460, 23922, (154, 18, 146, 110, 217, 23, 56, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentDetectorManager.all.GetActivationSignalDetectorsAsync (kind, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentSession

   procedure Initialize (this : in out ConversationalAgentSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentSession, IConversationalAgentSession_Ptr);
   begin
      if this.m_IConversationalAgentSession /= null then
         if this.m_IConversationalAgentSession.all /= null then
            RefCount := this.m_IConversationalAgentSession.all.Release;
            Free (this.m_IConversationalAgentSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ConversationalAgentSession

   function GetCurrentSessionAsync
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession");
      m_Factory        : access WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConversationalAgentSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConversationalAgentSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession;
      m_IID            : aliased WinRt.IID := (1367547401, 28561, 22960, (130, 13, 96, 185, 119, 117, 197, 117 )); -- Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession;
      m_HandlerIID     : aliased WinRt.IID := (125474465, 31026, 23987, (165, 3, 52, 163, 5, 113, 243, 242 ));
      m_Handler        : AsyncOperationCompletedHandler_ConversationalAgentSession.Kind := new AsyncOperationCompletedHandler_ConversationalAgentSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConversationalAgentSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConversationalAgentSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConversationalAgentSession.Kind_Delegate, AsyncOperationCompletedHandler_ConversationalAgentSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession do
         Hr := RoGetActivationFactory (m_hString, IID_IConversationalAgentSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetCurrentSessionAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IConversationalAgentSession := new Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession;
                     Retval.m_IConversationalAgentSession.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetCurrentSessionSync
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession");
      m_Factory        : access WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession do
         Hr := RoGetActivationFactory (m_hString, IID_IConversationalAgentSessionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetCurrentSessionSync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IConversationalAgentSession := new Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession;
            Retval.m_IConversationalAgentSession.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentSession

   function add_SessionInterrupted
   (
      this : in out ConversationalAgentSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IConversationalAgentSession.all.add_SessionInterrupted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SessionInterrupted
   (
      this : in out ConversationalAgentSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSession.all.remove_SessionInterrupted (token);
   end;

   function add_SignalDetected
   (
      this : in out ConversationalAgentSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IConversationalAgentSession.all.add_SignalDetected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SignalDetected
   (
      this : in out ConversationalAgentSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSession.all.remove_SignalDetected (token);
   end;

   function add_SystemStateChanged
   (
      this : in out ConversationalAgentSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IConversationalAgentSession.all.add_SystemStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SystemStateChanged
   (
      this : in out ConversationalAgentSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSession.all.remove_SystemStateChanged (token);
   end;

   function get_AgentState
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_AgentState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Signal
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignal'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignal;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignal do
         Hr := this.m_IConversationalAgentSession.all.get_Signal (m_ComRetVal'Access);
         Retval.m_IConversationalAgentSignal := new Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignal;
         Retval.m_IConversationalAgentSignal.all := m_ComRetVal;
      end return;
   end;

   function get_IsIndicatorLightAvailable
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsIndicatorLightAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsScreenAvailable
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsScreenAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsUserAuthenticated
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsUserAuthenticated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVoiceActivationAvailable
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsVoiceActivationAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsInterruptible
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsInterruptible (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsInterrupted
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.get_IsInterrupted (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestInterruptibleAsync
   (
      this : in out ConversationalAgentSession;
      interruptible : WinRt.Boolean
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_IID            : aliased WinRt.IID := (1267042427, 32880, 24313, (170, 200, 146, 81, 82, 87, 6, 30 )); -- Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_HandlerIID     : aliased WinRt.IID := (1866680186, 453, 23010, (150, 226, 29, 154, 0, 64, 145, 89 ));
      m_Handler        : AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind := new AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate, AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.RequestInterruptibleAsync (interruptible, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestInterruptible
   (
      this : in out ConversationalAgentSession;
      interruptible : WinRt.Boolean
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
   begin
      Hr := this.m_IConversationalAgentSession.all.RequestInterruptible (interruptible, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestAgentStateChangeAsync
   (
      this : in out ConversationalAgentSession;
      state : Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_IID            : aliased WinRt.IID := (1267042427, 32880, 24313, (170, 200, 146, 81, 82, 87, 6, 30 )); -- Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_HandlerIID     : aliased WinRt.IID := (1866680186, 453, 23010, (150, 226, 29, 154, 0, 64, 145, 89 ));
      m_Handler        : AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind := new AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate, AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.RequestAgentStateChangeAsync (state, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestAgentStateChange
   (
      this : in out ConversationalAgentSession;
      state : Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
   begin
      Hr := this.m_IConversationalAgentSession.all.RequestAgentStateChange (state, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function RequestForegroundActivationAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_IID            : aliased WinRt.IID := (1267042427, 32880, 24313, (170, 200, 146, 81, 82, 87, 6, 30 )); -- Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
      m_HandlerIID     : aliased WinRt.IID := (1866680186, 453, 23010, (150, 226, 29, 154, 0, 64, 145, 89 ));
      m_Handler        : AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind := new AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ConversationalAgentSessionUpdateResponse.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind_Delegate, AsyncOperationCompletedHandler_ConversationalAgentSessionUpdateResponse.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.RequestForegroundActivationAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestForegroundActivation
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse;
   begin
      Hr := this.m_IConversationalAgentSession.all.RequestForegroundActivation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetAudioClientAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IInspectable.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IInspectable.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.IInspectable;
      m_IID            : aliased WinRt.IID := (2884975703, 61008, 21314, (181, 42, 38, 227, 184, 204, 2, 79 )); -- IInspectable;
      m_HandlerIID     : aliased WinRt.IID := (1057498670, 41697, 20788, (146, 151, 233, 33, 31, 72, 26, 45 ));
      m_Handler        : AsyncOperationCompletedHandler_IInspectable.Kind := new AsyncOperationCompletedHandler_IInspectable.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IInspectable.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IInspectable.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IInspectable.Kind_Delegate, AsyncOperationCompletedHandler_IInspectable.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioClientAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAudioClient
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioClient (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CreateAudioDeviceInputNodeAsync
   (
      this : in out ConversationalAgentSession;
      graph : Windows.Media.Audio.AudioGraph'Class
   )
   return WinRt.Windows.Media.Audio.AudioDeviceInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AudioDeviceInputNode.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AudioDeviceInputNode.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Audio.IAudioDeviceInputNode;
      m_IID            : aliased WinRt.IID := (3490298315, 59841, 23949, (149, 117, 195, 58, 194, 108, 228, 74 )); -- Windows.Media.Audio.AudioDeviceInputNode;
      m_HandlerIID     : aliased WinRt.IID := (431052909, 56189, 21992, (151, 41, 34, 86, 189, 153, 132, 212 ));
      m_Handler        : AsyncOperationCompletedHandler_AudioDeviceInputNode.Kind := new AsyncOperationCompletedHandler_AudioDeviceInputNode.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AudioDeviceInputNode.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AudioDeviceInputNode.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AudioDeviceInputNode.Kind_Delegate, AsyncOperationCompletedHandler_AudioDeviceInputNode.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioDeviceInputNode do
         Hr := this.m_IConversationalAgentSession.all.CreateAudioDeviceInputNodeAsync (graph.m_IAudioGraph.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAudioDeviceInputNode := new Windows.Media.Audio.IAudioDeviceInputNode;
                  Retval.m_IAudioDeviceInputNode.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateAudioDeviceInputNode
   (
      this : in out ConversationalAgentSession;
      graph : Windows.Media.Audio.AudioGraph'Class
   )
   return WinRt.Windows.Media.Audio.AudioDeviceInputNode'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Audio.IAudioDeviceInputNode;
   begin
      return RetVal : WinRt.Windows.Media.Audio.AudioDeviceInputNode do
         Hr := this.m_IConversationalAgentSession.all.CreateAudioDeviceInputNode (graph.m_IAudioGraph.all, m_ComRetVal'Access);
         Retval.m_IAudioDeviceInputNode := new Windows.Media.Audio.IAudioDeviceInputNode;
         Retval.m_IAudioDeviceInputNode.all := m_ComRetVal;
      end return;
   end;

   function GetAudioCaptureDeviceIdAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioCaptureDeviceIdAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetAudioCaptureDeviceId
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioCaptureDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetAudioRenderDeviceIdAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioRenderDeviceIdAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetAudioRenderDeviceId
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IConversationalAgentSession.all.GetAudioRenderDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetSignalModelIdAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.GetSignalModelIdAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetSignalModelId
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IConversationalAgentSession.all.GetSignalModelId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function SetSignalModelIdAsync
   (
      this : in out ConversationalAgentSession;
      signalModelId : WinRt.UInt32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.SetSignalModelIdAsync (signalModelId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SetSignalModelId
   (
      this : in out ConversationalAgentSession;
      signalModelId : WinRt.UInt32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSession.all.SetSignalModelId (signalModelId, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetSupportedSignalModelIdsAsync
   (
      this : in out ConversationalAgentSession
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (1388670780, 28986, 20834, (158, 98, 54, 44, 231, 237, 83, 190 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1433874217, 55908, 23687, (135, 28, 7, 67, 55, 168, 69, 115 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IConversationalAgentSession.all.GetSupportedSignalModelIdsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetSupportedSignalModelIds
   (
      this : in out ConversationalAgentSession
   )
   return IVectorView_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_UInt32.Kind;
   begin
      Hr := this.m_IConversationalAgentSession.all.GetSupportedSignalModelIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Close
   (
      this : in out ConversationalAgentSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IConversationalAgentSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentSessionInterruptedEventArgs

   procedure Initialize (this : in out ConversationalAgentSessionInterruptedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentSessionInterruptedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentSessionInterruptedEventArgs, IConversationalAgentSessionInterruptedEventArgs_Ptr);
   begin
      if this.m_IConversationalAgentSessionInterruptedEventArgs /= null then
         if this.m_IConversationalAgentSessionInterruptedEventArgs.all /= null then
            RefCount := this.m_IConversationalAgentSessionInterruptedEventArgs.all.Release;
            Free (this.m_IConversationalAgentSessionInterruptedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentSessionInterruptedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentSignal

   procedure Initialize (this : in out ConversationalAgentSignal) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentSignal) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentSignal, IConversationalAgentSignal_Ptr);
   begin
      if this.m_IConversationalAgentSignal /= null then
         if this.m_IConversationalAgentSignal.all /= null then
            RefCount := this.m_IConversationalAgentSignal.all.Release;
            Free (this.m_IConversationalAgentSignal);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentSignal

   function get_IsSignalVerificationRequired
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_IsSignalVerificationRequired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSignalVerificationRequired
   (
      this : in out ConversationalAgentSignal;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_IsSignalVerificationRequired (value);
   end;

   function get_SignalId
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_SignalId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SignalId
   (
      this : in out ConversationalAgentSignal;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_SignalId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SignalName
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_SignalName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SignalName
   (
      this : in out ConversationalAgentSignal;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_SignalName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SignalContext
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_SignalContext (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SignalContext
   (
      this : in out ConversationalAgentSignal;
      value : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_SignalContext (value);
   end;

   function get_SignalStart
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_SignalStart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SignalStart
   (
      this : in out ConversationalAgentSignal;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_SignalStart (value);
   end;

   function get_SignalEnd
   (
      this : in out ConversationalAgentSignal
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IConversationalAgentSignal.all.get_SignalEnd (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SignalEnd
   (
      this : in out ConversationalAgentSignal;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IConversationalAgentSignal.all.put_SignalEnd (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentSignalDetectedEventArgs

   procedure Initialize (this : in out ConversationalAgentSignalDetectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentSignalDetectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentSignalDetectedEventArgs, IConversationalAgentSignalDetectedEventArgs_Ptr);
   begin
      if this.m_IConversationalAgentSignalDetectedEventArgs /= null then
         if this.m_IConversationalAgentSignalDetectedEventArgs.all /= null then
            RefCount := this.m_IConversationalAgentSignalDetectedEventArgs.all.Release;
            Free (this.m_IConversationalAgentSignalDetectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentSignalDetectedEventArgs

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentSystemStateChangedEventArgs

   procedure Initialize (this : in out ConversationalAgentSystemStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentSystemStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IConversationalAgentSystemStateChangedEventArgs, IConversationalAgentSystemStateChangedEventArgs_Ptr);
   begin
      if this.m_IConversationalAgentSystemStateChangedEventArgs /= null then
         if this.m_IConversationalAgentSystemStateChangedEventArgs.all /= null then
            RefCount := this.m_IConversationalAgentSystemStateChangedEventArgs.all.Release;
            Free (this.m_IConversationalAgentSystemStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentSystemStateChangedEventArgs

   function get_SystemStateChangeType
   (
      this : in out ConversationalAgentSystemStateChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangeType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangeType;
   begin
      Hr := this.m_IConversationalAgentSystemStateChangedEventArgs.all.get_SystemStateChangeType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DetectionConfigurationAvailabilityChangedEventArgs

   procedure Initialize (this : in out DetectionConfigurationAvailabilityChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DetectionConfigurationAvailabilityChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDetectionConfigurationAvailabilityChangedEventArgs, IDetectionConfigurationAvailabilityChangedEventArgs_Ptr);
   begin
      if this.m_IDetectionConfigurationAvailabilityChangedEventArgs /= null then
         if this.m_IDetectionConfigurationAvailabilityChangedEventArgs.all /= null then
            RefCount := this.m_IDetectionConfigurationAvailabilityChangedEventArgs.all.Release;
            Free (this.m_IDetectionConfigurationAvailabilityChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DetectionConfigurationAvailabilityChangedEventArgs

   function get_Kind
   (
      this : in out DetectionConfigurationAvailabilityChangedEventArgs
   )
   return WinRt.Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationAvailabilityChangeKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.ConversationalAgent.DetectionConfigurationAvailabilityChangeKind;
   begin
      Hr := this.m_IDetectionConfigurationAvailabilityChangedEventArgs.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DetectionConfigurationAvailabilityInfo

   procedure Initialize (this : in out DetectionConfigurationAvailabilityInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out DetectionConfigurationAvailabilityInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDetectionConfigurationAvailabilityInfo, IDetectionConfigurationAvailabilityInfo_Ptr);
   begin
      if this.m_IDetectionConfigurationAvailabilityInfo /= null then
         if this.m_IDetectionConfigurationAvailabilityInfo.all /= null then
            RefCount := this.m_IDetectionConfigurationAvailabilityInfo.all.Release;
            Free (this.m_IDetectionConfigurationAvailabilityInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DetectionConfigurationAvailabilityInfo

   function get_IsEnabled
   (
      this : in out DetectionConfigurationAvailabilityInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDetectionConfigurationAvailabilityInfo.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasSystemResourceAccess
   (
      this : in out DetectionConfigurationAvailabilityInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDetectionConfigurationAvailabilityInfo.all.get_HasSystemResourceAccess (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasPermission
   (
      this : in out DetectionConfigurationAvailabilityInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDetectionConfigurationAvailabilityInfo.all.get_HasPermission (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasLockScreenPermission
   (
      this : in out DetectionConfigurationAvailabilityInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDetectionConfigurationAvailabilityInfo.all.get_HasLockScreenPermission (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

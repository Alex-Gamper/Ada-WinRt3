--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Text is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentLinkInfo

   procedure Initialize (this : in out ContentLinkInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentLinkInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentLinkInfo, IContentLinkInfo_Ptr);
   begin
      if this.m_IContentLinkInfo /= null then
         if this.m_IContentLinkInfo.all /= null then
            RefCount := this.m_IContentLinkInfo.all.Release;
            Free (this.m_IContentLinkInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContentLinkInfo

   function Constructor return ContentLinkInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Text.ContentLinkInfo");
      m_ComRetVal  : aliased Windows.UI.Text.IContentLinkInfo;
   begin
      return RetVal : ContentLinkInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContentLinkInfo := new Windows.UI.Text.IContentLinkInfo;
            Retval.m_IContentLinkInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentLinkInfo

   function get_Id
   (
      this : in out ContentLinkInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IContentLinkInfo.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Id
   (
      this : in out ContentLinkInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLinkInfo.all.put_Id (value);
   end;

   function get_DisplayText
   (
      this : in out ContentLinkInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContentLinkInfo.all.get_DisplayText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayText
   (
      this : in out ContentLinkInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContentLinkInfo.all.put_DisplayText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SecondaryText
   (
      this : in out ContentLinkInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContentLinkInfo.all.get_SecondaryText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SecondaryText
   (
      this : in out ContentLinkInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContentLinkInfo.all.put_SecondaryText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Uri
   (
      this : in out ContentLinkInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IContentLinkInfo.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_Uri
   (
      this : in out ContentLinkInfo;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContentLinkInfo.all.put_Uri (value.m_IUriRuntimeClass.all);
   end;

   function get_LinkContentKind
   (
      this : in out ContentLinkInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContentLinkInfo.all.get_LinkContentKind (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LinkContentKind
   (
      this : in out ContentLinkInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IContentLinkInfo.all.put_LinkContentKind (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FontWeights

   procedure Initialize (this : in out FontWeights) is
   begin
      null;
   end;

   procedure Finalize (this : in out FontWeights) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFontWeights, IFontWeights_Ptr);
   begin
      if this.m_IFontWeights /= null then
         if this.m_IFontWeights.all /= null then
            RefCount := this.m_IFontWeights.all.Release;
            Free (this.m_IFontWeights);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FontWeights

   function get_Black
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Black (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Bold
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Bold (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_ExtraBlack
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_ExtraBlack (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_ExtraBold
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_ExtraBold (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_ExtraLight
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_ExtraLight (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Light
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Light (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Medium
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Medium (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Normal
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Normal (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SemiBold
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SemiBold (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SemiLight
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SemiLight (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Thin
   return WinRt.Windows.UI.Text.FontWeight is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.FontWeights");
      m_Factory        : access WinRt.Windows.UI.Text.IFontWeightsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.FontWeight;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFontWeightsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Thin (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FontWeights

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RichEditTextDocument

   procedure Initialize (this : in out RichEditTextDocument) is
   begin
      null;
   end;

   procedure Finalize (this : in out RichEditTextDocument) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextDocument, ITextDocument_Ptr);
   begin
      if this.m_ITextDocument /= null then
         if this.m_ITextDocument.all /= null then
            RefCount := this.m_ITextDocument.all.Release;
            Free (this.m_ITextDocument);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RichEditTextDocument

   function get_AlignmentIncludesTrailingWhitespace
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument2, WinRt.Windows.UI.Text.IID_ITextDocument2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.get_AlignmentIncludesTrailingWhitespace (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlignmentIncludesTrailingWhitespace
   (
      this : in out RichEditTextDocument;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument2, WinRt.Windows.UI.Text.IID_ITextDocument2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.put_AlignmentIncludesTrailingWhitespace (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IgnoreTrailingCharacterSpacing
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument2, WinRt.Windows.UI.Text.IID_ITextDocument2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.get_IgnoreTrailingCharacterSpacing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IgnoreTrailingCharacterSpacing
   (
      this : in out RichEditTextDocument;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument2, WinRt.Windows.UI.Text.IID_ITextDocument2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.put_IgnoreTrailingCharacterSpacing (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure ClearUndoRedoHistory
   (
      this : in out RichEditTextDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument3, WinRt.Windows.UI.Text.IID_ITextDocument3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.ClearUndoRedoHistory;
      m_RefCount := m_Interface.Release;
   end;

   procedure SetMath
   (
      this : in out RichEditTextDocument;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument4, WinRt.Windows.UI.Text.IID_ITextDocument4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.SetMath (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure GetMath
   (
      this : in out RichEditTextDocument;
      value : WinRt.HString_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument4, WinRt.Windows.UI.Text.IID_ITextDocument4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.GetMath (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetMathMode
   (
      this : in out RichEditTextDocument;
      mode : Windows.UI.Text.RichEditMathMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.ITextDocument4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextDocument_Interface, WinRt.Windows.UI.Text.ITextDocument4, WinRt.Windows.UI.Text.IID_ITextDocument4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextDocument.all);
      Hr := m_Interface.SetMathMode (mode);
      m_RefCount := m_Interface.Release;
   end;

   function get_CaretType
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Windows.UI.Text.CaretType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.CaretType;
   begin
      Hr := this.m_ITextDocument.all.get_CaretType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CaretType
   (
      this : in out RichEditTextDocument;
      value : Windows.UI.Text.CaretType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.put_CaretType (value);
   end;

   function get_DefaultTabStop
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ITextDocument.all.get_DefaultTabStop (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DefaultTabStop
   (
      this : in out RichEditTextDocument;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.put_DefaultTabStop (value);
   end;

   function get_Selection
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Windows.UI.Text.ITextSelection is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextSelection;
   begin
      Hr := this.m_ITextDocument.all.get_Selection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UndoLimit
   (
      this : in out RichEditTextDocument
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITextDocument.all.get_UndoLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UndoLimit
   (
      this : in out RichEditTextDocument;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.put_UndoLimit (value);
   end;

   function CanCopy
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextDocument.all.CanCopy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CanPaste
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextDocument.all.CanPaste (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CanRedo
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextDocument.all.CanRedo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function CanUndo
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextDocument.all.CanUndo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ApplyDisplayUpdates
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextDocument.all.ApplyDisplayUpdates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function BatchDisplayUpdates
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextDocument.all.BatchDisplayUpdates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure BeginUndoGroup
   (
      this : in out RichEditTextDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.BeginUndoGroup;
   end;

   procedure EndUndoGroup
   (
      this : in out RichEditTextDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.EndUndoGroup;
   end;

   function GetDefaultCharacterFormat
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Windows.UI.Text.ITextCharacterFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextCharacterFormat;
   begin
      Hr := this.m_ITextDocument.all.GetDefaultCharacterFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDefaultParagraphFormat
   (
      this : in out RichEditTextDocument
   )
   return WinRt.Windows.UI.Text.ITextParagraphFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextParagraphFormat;
   begin
      Hr := this.m_ITextDocument.all.GetDefaultParagraphFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetRange
   (
      this : in out RichEditTextDocument;
      startPosition : WinRt.Int32;
      endPosition : WinRt.Int32
   )
   return WinRt.Windows.UI.Text.ITextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextRange;
   begin
      Hr := this.m_ITextDocument.all.GetRange (startPosition, endPosition, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetRangeFromPoint
   (
      this : in out RichEditTextDocument;
      point : Windows.Foundation.Point;
      options : Windows.UI.Text.PointOptions
   )
   return WinRt.Windows.UI.Text.ITextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextRange;
   begin
      Hr := this.m_ITextDocument.all.GetRangeFromPoint (point, options, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetText
   (
      this : in out RichEditTextDocument;
      options : Windows.UI.Text.TextGetOptions;
      value : WinRt.HString_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.GetText (options, value);
   end;

   procedure LoadFromStream
   (
      this : in out RichEditTextDocument;
      options : Windows.UI.Text.TextSetOptions;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.LoadFromStream (options, value);
   end;

   procedure Redo
   (
      this : in out RichEditTextDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.Redo;
   end;

   procedure SaveToStream
   (
      this : in out RichEditTextDocument;
      options : Windows.UI.Text.TextGetOptions;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.SaveToStream (options, value);
   end;

   procedure SetDefaultCharacterFormat
   (
      this : in out RichEditTextDocument;
      value : Windows.UI.Text.ITextCharacterFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.SetDefaultCharacterFormat (value);
   end;

   procedure SetDefaultParagraphFormat
   (
      this : in out RichEditTextDocument;
      value : Windows.UI.Text.ITextParagraphFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.SetDefaultParagraphFormat (value);
   end;

   procedure SetText
   (
      this : in out RichEditTextDocument;
      options : Windows.UI.Text.TextSetOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextDocument.all.SetText (options, HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure Undo
   (
      this : in out RichEditTextDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextDocument.all.Undo;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RichEditTextRange

   procedure Initialize (this : in out RichEditTextRange) is
   begin
      null;
   end;

   procedure Finalize (this : in out RichEditTextRange) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITextRange, ITextRange_Ptr);
   begin
      if this.m_ITextRange /= null then
         if this.m_ITextRange.all /= null then
            RefCount := this.m_ITextRange.all.Release;
            Free (this.m_ITextRange);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RichEditTextRange

   function get_ContentLinkInfo
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.ContentLinkInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.IRichEditTextRange := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.IContentLinkInfo;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextRange_Interface, WinRt.Windows.UI.Text.IRichEditTextRange, WinRt.Windows.UI.Text.IID_IRichEditTextRange'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.UI.Text.ContentLinkInfo do
         m_Interface := QInterface (this.m_ITextRange.all);
         Hr := m_Interface.get_ContentLinkInfo (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContentLinkInfo := new Windows.UI.Text.IContentLinkInfo;
         Retval.m_IContentLinkInfo.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentLinkInfo
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.ContentLinkInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.UI.Text.IRichEditTextRange := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.UI.Text.ITextRange_Interface, WinRt.Windows.UI.Text.IRichEditTextRange, WinRt.Windows.UI.Text.IID_IRichEditTextRange'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITextRange.all);
      Hr := m_Interface.put_ContentLinkInfo (value.m_IContentLinkInfo.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_Character
   (
      this : in out RichEditTextRange
   )
   return WinRt.Wide_Char is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Wide_Char;
   begin
      Hr := this.m_ITextRange.all.get_Character (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Character
   (
      this : in out RichEditTextRange;
      value : WinRt.Wide_Char
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_Character (value);
   end;

   function get_CharacterFormat
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.ITextCharacterFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextCharacterFormat;
   begin
      Hr := this.m_ITextRange.all.get_CharacterFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CharacterFormat
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.ITextCharacterFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_CharacterFormat (value);
   end;

   function get_FormattedText
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.ITextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextRange;
   begin
      Hr := this.m_ITextRange.all.get_FormattedText (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_FormattedText
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.ITextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_FormattedText (value);
   end;

   function get_EndPosition
   (
      this : in out RichEditTextRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.get_EndPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_EndPosition
   (
      this : in out RichEditTextRange;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_EndPosition (value);
   end;

   function get_Gravity
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.RangeGravity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.RangeGravity;
   begin
      Hr := this.m_ITextRange.all.get_Gravity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gravity
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.RangeGravity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_Gravity (value);
   end;

   function get_Length
   (
      this : in out RichEditTextRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Link
   (
      this : in out RichEditTextRange
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITextRange.all.get_Link (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Link
   (
      this : in out RichEditTextRange;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextRange.all.put_Link (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ParagraphFormat
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.ITextParagraphFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextParagraphFormat;
   begin
      Hr := this.m_ITextRange.all.get_ParagraphFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ParagraphFormat
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.ITextParagraphFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_ParagraphFormat (value);
   end;

   function get_StartPosition
   (
      this : in out RichEditTextRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.get_StartPosition (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_StartPosition
   (
      this : in out RichEditTextRange;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.put_StartPosition (value);
   end;

   function get_StoryLength
   (
      this : in out RichEditTextRange
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.get_StoryLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out RichEditTextRange
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITextRange.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Text
   (
      this : in out RichEditTextRange;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextRange.all.put_Text (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function CanPaste
   (
      this : in out RichEditTextRange;
      format : WinRt.Int32
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextRange.all.CanPaste (format, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ChangeCase
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.LetterCase
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.ChangeCase (value);
   end;

   procedure Collapse
   (
      this : in out RichEditTextRange;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.Collapse (value);
   end;

   procedure Copy
   (
      this : in out RichEditTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.Copy;
   end;

   procedure Cut
   (
      this : in out RichEditTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.Cut;
   end;

   function Delete
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      count : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.Delete (unit, count, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function EndOf
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      extend : WinRt.Boolean
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.EndOf (unit, extend, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Expand
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.Expand (unit, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function FindText
   (
      this : in out RichEditTextRange;
      value : WinRt.WString;
      scanLength : WinRt.Int32;
      options : Windows.UI.Text.FindOptions
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextRange.all.FindText (HStr_value, scanLength, options, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   procedure GetCharacterUtf32
   (
      this : in out RichEditTextRange;
      value : WinRt.UInt32_Ptr;
      offset : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.GetCharacterUtf32 (value, offset);
   end;

   function GetClone
   (
      this : in out RichEditTextRange
   )
   return WinRt.Windows.UI.Text.ITextRange is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Text.ITextRange;
   begin
      Hr := this.m_ITextRange.all.GetClone (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetIndex
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.GetIndex (unit, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure GetPoint
   (
      this : in out RichEditTextRange;
      horizontalAlign : Windows.UI.Text.HorizontalCharacterAlignment;
      verticalAlign : Windows.UI.Text.VerticalCharacterAlignment;
      options : Windows.UI.Text.PointOptions;
      point : Windows.Foundation.Point_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.GetPoint (horizontalAlign, verticalAlign, options, point);
   end;

   procedure GetRect
   (
      this : in out RichEditTextRange;
      options : Windows.UI.Text.PointOptions;
      rect : Windows.Foundation.Rect_Ptr;
      hit : WinRt.Int32_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.GetRect (options, rect, hit);
   end;

   procedure GetText
   (
      this : in out RichEditTextRange;
      options : Windows.UI.Text.TextGetOptions;
      value : WinRt.HString_Ptr
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.GetText (options, value);
   end;

   procedure GetTextViaStream
   (
      this : in out RichEditTextRange;
      options : Windows.UI.Text.TextGetOptions;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.GetTextViaStream (options, value);
   end;

   function InRange
   (
      this : in out RichEditTextRange;
      range_x : Windows.UI.Text.ITextRange
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextRange.all.InRange (range_x, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure InsertImage
   (
      this : in out RichEditTextRange;
      width : WinRt.Int32;
      height : WinRt.Int32;
      ascent : WinRt.Int32;
      verticalAlign : Windows.UI.Text.VerticalCharacterAlignment;
      alternateText : WinRt.WString;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_alternateText : WinRt.HString := To_HString (alternateText);
   begin
      Hr := this.m_ITextRange.all.InsertImage (width, height, ascent, verticalAlign, HStr_alternateText, value);
      Hr := WindowsDeleteString (HStr_alternateText);
   end;

   function InStory
   (
      this : in out RichEditTextRange;
      range_x : Windows.UI.Text.ITextRange
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextRange.all.InStory (range_x, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsEqual
   (
      this : in out RichEditTextRange;
      range_x : Windows.UI.Text.ITextRange
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITextRange.all.IsEqual (range_x, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function Move
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      count : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.Move (unit, count, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function MoveEnd
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      count : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.MoveEnd (unit, count, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function MoveStart
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      count : WinRt.Int32
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.MoveStart (unit, count, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Paste
   (
      this : in out RichEditTextRange;
      format : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.Paste (format);
   end;

   procedure ScrollIntoView
   (
      this : in out RichEditTextRange;
      value : Windows.UI.Text.PointOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.ScrollIntoView (value);
   end;

   procedure MatchSelection
   (
      this : in out RichEditTextRange
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.MatchSelection;
   end;

   procedure SetIndex
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      index : WinRt.Int32;
      extend : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.SetIndex (unit, index, extend);
   end;

   procedure SetPoint
   (
      this : in out RichEditTextRange;
      point : Windows.Foundation.Point;
      options : Windows.UI.Text.PointOptions;
      extend : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.SetPoint (point, options, extend);
   end;

   procedure SetRange
   (
      this : in out RichEditTextRange;
      startPosition : WinRt.Int32;
      endPosition : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.SetRange (startPosition, endPosition);
   end;

   procedure SetText
   (
      this : in out RichEditTextRange;
      options : Windows.UI.Text.TextSetOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ITextRange.all.SetText (options, HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure SetTextViaStream
   (
      this : in out RichEditTextRange;
      options : Windows.UI.Text.TextSetOptions;
      value : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITextRange.all.SetTextViaStream (options, value);
   end;

   function StartOf
   (
      this : in out RichEditTextRange;
      unit : Windows.UI.Text.TextRangeUnit;
      extend : WinRt.Boolean
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ITextRange.all.StartOf (unit, extend, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body TextConstants is

      function get_AutoColor
      return WinRt.Windows.UI.Color is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Color;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AutoColor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MinUnitCount
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MinUnitCount (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MaxUnitCount
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MaxUnitCount (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UndefinedColor
      return WinRt.Windows.UI.Color is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Color;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UndefinedColor (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UndefinedFloatValue
      return WinRt.Single is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Single;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UndefinedFloatValue (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UndefinedInt32Value
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UndefinedInt32Value (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UndefinedFontStretch
      return WinRt.Windows.UI.Text.FontStretch is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Text.FontStretch;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UndefinedFontStretch (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_UndefinedFontStyle
      return WinRt.Windows.UI.Text.FontStyle is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.UI.Text.TextConstants");
         m_Factory        : access WinRt.Windows.UI.Text.ITextConstantsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.UI.Text.FontStyle;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ITextConstantsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_UndefinedFontStyle (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end TextConstants;

end;

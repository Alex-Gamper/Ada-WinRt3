--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Payments is

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_PaymentRequestSubmitResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult);
   package AsyncOperationCompletedHandler_PaymentRequestSubmitResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult);

   package IAsyncOperation_PaymentCanMakePaymentResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult);
   package AsyncOperationCompletedHandler_PaymentCanMakePaymentResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentAddress

   procedure Initialize (this : in out PaymentAddress) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentAddress) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentAddress, IPaymentAddress_Ptr);
   begin
      if this.m_IPaymentAddress /= null then
         if this.m_IPaymentAddress.all /= null then
            RefCount := this.m_IPaymentAddress.all.Release;
            Free (this.m_IPaymentAddress);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentAddress

   function Constructor return PaymentAddress is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentAddress");
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentAddress;
   begin
      return RetVal : PaymentAddress do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaymentAddress := new Windows.ApplicationModel.Payments.IPaymentAddress;
            Retval.m_IPaymentAddress.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentAddress

   function get_Country
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_Country (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Country
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_Country (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AddressLines
   (
      this : in out PaymentAddress
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPaymentAddress.all.get_AddressLines (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_AddressLines
   (
      this : in out PaymentAddress;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentAddress.all.put_AddressLines (value);
   end;

   function get_Region
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_Region (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Region
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_Region (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_City
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_City (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_City
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_City (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DependentLocality
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_DependentLocality (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DependentLocality
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_DependentLocality (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PostalCode
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_PostalCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PostalCode
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_PostalCode (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SortingCode
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_SortingCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_SortingCode
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_SortingCode (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LanguageCode
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_LanguageCode (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LanguageCode
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_LanguageCode (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Organization
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_Organization (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Organization
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_Organization (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Recipient
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_Recipient (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Recipient
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_Recipient (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_PhoneNumber
   (
      this : in out PaymentAddress
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentAddress.all.get_PhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_PhoneNumber
   (
      this : in out PaymentAddress;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentAddress.all.put_PhoneNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Properties
   (
      this : in out PaymentAddress
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IPaymentAddress.all.get_Properties (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentCanMakePaymentResult

   procedure Initialize (this : in out PaymentCanMakePaymentResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentCanMakePaymentResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentCanMakePaymentResult, IPaymentCanMakePaymentResult_Ptr);
   begin
      if this.m_IPaymentCanMakePaymentResult /= null then
         if this.m_IPaymentCanMakePaymentResult.all /= null then
            RefCount := this.m_IPaymentCanMakePaymentResult.all.Release;
            Free (this.m_IPaymentCanMakePaymentResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentCanMakePaymentResult

   function Constructor
   (
      value : Windows.ApplicationModel.Payments.PaymentCanMakePaymentResultStatus
   )
   return PaymentCanMakePaymentResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentCanMakePaymentResult");
      m_Factory    : access IPaymentCanMakePaymentResultFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult;
   begin
      return RetVal : PaymentCanMakePaymentResult do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentCanMakePaymentResultFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (value, m_ComRetVal'Access);
            Retval.m_IPaymentCanMakePaymentResult := new Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult;
            Retval.m_IPaymentCanMakePaymentResult.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentCanMakePaymentResult

   function get_Status
   (
      this : in out PaymentCanMakePaymentResult
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentCanMakePaymentResultStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentCanMakePaymentResultStatus;
   begin
      Hr := this.m_IPaymentCanMakePaymentResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentCurrencyAmount

   procedure Initialize (this : in out PaymentCurrencyAmount) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentCurrencyAmount) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentCurrencyAmount, IPaymentCurrencyAmount_Ptr);
   begin
      if this.m_IPaymentCurrencyAmount /= null then
         if this.m_IPaymentCurrencyAmount.all /= null then
            RefCount := this.m_IPaymentCurrencyAmount.all.Release;
            Free (this.m_IPaymentCurrencyAmount);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentCurrencyAmount

   function Constructor
   (
      value : WinRt.WString;
      currency : WinRt.WString
   )
   return PaymentCurrencyAmount is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentCurrencyAmount");
      m_Factory    : access IPaymentCurrencyAmountFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
      HStr_value : WinRt.HString := To_HString (value);
      HStr_currency : WinRt.HString := To_HString (currency);
   begin
      return RetVal : PaymentCurrencyAmount do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentCurrencyAmountFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_value, HStr_currency, m_ComRetVal'Access);
            Retval.m_IPaymentCurrencyAmount := new Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
            Retval.m_IPaymentCurrencyAmount.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
         Hr := WindowsDeleteString (HStr_currency);
      end return;
   end;

   function Constructor
   (
      value : WinRt.WString;
      currency : WinRt.WString;
      currencySystem : WinRt.WString
   )
   return PaymentCurrencyAmount is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentCurrencyAmount");
      m_Factory    : access IPaymentCurrencyAmountFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
      HStr_value : WinRt.HString := To_HString (value);
      HStr_currency : WinRt.HString := To_HString (currency);
      HStr_currencySystem : WinRt.HString := To_HString (currencySystem);
   begin
      return RetVal : PaymentCurrencyAmount do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentCurrencyAmountFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithCurrencySystem (HStr_value, HStr_currency, HStr_currencySystem, m_ComRetVal'Access);
            Retval.m_IPaymentCurrencyAmount := new Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
            Retval.m_IPaymentCurrencyAmount.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
         Hr := WindowsDeleteString (HStr_currency);
         Hr := WindowsDeleteString (HStr_currencySystem);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentCurrencyAmount

   function get_Currency
   (
      this : in out PaymentCurrencyAmount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.get_Currency (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Currency
   (
      this : in out PaymentCurrencyAmount;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.put_Currency (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CurrencySystem
   (
      this : in out PaymentCurrencyAmount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.get_CurrencySystem (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CurrencySystem
   (
      this : in out PaymentCurrencyAmount;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.put_CurrencySystem (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Value
   (
      this : in out PaymentCurrencyAmount
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.get_Value (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Value
   (
      this : in out PaymentCurrencyAmount;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentCurrencyAmount.all.put_Value (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentDetails

   procedure Initialize (this : in out PaymentDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentDetails, IPaymentDetails_Ptr);
   begin
      if this.m_IPaymentDetails /= null then
         if this.m_IPaymentDetails.all /= null then
            RefCount := this.m_IPaymentDetails.all.Release;
            Free (this.m_IPaymentDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentDetails

   function Constructor return PaymentDetails is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetails");
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetails;
   begin
      return RetVal : PaymentDetails do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaymentDetails := new Windows.ApplicationModel.Payments.IPaymentDetails;
            Retval.m_IPaymentDetails.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      total : Windows.ApplicationModel.Payments.PaymentItem'Class
   )
   return PaymentDetails is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetails");
      m_Factory    : access IPaymentDetailsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetails;
   begin
      return RetVal : PaymentDetails do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentDetailsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (total.m_IPaymentItem.all, m_ComRetVal'Access);
            Retval.m_IPaymentDetails := new Windows.ApplicationModel.Payments.IPaymentDetails;
            Retval.m_IPaymentDetails.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      total : Windows.ApplicationModel.Payments.PaymentItem'Class;
      displayItems : GenericObject
   )
   return PaymentDetails is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetails");
      m_Factory    : access IPaymentDetailsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetails;
   begin
      return RetVal : PaymentDetails do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentDetailsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithDisplayItems (total.m_IPaymentItem.all, displayItems, m_ComRetVal'Access);
            Retval.m_IPaymentDetails := new Windows.ApplicationModel.Payments.IPaymentDetails;
            Retval.m_IPaymentDetails.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentDetails

   function get_Total
   (
      this : in out PaymentDetails
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentItem do
         Hr := this.m_IPaymentDetails.all.get_Total (m_ComRetVal'Access);
         Retval.m_IPaymentItem := new Windows.ApplicationModel.Payments.IPaymentItem;
         Retval.m_IPaymentItem.all := m_ComRetVal;
      end return;
   end;

   procedure put_Total
   (
      this : in out PaymentDetails;
      value : Windows.ApplicationModel.Payments.PaymentItem'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentDetails.all.put_Total (value.m_IPaymentItem.all);
   end;

   function get_DisplayItems
   (
      this : in out PaymentDetails
   )
   return IVectorView_IPaymentItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPaymentItem.Kind;
   begin
      Hr := this.m_IPaymentDetails.all.get_DisplayItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPaymentItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_DisplayItems
   (
      this : in out PaymentDetails;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentDetails.all.put_DisplayItems (value);
   end;

   function get_ShippingOptions
   (
      this : in out PaymentDetails
   )
   return IVectorView_IPaymentShippingOption.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPaymentShippingOption.Kind;
   begin
      Hr := this.m_IPaymentDetails.all.get_ShippingOptions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPaymentShippingOption (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_ShippingOptions
   (
      this : in out PaymentDetails;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentDetails.all.put_ShippingOptions (value);
   end;

   function get_Modifiers
   (
      this : in out PaymentDetails
   )
   return IVectorView_IPaymentDetailsModifier.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPaymentDetailsModifier.Kind;
   begin
      Hr := this.m_IPaymentDetails.all.get_Modifiers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPaymentDetailsModifier (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Modifiers
   (
      this : in out PaymentDetails;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentDetails.all.put_Modifiers (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentDetailsModifier

   procedure Initialize (this : in out PaymentDetailsModifier) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentDetailsModifier) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentDetailsModifier, IPaymentDetailsModifier_Ptr);
   begin
      if this.m_IPaymentDetailsModifier /= null then
         if this.m_IPaymentDetailsModifier.all /= null then
            RefCount := this.m_IPaymentDetailsModifier.all.Release;
            Free (this.m_IPaymentDetailsModifier);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentDetailsModifier

   function Constructor
   (
      supportedMethodIds : GenericObject;
      total : Windows.ApplicationModel.Payments.PaymentItem'Class
   )
   return PaymentDetailsModifier is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetailsModifier");
      m_Factory    : access IPaymentDetailsModifierFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
   begin
      return RetVal : PaymentDetailsModifier do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentDetailsModifierFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (supportedMethodIds, total.m_IPaymentItem.all, m_ComRetVal'Access);
            Retval.m_IPaymentDetailsModifier := new Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
            Retval.m_IPaymentDetailsModifier.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      supportedMethodIds : GenericObject;
      total : Windows.ApplicationModel.Payments.PaymentItem'Class;
      additionalDisplayItems : GenericObject
   )
   return PaymentDetailsModifier is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetailsModifier");
      m_Factory    : access IPaymentDetailsModifierFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
   begin
      return RetVal : PaymentDetailsModifier do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentDetailsModifierFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithAdditionalDisplayItems (supportedMethodIds, total.m_IPaymentItem.all, additionalDisplayItems, m_ComRetVal'Access);
            Retval.m_IPaymentDetailsModifier := new Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
            Retval.m_IPaymentDetailsModifier.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      supportedMethodIds : GenericObject;
      total : Windows.ApplicationModel.Payments.PaymentItem'Class;
      additionalDisplayItems : GenericObject;
      jsonData : WinRt.WString
   )
   return PaymentDetailsModifier is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentDetailsModifier");
      m_Factory    : access IPaymentDetailsModifierFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
      HStr_jsonData : WinRt.HString := To_HString (jsonData);
   begin
      return RetVal : PaymentDetailsModifier do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentDetailsModifierFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithAdditionalDisplayItemsAndJsonData (supportedMethodIds, total.m_IPaymentItem.all, additionalDisplayItems, HStr_jsonData, m_ComRetVal'Access);
            Retval.m_IPaymentDetailsModifier := new Windows.ApplicationModel.Payments.IPaymentDetailsModifier;
            Retval.m_IPaymentDetailsModifier.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_jsonData);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentDetailsModifier

   function get_JsonData
   (
      this : in out PaymentDetailsModifier
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentDetailsModifier.all.get_JsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedMethodIds
   (
      this : in out PaymentDetailsModifier
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPaymentDetailsModifier.all.get_SupportedMethodIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Total
   (
      this : in out PaymentDetailsModifier
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentItem do
         Hr := this.m_IPaymentDetailsModifier.all.get_Total (m_ComRetVal'Access);
         Retval.m_IPaymentItem := new Windows.ApplicationModel.Payments.IPaymentItem;
         Retval.m_IPaymentItem.all := m_ComRetVal;
      end return;
   end;

   function get_AdditionalDisplayItems
   (
      this : in out PaymentDetailsModifier
   )
   return IVectorView_IPaymentItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPaymentItem.Kind;
   begin
      Hr := this.m_IPaymentDetailsModifier.all.get_AdditionalDisplayItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPaymentItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentItem

   procedure Initialize (this : in out PaymentItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentItem, IPaymentItem_Ptr);
   begin
      if this.m_IPaymentItem /= null then
         if this.m_IPaymentItem.all /= null then
            RefCount := this.m_IPaymentItem.all.Release;
            Free (this.m_IPaymentItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentItem

   function Constructor
   (
      label : WinRt.WString;
      amount : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class
   )
   return PaymentItem is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentItem");
      m_Factory    : access IPaymentItemFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentItem;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : PaymentItem do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentItemFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_label, amount.m_IPaymentCurrencyAmount.all, m_ComRetVal'Access);
            Retval.m_IPaymentItem := new Windows.ApplicationModel.Payments.IPaymentItem;
            Retval.m_IPaymentItem.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentItem

   function get_Label
   (
      this : in out PaymentItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentItem.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out PaymentItem;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentItem.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Amount
   (
      this : in out PaymentItem
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentCurrencyAmount do
         Hr := this.m_IPaymentItem.all.get_Amount (m_ComRetVal'Access);
         Retval.m_IPaymentCurrencyAmount := new Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
         Retval.m_IPaymentCurrencyAmount.all := m_ComRetVal;
      end return;
   end;

   procedure put_Amount
   (
      this : in out PaymentItem;
      value : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentItem.all.put_Amount (value.m_IPaymentCurrencyAmount.all);
   end;

   function get_Pending
   (
      this : in out PaymentItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPaymentItem.all.get_Pending (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Pending
   (
      this : in out PaymentItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentItem.all.put_Pending (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentMediator

   procedure Initialize (this : in out PaymentMediator) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentMediator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentMediator, IPaymentMediator_Ptr);
   begin
      if this.m_IPaymentMediator /= null then
         if this.m_IPaymentMediator.all /= null then
            RefCount := this.m_IPaymentMediator.all.Release;
            Free (this.m_IPaymentMediator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentMediator

   function Constructor return PaymentMediator is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentMediator");
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentMediator;
   begin
      return RetVal : PaymentMediator do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaymentMediator := new Windows.ApplicationModel.Payments.IPaymentMediator;
            Retval.m_IPaymentMediator.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentMediator

   function GetSupportedMethodIdsAsync
   (
      this : in out PaymentMediator
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (798143785, 4507, 22362, (164, 25, 57, 4, 180, 228, 26, 242 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2088278462, 24366, 23539, (173, 229, 173, 152, 183, 114, 199, 205 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IPaymentMediator.all.GetSupportedMethodIdsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SubmitPaymentRequestAsync
   (
      this : in out PaymentMediator;
      paymentRequest_p : Windows.ApplicationModel.Payments.PaymentRequest'Class
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestSubmitResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentRequestSubmitResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentRequestSubmitResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult;
      m_IID            : aliased WinRt.IID := (3475574251, 21833, 22467, (138, 189, 83, 183, 108, 100, 60, 202 )); -- Windows.ApplicationModel.Payments.PaymentRequestSubmitResult;
      m_HandlerIID     : aliased WinRt.IID := (3419211686, 44586, 23152, (188, 11, 145, 32, 86, 8, 37, 209 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind := new AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentRequestSubmitResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequestSubmitResult do
         Hr := this.m_IPaymentMediator.all.SubmitPaymentRequestAsync (paymentRequest_p.m_IPaymentRequest.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentRequestSubmitResult := new Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult;
                  Retval.m_IPaymentRequestSubmitResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function SubmitPaymentRequestAsync
   (
      this : in out PaymentMediator;
      paymentRequest_p : Windows.ApplicationModel.Payments.PaymentRequest'Class;
      changeHandler : Windows.ApplicationModel.Payments.PaymentRequestChangedHandler
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestSubmitResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentRequestSubmitResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentRequestSubmitResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult;
      m_IID            : aliased WinRt.IID := (3475574251, 21833, 22467, (138, 189, 83, 183, 108, 100, 60, 202 )); -- Windows.ApplicationModel.Payments.PaymentRequestSubmitResult;
      m_HandlerIID     : aliased WinRt.IID := (3419211686, 44586, 23152, (188, 11, 145, 32, 86, 8, 37, 209 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind := new AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentRequestSubmitResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentRequestSubmitResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentRequestSubmitResult do
         Hr := this.m_IPaymentMediator.all.SubmitPaymentRequestAsync (paymentRequest_p.m_IPaymentRequest.all, changeHandler, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentRequestSubmitResult := new Windows.ApplicationModel.Payments.IPaymentRequestSubmitResult;
                  Retval.m_IPaymentRequestSubmitResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CanMakePaymentAsync
   (
      this : in out PaymentMediator;
      paymentRequest_p : Windows.ApplicationModel.Payments.PaymentRequest'Class
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentCanMakePaymentResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Payments.IPaymentMediator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_PaymentCanMakePaymentResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_PaymentCanMakePaymentResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult;
      m_IID            : aliased WinRt.IID := (2758230282, 4574, 20624, (185, 5, 150, 165, 98, 216, 93, 229 )); -- Windows.ApplicationModel.Payments.PaymentCanMakePaymentResult;
      m_HandlerIID     : aliased WinRt.IID := (2309905289, 27909, 22594, (156, 223, 244, 203, 247, 6, 220, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_PaymentCanMakePaymentResult.Kind := new AsyncOperationCompletedHandler_PaymentCanMakePaymentResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_PaymentCanMakePaymentResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_PaymentCanMakePaymentResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_PaymentCanMakePaymentResult.Kind_Delegate, AsyncOperationCompletedHandler_PaymentCanMakePaymentResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Payments.IPaymentMediator_Interface, WinRt.Windows.ApplicationModel.Payments.IPaymentMediator2, WinRt.Windows.ApplicationModel.Payments.IID_IPaymentMediator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentCanMakePaymentResult do
         m_Interface := QInterface (this.m_IPaymentMediator.all);
         Hr := m_Interface.CanMakePaymentAsync (paymentRequest_p.m_IPaymentRequest.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IPaymentCanMakePaymentResult := new Windows.ApplicationModel.Payments.IPaymentCanMakePaymentResult;
                  Retval.m_IPaymentCanMakePaymentResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentMerchantInfo

   procedure Initialize (this : in out PaymentMerchantInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentMerchantInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentMerchantInfo, IPaymentMerchantInfo_Ptr);
   begin
      if this.m_IPaymentMerchantInfo /= null then
         if this.m_IPaymentMerchantInfo.all /= null then
            RefCount := this.m_IPaymentMerchantInfo.all.Release;
            Free (this.m_IPaymentMerchantInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentMerchantInfo

   function Constructor return PaymentMerchantInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentMerchantInfo");
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
   begin
      return RetVal : PaymentMerchantInfo do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaymentMerchantInfo := new Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
            Retval.m_IPaymentMerchantInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      uri : Windows.Foundation.Uri'Class
   )
   return PaymentMerchantInfo is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentMerchantInfo");
      m_Factory    : access IPaymentMerchantInfoFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
   begin
      return RetVal : PaymentMerchantInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentMerchantInfoFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IPaymentMerchantInfo := new Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
            Retval.m_IPaymentMerchantInfo.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentMerchantInfo

   function get_PackageFullName
   (
      this : in out PaymentMerchantInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentMerchantInfo.all.get_PackageFullName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Uri
   (
      this : in out PaymentMerchantInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IPaymentMerchantInfo.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentMethodData

   procedure Initialize (this : in out PaymentMethodData) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentMethodData) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentMethodData, IPaymentMethodData_Ptr);
   begin
      if this.m_IPaymentMethodData /= null then
         if this.m_IPaymentMethodData.all /= null then
            RefCount := this.m_IPaymentMethodData.all.Release;
            Free (this.m_IPaymentMethodData);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentMethodData

   function Constructor
   (
      supportedMethodIds : GenericObject
   )
   return PaymentMethodData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentMethodData");
      m_Factory    : access IPaymentMethodDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentMethodData;
   begin
      return RetVal : PaymentMethodData do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentMethodDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (supportedMethodIds, m_ComRetVal'Access);
            Retval.m_IPaymentMethodData := new Windows.ApplicationModel.Payments.IPaymentMethodData;
            Retval.m_IPaymentMethodData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      supportedMethodIds : GenericObject;
      jsonData : WinRt.WString
   )
   return PaymentMethodData is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentMethodData");
      m_Factory    : access IPaymentMethodDataFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentMethodData;
      HStr_jsonData : WinRt.HString := To_HString (jsonData);
   begin
      return RetVal : PaymentMethodData do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentMethodDataFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithJsonData (supportedMethodIds, HStr_jsonData, m_ComRetVal'Access);
            Retval.m_IPaymentMethodData := new Windows.ApplicationModel.Payments.IPaymentMethodData;
            Retval.m_IPaymentMethodData.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_jsonData);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentMethodData

   function get_SupportedMethodIds
   (
      this : in out PaymentMethodData
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IPaymentMethodData.all.get_SupportedMethodIds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_JsonData
   (
      this : in out PaymentMethodData
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentMethodData.all.get_JsonData (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentOptions

   procedure Initialize (this : in out PaymentOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentOptions, IPaymentOptions_Ptr);
   begin
      if this.m_IPaymentOptions /= null then
         if this.m_IPaymentOptions.all /= null then
            RefCount := this.m_IPaymentOptions.all.Release;
            Free (this.m_IPaymentOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentOptions

   function Constructor return PaymentOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentOptions;
   begin
      return RetVal : PaymentOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaymentOptions := new Windows.ApplicationModel.Payments.IPaymentOptions;
            Retval.m_IPaymentOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentOptions

   function get_RequestPayerEmail
   (
      this : in out PaymentOptions
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentOptionPresence is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentOptionPresence;
   begin
      Hr := this.m_IPaymentOptions.all.get_RequestPayerEmail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequestPayerEmail
   (
      this : in out PaymentOptions;
      value : Windows.ApplicationModel.Payments.PaymentOptionPresence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentOptions.all.put_RequestPayerEmail (value);
   end;

   function get_RequestPayerName
   (
      this : in out PaymentOptions
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentOptionPresence is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentOptionPresence;
   begin
      Hr := this.m_IPaymentOptions.all.get_RequestPayerName (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequestPayerName
   (
      this : in out PaymentOptions;
      value : Windows.ApplicationModel.Payments.PaymentOptionPresence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentOptions.all.put_RequestPayerName (value);
   end;

   function get_RequestPayerPhoneNumber
   (
      this : in out PaymentOptions
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentOptionPresence is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentOptionPresence;
   begin
      Hr := this.m_IPaymentOptions.all.get_RequestPayerPhoneNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequestPayerPhoneNumber
   (
      this : in out PaymentOptions;
      value : Windows.ApplicationModel.Payments.PaymentOptionPresence
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentOptions.all.put_RequestPayerPhoneNumber (value);
   end;

   function get_RequestShipping
   (
      this : in out PaymentOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPaymentOptions.all.get_RequestShipping (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequestShipping
   (
      this : in out PaymentOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentOptions.all.put_RequestShipping (value);
   end;

   function get_ShippingType
   (
      this : in out PaymentOptions
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentShippingType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentShippingType;
   begin
      Hr := this.m_IPaymentOptions.all.get_ShippingType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShippingType
   (
      this : in out PaymentOptions;
      value : Windows.ApplicationModel.Payments.PaymentShippingType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentOptions.all.put_ShippingType (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentRequest

   procedure Initialize (this : in out PaymentRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentRequest, IPaymentRequest_Ptr);
   begin
      if this.m_IPaymentRequest /= null then
         if this.m_IPaymentRequest.all /= null then
            RefCount := this.m_IPaymentRequest.all.Release;
            Free (this.m_IPaymentRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentRequest

   function Constructor
   (
      details : Windows.ApplicationModel.Payments.PaymentDetails'Class;
      methodData : GenericObject;
      merchantInfo : Windows.ApplicationModel.Payments.PaymentMerchantInfo'Class;
      options : Windows.ApplicationModel.Payments.PaymentOptions'Class;
      id : WinRt.WString
   )
   return PaymentRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequest");
      m_Factory    : access IPaymentRequestFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : PaymentRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMerchantInfoOptionsAndId (details.m_IPaymentDetails.all, methodData, merchantInfo.m_IPaymentMerchantInfo.all, options.m_IPaymentOptions.all, HStr_id, m_ComRetVal'Access);
            Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
            Retval.m_IPaymentRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function Constructor
   (
      details : Windows.ApplicationModel.Payments.PaymentDetails'Class;
      methodData : GenericObject
   )
   return PaymentRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequest");
      m_Factory    : access IPaymentRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
   begin
      return RetVal : PaymentRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (details.m_IPaymentDetails.all, methodData, m_ComRetVal'Access);
            Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
            Retval.m_IPaymentRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      details : Windows.ApplicationModel.Payments.PaymentDetails'Class;
      methodData : GenericObject;
      merchantInfo : Windows.ApplicationModel.Payments.PaymentMerchantInfo'Class
   )
   return PaymentRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequest");
      m_Factory    : access IPaymentRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
   begin
      return RetVal : PaymentRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMerchantInfo (details.m_IPaymentDetails.all, methodData, merchantInfo.m_IPaymentMerchantInfo.all, m_ComRetVal'Access);
            Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
            Retval.m_IPaymentRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      details : Windows.ApplicationModel.Payments.PaymentDetails'Class;
      methodData : GenericObject;
      merchantInfo : Windows.ApplicationModel.Payments.PaymentMerchantInfo'Class;
      options : Windows.ApplicationModel.Payments.PaymentOptions'Class
   )
   return PaymentRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequest");
      m_Factory    : access IPaymentRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequest;
   begin
      return RetVal : PaymentRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMerchantInfoAndOptions (details.m_IPaymentDetails.all, methodData, merchantInfo.m_IPaymentMerchantInfo.all, options.m_IPaymentOptions.all, m_ComRetVal'Access);
            Retval.m_IPaymentRequest := new Windows.ApplicationModel.Payments.IPaymentRequest;
            Retval.m_IPaymentRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentRequest

   function get_MerchantInfo
   (
      this : in out PaymentRequest
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentMerchantInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentMerchantInfo do
         Hr := this.m_IPaymentRequest.all.get_MerchantInfo (m_ComRetVal'Access);
         Retval.m_IPaymentMerchantInfo := new Windows.ApplicationModel.Payments.IPaymentMerchantInfo;
         Retval.m_IPaymentMerchantInfo.all := m_ComRetVal;
      end return;
   end;

   function get_Details
   (
      this : in out PaymentRequest
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentDetails;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentDetails do
         Hr := this.m_IPaymentRequest.all.get_Details (m_ComRetVal'Access);
         Retval.m_IPaymentDetails := new Windows.ApplicationModel.Payments.IPaymentDetails;
         Retval.m_IPaymentDetails.all := m_ComRetVal;
      end return;
   end;

   function get_MethodData
   (
      this : in out PaymentRequest
   )
   return IVectorView_IPaymentMethodData.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IPaymentMethodData.Kind;
   begin
      Hr := this.m_IPaymentRequest.all.get_MethodData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IPaymentMethodData (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Options
   (
      this : in out PaymentRequest
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentOptions;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentOptions do
         Hr := this.m_IPaymentRequest.all.get_Options (m_ComRetVal'Access);
         Retval.m_IPaymentOptions := new Windows.ApplicationModel.Payments.IPaymentOptions;
         Retval.m_IPaymentOptions.all := m_ComRetVal;
      end return;
   end;

   function get_Id
   (
      this : in out PaymentRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Payments.IPaymentRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Payments.IPaymentRequest_Interface, WinRt.Windows.ApplicationModel.Payments.IPaymentRequest2, WinRt.Windows.ApplicationModel.Payments.IID_IPaymentRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPaymentRequest.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentRequestChangedArgs

   procedure Initialize (this : in out PaymentRequestChangedArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentRequestChangedArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentRequestChangedArgs, IPaymentRequestChangedArgs_Ptr);
   begin
      if this.m_IPaymentRequestChangedArgs /= null then
         if this.m_IPaymentRequestChangedArgs.all /= null then
            RefCount := this.m_IPaymentRequestChangedArgs.all.Release;
            Free (this.m_IPaymentRequestChangedArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentRequestChangedArgs

   function get_ChangeKind
   (
      this : in out PaymentRequestChangedArgs
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestChangeKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentRequestChangeKind;
   begin
      Hr := this.m_IPaymentRequestChangedArgs.all.get_ChangeKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ShippingAddress
   (
      this : in out PaymentRequestChangedArgs
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentAddress;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentAddress do
         Hr := this.m_IPaymentRequestChangedArgs.all.get_ShippingAddress (m_ComRetVal'Access);
         Retval.m_IPaymentAddress := new Windows.ApplicationModel.Payments.IPaymentAddress;
         Retval.m_IPaymentAddress.all := m_ComRetVal;
      end return;
   end;

   function get_SelectedShippingOption
   (
      this : in out PaymentRequestChangedArgs
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentShippingOption'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentShippingOption;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentShippingOption do
         Hr := this.m_IPaymentRequestChangedArgs.all.get_SelectedShippingOption (m_ComRetVal'Access);
         Retval.m_IPaymentShippingOption := new Windows.ApplicationModel.Payments.IPaymentShippingOption;
         Retval.m_IPaymentShippingOption.all := m_ComRetVal;
      end return;
   end;

   procedure Acknowledge
   (
      this : in out PaymentRequestChangedArgs;
      changeResult : Windows.ApplicationModel.Payments.PaymentRequestChangedResult'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentRequestChangedArgs.all.Acknowledge (changeResult.m_IPaymentRequestChangedResult.all);
   end;

   -----------------------------------------------------------------------------
   -- Delegate PaymentRequestChangedHandler

   function Invoke
   (
      this : access PaymentRequestChangedHandler_Delegate;
      paymentRequest_p : Windows.ApplicationModel.Payments.IPaymentRequest;
      args : Windows.ApplicationModel.Payments.IPaymentRequestChangedArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (paymentRequest_p, args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentRequestChangedResult

   procedure Initialize (this : in out PaymentRequestChangedResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentRequestChangedResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentRequestChangedResult, IPaymentRequestChangedResult_Ptr);
   begin
      if this.m_IPaymentRequestChangedResult /= null then
         if this.m_IPaymentRequestChangedResult.all /= null then
            RefCount := this.m_IPaymentRequestChangedResult.all.Release;
            Free (this.m_IPaymentRequestChangedResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentRequestChangedResult

   function Constructor
   (
      changeAcceptedByMerchant : WinRt.Boolean
   )
   return PaymentRequestChangedResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequestChangedResult");
      m_Factory    : access IPaymentRequestChangedResultFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
   begin
      return RetVal : PaymentRequestChangedResult do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestChangedResultFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (changeAcceptedByMerchant, m_ComRetVal'Access);
            Retval.m_IPaymentRequestChangedResult := new Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
            Retval.m_IPaymentRequestChangedResult.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      changeAcceptedByMerchant : WinRt.Boolean;
      updatedPaymentDetails : Windows.ApplicationModel.Payments.PaymentDetails'Class
   )
   return PaymentRequestChangedResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentRequestChangedResult");
      m_Factory    : access IPaymentRequestChangedResultFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
   begin
      return RetVal : PaymentRequestChangedResult do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentRequestChangedResultFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPaymentDetails (changeAcceptedByMerchant, updatedPaymentDetails.m_IPaymentDetails.all, m_ComRetVal'Access);
            Retval.m_IPaymentRequestChangedResult := new Windows.ApplicationModel.Payments.IPaymentRequestChangedResult;
            Retval.m_IPaymentRequestChangedResult.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentRequestChangedResult

   function get_ChangeAcceptedByMerchant
   (
      this : in out PaymentRequestChangedResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPaymentRequestChangedResult.all.get_ChangeAcceptedByMerchant (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ChangeAcceptedByMerchant
   (
      this : in out PaymentRequestChangedResult;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentRequestChangedResult.all.put_ChangeAcceptedByMerchant (value);
   end;

   function get_Message
   (
      this : in out PaymentRequestChangedResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentRequestChangedResult.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Message
   (
      this : in out PaymentRequestChangedResult;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentRequestChangedResult.all.put_Message (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UpdatedPaymentDetails
   (
      this : in out PaymentRequestChangedResult
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentDetails;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentDetails do
         Hr := this.m_IPaymentRequestChangedResult.all.get_UpdatedPaymentDetails (m_ComRetVal'Access);
         Retval.m_IPaymentDetails := new Windows.ApplicationModel.Payments.IPaymentDetails;
         Retval.m_IPaymentDetails.all := m_ComRetVal;
      end return;
   end;

   procedure put_UpdatedPaymentDetails
   (
      this : in out PaymentRequestChangedResult;
      value : Windows.ApplicationModel.Payments.PaymentDetails'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentRequestChangedResult.all.put_UpdatedPaymentDetails (value.m_IPaymentDetails.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentRequestSubmitResult

   procedure Initialize (this : in out PaymentRequestSubmitResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentRequestSubmitResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentRequestSubmitResult, IPaymentRequestSubmitResult_Ptr);
   begin
      if this.m_IPaymentRequestSubmitResult /= null then
         if this.m_IPaymentRequestSubmitResult.all /= null then
            RefCount := this.m_IPaymentRequestSubmitResult.all.Release;
            Free (this.m_IPaymentRequestSubmitResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentRequestSubmitResult

   function get_Status
   (
      this : in out PaymentRequestSubmitResult
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentRequestStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.PaymentRequestStatus;
   begin
      Hr := this.m_IPaymentRequestSubmitResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Response
   (
      this : in out PaymentRequestSubmitResult
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentResponse'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentResponse;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentResponse do
         Hr := this.m_IPaymentRequestSubmitResult.all.get_Response (m_ComRetVal'Access);
         Retval.m_IPaymentResponse := new Windows.ApplicationModel.Payments.IPaymentResponse;
         Retval.m_IPaymentResponse.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentResponse

   procedure Initialize (this : in out PaymentResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentResponse, IPaymentResponse_Ptr);
   begin
      if this.m_IPaymentResponse /= null then
         if this.m_IPaymentResponse.all /= null then
            RefCount := this.m_IPaymentResponse.all.Release;
            Free (this.m_IPaymentResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentResponse

   function get_PaymentToken
   (
      this : in out PaymentResponse
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentToken'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentToken;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentToken do
         Hr := this.m_IPaymentResponse.all.get_PaymentToken (m_ComRetVal'Access);
         Retval.m_IPaymentToken := new Windows.ApplicationModel.Payments.IPaymentToken;
         Retval.m_IPaymentToken.all := m_ComRetVal;
      end return;
   end;

   function get_ShippingOption
   (
      this : in out PaymentResponse
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentShippingOption'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentShippingOption;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentShippingOption do
         Hr := this.m_IPaymentResponse.all.get_ShippingOption (m_ComRetVal'Access);
         Retval.m_IPaymentShippingOption := new Windows.ApplicationModel.Payments.IPaymentShippingOption;
         Retval.m_IPaymentShippingOption.all := m_ComRetVal;
      end return;
   end;

   function get_ShippingAddress
   (
      this : in out PaymentResponse
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentAddress'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentAddress;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentAddress do
         Hr := this.m_IPaymentResponse.all.get_ShippingAddress (m_ComRetVal'Access);
         Retval.m_IPaymentAddress := new Windows.ApplicationModel.Payments.IPaymentAddress;
         Retval.m_IPaymentAddress.all := m_ComRetVal;
      end return;
   end;

   function get_PayerEmail
   (
      this : in out PaymentResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentResponse.all.get_PayerEmail (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PayerName
   (
      this : in out PaymentResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentResponse.all.get_PayerName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PayerPhoneNumber
   (
      this : in out PaymentResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentResponse.all.get_PayerPhoneNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure CompleteAsync
   (
      this : in out PaymentResponse;
      status : Windows.ApplicationModel.Payments.PaymentRequestCompletionStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPaymentResponse.all.CompleteAsync (status, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentShippingOption

   procedure Initialize (this : in out PaymentShippingOption) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentShippingOption) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentShippingOption, IPaymentShippingOption_Ptr);
   begin
      if this.m_IPaymentShippingOption /= null then
         if this.m_IPaymentShippingOption.all /= null then
            RefCount := this.m_IPaymentShippingOption.all.Release;
            Free (this.m_IPaymentShippingOption);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentShippingOption

   function Constructor
   (
      label : WinRt.WString;
      amount : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class
   )
   return PaymentShippingOption is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentShippingOption");
      m_Factory    : access IPaymentShippingOptionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentShippingOption;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : PaymentShippingOption do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentShippingOptionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_label, amount.m_IPaymentCurrencyAmount.all, m_ComRetVal'Access);
            Retval.m_IPaymentShippingOption := new Windows.ApplicationModel.Payments.IPaymentShippingOption;
            Retval.m_IPaymentShippingOption.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   function Constructor
   (
      label : WinRt.WString;
      amount : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class;
      selected : WinRt.Boolean
   )
   return PaymentShippingOption is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentShippingOption");
      m_Factory    : access IPaymentShippingOptionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentShippingOption;
      HStr_label : WinRt.HString := To_HString (label);
   begin
      return RetVal : PaymentShippingOption do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentShippingOptionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSelected (HStr_label, amount.m_IPaymentCurrencyAmount.all, selected, m_ComRetVal'Access);
            Retval.m_IPaymentShippingOption := new Windows.ApplicationModel.Payments.IPaymentShippingOption;
            Retval.m_IPaymentShippingOption.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
      end return;
   end;

   function Constructor
   (
      label : WinRt.WString;
      amount : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class;
      selected : WinRt.Boolean;
      tag : WinRt.WString
   )
   return PaymentShippingOption is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentShippingOption");
      m_Factory    : access IPaymentShippingOptionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentShippingOption;
      HStr_label : WinRt.HString := To_HString (label);
      HStr_tag : WinRt.HString := To_HString (tag);
   begin
      return RetVal : PaymentShippingOption do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentShippingOptionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithSelectedAndTag (HStr_label, amount.m_IPaymentCurrencyAmount.all, selected, HStr_tag, m_ComRetVal'Access);
            Retval.m_IPaymentShippingOption := new Windows.ApplicationModel.Payments.IPaymentShippingOption;
            Retval.m_IPaymentShippingOption.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_label);
         Hr := WindowsDeleteString (HStr_tag);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentShippingOption

   function get_Label
   (
      this : in out PaymentShippingOption
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentShippingOption.all.get_Label (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Label
   (
      this : in out PaymentShippingOption;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentShippingOption.all.put_Label (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Amount
   (
      this : in out PaymentShippingOption
   )
   return WinRt.Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Payments.PaymentCurrencyAmount do
         Hr := this.m_IPaymentShippingOption.all.get_Amount (m_ComRetVal'Access);
         Retval.m_IPaymentCurrencyAmount := new Windows.ApplicationModel.Payments.IPaymentCurrencyAmount;
         Retval.m_IPaymentCurrencyAmount.all := m_ComRetVal;
      end return;
   end;

   procedure put_Amount
   (
      this : in out PaymentShippingOption;
      value : Windows.ApplicationModel.Payments.PaymentCurrencyAmount'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentShippingOption.all.put_Amount (value.m_IPaymentCurrencyAmount.all);
   end;

   function get_Tag
   (
      this : in out PaymentShippingOption
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentShippingOption.all.get_Tag (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Tag
   (
      this : in out PaymentShippingOption;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPaymentShippingOption.all.put_Tag (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_IsSelected
   (
      this : in out PaymentShippingOption
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPaymentShippingOption.all.get_IsSelected (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsSelected
   (
      this : in out PaymentShippingOption;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPaymentShippingOption.all.put_IsSelected (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentToken

   procedure Initialize (this : in out PaymentToken) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentToken) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaymentToken, IPaymentToken_Ptr);
   begin
      if this.m_IPaymentToken /= null then
         if this.m_IPaymentToken.all /= null then
            RefCount := this.m_IPaymentToken.all.Release;
            Free (this.m_IPaymentToken);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentToken

   function Constructor
   (
      paymentMethodId : WinRt.WString
   )
   return PaymentToken is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentToken");
      m_Factory    : access IPaymentTokenFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentToken;
      HStr_paymentMethodId : WinRt.HString := To_HString (paymentMethodId);
   begin
      return RetVal : PaymentToken do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentTokenFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_paymentMethodId, m_ComRetVal'Access);
            Retval.m_IPaymentToken := new Windows.ApplicationModel.Payments.IPaymentToken;
            Retval.m_IPaymentToken.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_paymentMethodId);
      end return;
   end;

   function Constructor
   (
      paymentMethodId : WinRt.WString;
      jsonDetails : WinRt.WString
   )
   return PaymentToken is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Payments.PaymentToken");
      m_Factory    : access IPaymentTokenFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Payments.IPaymentToken;
      HStr_paymentMethodId : WinRt.HString := To_HString (paymentMethodId);
      HStr_jsonDetails : WinRt.HString := To_HString (jsonDetails);
   begin
      return RetVal : PaymentToken do
         Hr := RoGetActivationFactory (m_hString, IID_IPaymentTokenFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithJsonDetails (HStr_paymentMethodId, HStr_jsonDetails, m_ComRetVal'Access);
            Retval.m_IPaymentToken := new Windows.ApplicationModel.Payments.IPaymentToken;
            Retval.m_IPaymentToken.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_paymentMethodId);
         Hr := WindowsDeleteString (HStr_jsonDetails);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentToken

   function get_PaymentMethodId
   (
      this : in out PaymentToken
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentToken.all.get_PaymentMethodId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_JsonDetails
   (
      this : in out PaymentToken
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPaymentToken.all.get_JsonDetails (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

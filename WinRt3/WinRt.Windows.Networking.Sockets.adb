--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Background;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Connectivity;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Security.Cryptography.Certificates;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.Web;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.Sockets is

   package IAsyncOperation_IOutputStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IOutputStream);
   package AsyncOperationCompletedHandler_IOutputStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IOutputStream);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt32, GenericObject);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt32, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ControlChannelTrigger

   procedure Initialize (this : in out ControlChannelTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ControlChannelTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IControlChannelTrigger, IControlChannelTrigger_Ptr);
   begin
      if this.m_IControlChannelTrigger /= null then
         if this.m_IControlChannelTrigger.all /= null then
            RefCount := this.m_IControlChannelTrigger.all.Release;
            Free (this.m_IControlChannelTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ControlChannelTrigger

   function Constructor
   (
      channelId : WinRt.WString;
      serverKeepAliveIntervalInMinutes : WinRt.UInt32
   )
   return ControlChannelTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.ControlChannelTrigger");
      m_Factory    : access IControlChannelTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Sockets.IControlChannelTrigger;
      HStr_channelId : WinRt.HString := To_HString (channelId);
   begin
      return RetVal : ControlChannelTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IControlChannelTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateControlChannelTrigger (HStr_channelId, serverKeepAliveIntervalInMinutes, m_ComRetVal'Access);
            Retval.m_IControlChannelTrigger := new Windows.Networking.Sockets.IControlChannelTrigger;
            Retval.m_IControlChannelTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_channelId);
      end return;
   end;

   function Constructor
   (
      channelId : WinRt.WString;
      serverKeepAliveIntervalInMinutes : WinRt.UInt32;
      resourceRequestType : Windows.Networking.Sockets.ControlChannelTriggerResourceType
   )
   return ControlChannelTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.ControlChannelTrigger");
      m_Factory    : access IControlChannelTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Sockets.IControlChannelTrigger;
      HStr_channelId : WinRt.HString := To_HString (channelId);
   begin
      return RetVal : ControlChannelTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IControlChannelTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateControlChannelTriggerEx (HStr_channelId, serverKeepAliveIntervalInMinutes, resourceRequestType, m_ComRetVal'Access);
            Retval.m_IControlChannelTrigger := new Windows.Networking.Sockets.IControlChannelTrigger;
            Retval.m_IControlChannelTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_channelId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ControlChannelTrigger

   function get_ControlChannelTriggerId
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_ControlChannelTriggerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServerKeepAliveIntervalInMinutes
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_ServerKeepAliveIntervalInMinutes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServerKeepAliveIntervalInMinutes
   (
      this : in out ControlChannelTrigger;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IControlChannelTrigger.all.put_ServerKeepAliveIntervalInMinutes (value);
   end;

   function get_CurrentKeepAliveIntervalInMinutes
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_CurrentKeepAliveIntervalInMinutes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TransportObject
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_TransportObject (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KeepAliveTrigger
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_KeepAliveTrigger (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PushNotificationTrigger
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      Hr := this.m_IControlChannelTrigger.all.get_PushNotificationTrigger (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure UsingTransport
   (
      this : in out ControlChannelTrigger;
      transport : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IControlChannelTrigger.all.UsingTransport (transport);
   end;

   function WaitForPushEnabled
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.Windows.Networking.Sockets.ControlChannelTriggerStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.ControlChannelTriggerStatus;
   begin
      Hr := this.m_IControlChannelTrigger.all.WaitForPushEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure DecreaseNetworkKeepAliveInterval
   (
      this : in out ControlChannelTrigger
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IControlChannelTrigger.all.DecreaseNetworkKeepAliveInterval;
   end;

   procedure FlushTransport
   (
      this : in out ControlChannelTrigger
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IControlChannelTrigger.all.FlushTransport;
   end;

   procedure Close
   (
      this : in out ControlChannelTrigger
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IControlChannelTrigger_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IControlChannelTrigger.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function get_IsWakeFromLowPowerSupported
   (
      this : in out ControlChannelTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IControlChannelTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IControlChannelTrigger_Interface, WinRt.Windows.Networking.Sockets.IControlChannelTrigger2, WinRt.Windows.Networking.Sockets.IID_IControlChannelTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IControlChannelTrigger.all);
      Hr := m_Interface.get_IsWakeFromLowPowerSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatagramSocket

   procedure Initialize (this : in out DatagramSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatagramSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatagramSocket, IDatagramSocket_Ptr);
   begin
      if this.m_IDatagramSocket /= null then
         if this.m_IDatagramSocket.all /= null then
            RefCount := this.m_IDatagramSocket.all.Release;
            Free (this.m_IDatagramSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DatagramSocket

   function Constructor return DatagramSocket is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.DatagramSocket");
      m_ComRetVal  : aliased Windows.Networking.Sockets.IDatagramSocket;
   begin
      return RetVal : DatagramSocket do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDatagramSocket := new Windows.Networking.Sockets.IDatagramSocket;
            Retval.m_IDatagramSocket.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DatagramSocket

   function GetEndpointPairsAsync
   (
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.DatagramSocket");
      m_Factory        : access WinRt.Windows.Networking.Sockets.IDatagramSocketStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2948792206, 58259, 22122, (137, 196, 208, 67, 233, 64, 5, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (550959787, 15246, 23071, (131, 151, 176, 28, 178, 25, 161, 141 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDatagramSocketStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEndpointPairsAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_remoteServiceName);
      return m_RetVal;
   end;

   function GetEndpointPairsAsync
   (
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString;
      sortOptions : Windows.Networking.HostNameSortOptions
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.DatagramSocket");
      m_Factory        : access WinRt.Windows.Networking.Sockets.IDatagramSocketStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2948792206, 58259, 22122, (137, 196, 208, 67, 233, 64, 5, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (550959787, 15246, 23071, (131, 151, 176, 28, 178, 25, 161, 141 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDatagramSocketStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEndpointPairsAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, sortOptions, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_remoteServiceName);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatagramSocket

   function get_Control
   (
      this : in out DatagramSocket
   )
   return WinRt.Windows.Networking.Sockets.DatagramSocketControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IDatagramSocketControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.DatagramSocketControl do
         Hr := this.m_IDatagramSocket.all.get_Control (m_ComRetVal'Access);
         Retval.m_IDatagramSocketControl := new Windows.Networking.Sockets.IDatagramSocketControl;
         Retval.m_IDatagramSocketControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out DatagramSocket
   )
   return WinRt.Windows.Networking.Sockets.DatagramSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IDatagramSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.DatagramSocketInformation do
         Hr := this.m_IDatagramSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IDatagramSocketInformation := new Windows.Networking.Sockets.IDatagramSocketInformation;
         Retval.m_IDatagramSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function get_OutputStream
   (
      this : in out DatagramSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IDatagramSocket.all.get_OutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ConnectAsync
   (
      this : in out DatagramSocket;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDatagramSocket.all.ConnectAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteServiceName);
   end;

   procedure ConnectAsync
   (
      this : in out DatagramSocket;
      endpointPair : Windows.Networking.EndpointPair'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDatagramSocket.all.ConnectAsync (endpointPair.m_IEndpointPair.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure BindServiceNameAsync
   (
      this : in out DatagramSocket;
      localServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDatagramSocket.all.BindServiceNameAsync (HStr_localServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure BindEndpointAsync
   (
      this : in out DatagramSocket;
      localHostName : Windows.Networking.HostName'Class;
      localServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDatagramSocket.all.BindEndpointAsync (localHostName.m_IHostName.all, HStr_localServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure JoinMulticastGroup
   (
      this : in out DatagramSocket;
      host : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDatagramSocket.all.JoinMulticastGroup (host.m_IHostName.all);
   end;

   function GetOutputStreamAsync
   (
      this : in out DatagramSocket;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IOutputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IOutputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IOutputStream;
      m_IID            : aliased WinRt.IID := (3899877427, 53267, 21345, (151, 125, 197, 233, 153, 52, 104, 14 )); -- Windows.Storage.Streams.IOutputStream;
      m_HandlerIID     : aliased WinRt.IID := (3165880143, 15092, 22044, (169, 227, 238, 241, 115, 132, 148, 215 ));
      m_Handler        : AsyncOperationCompletedHandler_IOutputStream.Kind := new AsyncOperationCompletedHandler_IOutputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IOutputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IOutputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IOutputStream.Kind_Delegate, AsyncOperationCompletedHandler_IOutputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDatagramSocket.all.GetOutputStreamAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteServiceName);
      return m_RetVal;
   end;

   function GetOutputStreamAsync
   (
      this : in out DatagramSocket;
      endpointPair : Windows.Networking.EndpointPair'Class
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IOutputStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IOutputStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IOutputStream;
      m_IID            : aliased WinRt.IID := (3899877427, 53267, 21345, (151, 125, 197, 233, 153, 52, 104, 14 )); -- Windows.Storage.Streams.IOutputStream;
      m_HandlerIID     : aliased WinRt.IID := (3165880143, 15092, 22044, (169, 227, 238, 241, 115, 132, 148, 215 ));
      m_Handler        : AsyncOperationCompletedHandler_IOutputStream.Kind := new AsyncOperationCompletedHandler_IOutputStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IOutputStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IOutputStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IOutputStream.Kind_Delegate, AsyncOperationCompletedHandler_IOutputStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDatagramSocket.all.GetOutputStreamAsync (endpointPair.m_IEndpointPair.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_MessageReceived
   (
      this : in out DatagramSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDatagramSocket.all.add_MessageReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageReceived
   (
      this : in out DatagramSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDatagramSocket.all.remove_MessageReceived (eventCookie);
   end;

   procedure Close
   (
      this : in out DatagramSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure BindServiceNameAsync
   (
      this : in out DatagramSocket;
      localServiceName : WinRt.WString;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket2, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.BindServiceNameAsync (HStr_localServiceName, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure CancelIOAsync
   (
      this : in out DatagramSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.CancelIOAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure EnableTransferOwnership
   (
      this : in out DatagramSocket;
      taskId : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.EnableTransferOwnership (taskId);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableTransferOwnership
   (
      this : in out DatagramSocket;
      taskId : WinRt.Guid;
      connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.EnableTransferOwnership (taskId, connectedStandbyAction);
      m_RefCount := m_Interface.Release;
   end;

   procedure TransferOwnership
   (
      this : in out DatagramSocket;
      socketId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   procedure TransferOwnership
   (
      this : in out DatagramSocket;
      socketId : WinRt.WString;
      data : Windows.Networking.Sockets.SocketActivityContext'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId, data.m_ISocketActivityContext.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   procedure TransferOwnership
   (
      this : in out DatagramSocket;
      socketId : WinRt.WString;
      data : Windows.Networking.Sockets.SocketActivityContext'Class;
      keepAliveTime : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocket_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocket3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId, data.m_ISocketActivityContext.all, keepAliveTime);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatagramSocketControl

   procedure Initialize (this : in out DatagramSocketControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatagramSocketControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatagramSocketControl, IDatagramSocketControl_Ptr);
   begin
      if this.m_IDatagramSocketControl /= null then
         if this.m_IDatagramSocketControl.all /= null then
            RefCount := this.m_IDatagramSocketControl.all.Release;
            Free (this.m_IDatagramSocketControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatagramSocketControl

   function get_QualityOfService
   (
      this : in out DatagramSocketControl
   )
   return WinRt.Windows.Networking.Sockets.SocketQualityOfService is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketQualityOfService;
   begin
      Hr := this.m_IDatagramSocketControl.all.get_QualityOfService (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QualityOfService
   (
      this : in out DatagramSocketControl;
      value : Windows.Networking.Sockets.SocketQualityOfService
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDatagramSocketControl.all.put_QualityOfService (value);
   end;

   function get_OutboundUnicastHopLimit
   (
      this : in out DatagramSocketControl
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IDatagramSocketControl.all.get_OutboundUnicastHopLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutboundUnicastHopLimit
   (
      this : in out DatagramSocketControl;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDatagramSocketControl.all.put_OutboundUnicastHopLimit (value);
   end;

   function get_InboundBufferSizeInBytes
   (
      this : in out DatagramSocketControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl2, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.get_InboundBufferSizeInBytes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_InboundBufferSizeInBytes
   (
      this : in out DatagramSocketControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl2, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.put_InboundBufferSizeInBytes (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DontFragment
   (
      this : in out DatagramSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl2, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.get_DontFragment (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DontFragment
   (
      this : in out DatagramSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl2, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.put_DontFragment (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MulticastOnly
   (
      this : in out DatagramSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.get_MulticastOnly (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MulticastOnly
   (
      this : in out DatagramSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IDatagramSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IDatagramSocketControl_Interface, WinRt.Windows.Networking.Sockets.IDatagramSocketControl3, WinRt.Windows.Networking.Sockets.IID_IDatagramSocketControl3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDatagramSocketControl.all);
      Hr := m_Interface.put_MulticastOnly (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatagramSocketInformation

   procedure Initialize (this : in out DatagramSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatagramSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatagramSocketInformation, IDatagramSocketInformation_Ptr);
   begin
      if this.m_IDatagramSocketInformation /= null then
         if this.m_IDatagramSocketInformation.all /= null then
            RefCount := this.m_IDatagramSocketInformation.all.Release;
            Free (this.m_IDatagramSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatagramSocketInformation

   function get_LocalAddress
   (
      this : in out DatagramSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDatagramSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_LocalPort
   (
      this : in out DatagramSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDatagramSocketInformation.all.get_LocalPort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RemoteAddress
   (
      this : in out DatagramSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDatagramSocketInformation.all.get_RemoteAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_RemotePort
   (
      this : in out DatagramSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDatagramSocketInformation.all.get_RemotePort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DatagramSocketMessageReceivedEventArgs

   procedure Initialize (this : in out DatagramSocketMessageReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DatagramSocketMessageReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDatagramSocketMessageReceivedEventArgs, IDatagramSocketMessageReceivedEventArgs_Ptr);
   begin
      if this.m_IDatagramSocketMessageReceivedEventArgs /= null then
         if this.m_IDatagramSocketMessageReceivedEventArgs.all /= null then
            RefCount := this.m_IDatagramSocketMessageReceivedEventArgs.all.Release;
            Free (this.m_IDatagramSocketMessageReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DatagramSocketMessageReceivedEventArgs

   function get_RemoteAddress
   (
      this : in out DatagramSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDatagramSocketMessageReceivedEventArgs.all.get_RemoteAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_RemotePort
   (
      this : in out DatagramSocketMessageReceivedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDatagramSocketMessageReceivedEventArgs.all.get_RemotePort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LocalAddress
   (
      this : in out DatagramSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDatagramSocketMessageReceivedEventArgs.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function GetDataReader
   (
      this : in out DatagramSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.DataReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IDataReader;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.DataReader do
         Hr := this.m_IDatagramSocketMessageReceivedEventArgs.all.GetDataReader (m_ComRetVal'Access);
         Retval.m_IDataReader := new Windows.Storage.Streams.IDataReader;
         Retval.m_IDataReader.all := m_ComRetVal;
      end return;
   end;

   function GetDataStream
   (
      this : in out DatagramSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IDatagramSocketMessageReceivedEventArgs.all.GetDataStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MessageWebSocket

   procedure Initialize (this : in out MessageWebSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out MessageWebSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMessageWebSocket, IMessageWebSocket_Ptr);
   begin
      if this.m_IMessageWebSocket /= null then
         if this.m_IMessageWebSocket.all /= null then
            RefCount := this.m_IMessageWebSocket.all.Release;
            Free (this.m_IMessageWebSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MessageWebSocket

   function Constructor return MessageWebSocket is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.MessageWebSocket");
      m_ComRetVal  : aliased Windows.Networking.Sockets.IMessageWebSocket;
   begin
      return RetVal : MessageWebSocket do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMessageWebSocket := new Windows.Networking.Sockets.IMessageWebSocket;
            Retval.m_IMessageWebSocket.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MessageWebSocket

   function get_Control
   (
      this : in out MessageWebSocket
   )
   return WinRt.Windows.Networking.Sockets.MessageWebSocketControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IMessageWebSocketControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.MessageWebSocketControl do
         Hr := this.m_IMessageWebSocket.all.get_Control (m_ComRetVal'Access);
         Retval.m_IMessageWebSocketControl := new Windows.Networking.Sockets.IMessageWebSocketControl;
         Retval.m_IMessageWebSocketControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out MessageWebSocket
   )
   return WinRt.Windows.Networking.Sockets.MessageWebSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IWebSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.MessageWebSocketInformation do
         Hr := this.m_IMessageWebSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IWebSocketInformation := new Windows.Networking.Sockets.IWebSocketInformation;
         Retval.m_IWebSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function add_MessageReceived
   (
      this : in out MessageWebSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMessageWebSocket.all.add_MessageReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageReceived
   (
      this : in out MessageWebSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageWebSocket.all.remove_MessageReceived (eventCookie);
   end;

   function get_OutputStream
   (
      this : in out MessageWebSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.get_OutputStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ConnectAsync
   (
      this : in out MessageWebSocket;
      uri : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.ConnectAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetRequestHeader
   (
      this : in out MessageWebSocket;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   function add_Closed
   (
      this : in out MessageWebSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.add_Closed (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out MessageWebSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.remove_Closed (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out MessageWebSocket;
      code : WinRt.UInt16;
      reason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_reason : WinRt.HString := To_HString (reason);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.Close (code, HStr_reason);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_reason);
   end;

   procedure Close
   (
      this : in out MessageWebSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function add_ServerCustomValidationRequested
   (
      this : in out MessageWebSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocket2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.add_ServerCustomValidationRequested (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ServerCustomValidationRequested
   (
      this : in out MessageWebSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocket2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.remove_ServerCustomValidationRequested (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   function SendNonfinalFrameAsync
   (
      this : in out MessageWebSocket;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocket3, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.SendNonfinalFrameAsync (data, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendFinalFrameAsync
   (
      this : in out MessageWebSocket;
      data : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocket_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocket3, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocket.all);
      Hr := m_Interface.SendFinalFrameAsync (data, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MessageWebSocketControl

   procedure Initialize (this : in out MessageWebSocketControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out MessageWebSocketControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMessageWebSocketControl, IMessageWebSocketControl_Ptr);
   begin
      if this.m_IMessageWebSocketControl /= null then
         if this.m_IMessageWebSocketControl.all /= null then
            RefCount := this.m_IMessageWebSocketControl.all.Release;
            Free (this.m_IMessageWebSocketControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MessageWebSocketControl

   function get_MaxMessageSize
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMessageWebSocketControl.all.get_MaxMessageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxMessageSize
   (
      this : in out MessageWebSocketControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageWebSocketControl.all.put_MaxMessageSize (value);
   end;

   function get_MessageType
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Networking.Sockets.SocketMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketMessageType;
   begin
      Hr := this.m_IMessageWebSocketControl.all.get_MessageType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MessageType
   (
      this : in out MessageWebSocketControl;
      value : Windows.Networking.Sockets.SocketMessageType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMessageWebSocketControl.all.put_MessageType (value);
   end;

   function get_OutboundBufferSizeInBytes
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_OutboundBufferSizeInBytes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutboundBufferSizeInBytes
   (
      this : in out MessageWebSocketControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_OutboundBufferSizeInBytes (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ServerCredential
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
         Hr := m_Interface.get_ServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out MessageWebSocketControl;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_ServerCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProxyCredential
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
         Hr := m_Interface.get_ProxyCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out MessageWebSocketControl;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_ProxyCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SupportedProtocols
   (
      this : in out MessageWebSocketControl
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_SupportedProtocols (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IgnorableServerCertificateErrors
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_IgnorableServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredUnsolicitedPongInterval
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_DesiredUnsolicitedPongInterval (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredUnsolicitedPongInterval
   (
      this : in out MessageWebSocketControl;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_DesiredUnsolicitedPongInterval (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ActualUnsolicitedPongInterval
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_ActualUnsolicitedPongInterval (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ReceiveMode
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Networking.Sockets.MessageWebSocketReceiveMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.MessageWebSocketReceiveMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.get_ReceiveMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ReceiveMode
   (
      this : in out MessageWebSocketControl;
      value : Windows.Networking.Sockets.MessageWebSocketReceiveMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_ReceiveMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ClientCertificate
   (
      this : in out MessageWebSocketControl
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
         Hr := m_Interface.get_ClientCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   procedure put_ClientCertificate
   (
      this : in out MessageWebSocketControl;
      value : Windows.Security.Cryptography.Certificates.Certificate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketControl.all);
      Hr := m_Interface.put_ClientCertificate (value.m_ICertificate.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MessageWebSocketInformation

   procedure Initialize (this : in out MessageWebSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out MessageWebSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebSocketInformation, IWebSocketInformation_Ptr);
   begin
      if this.m_IWebSocketInformation /= null then
         if this.m_IWebSocketInformation.all /= null then
            RefCount := this.m_IWebSocketInformation.all.Release;
            Free (this.m_IWebSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MessageWebSocketInformation

   function get_LocalAddress
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IWebSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_BandwidthStatistics
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.BandwidthStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.BandwidthStatistics;
   begin
      Hr := this.m_IWebSocketInformation.all.get_BandwidthStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Protocol
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebSocketInformation.all.get_Protocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServerCertificate
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IWebSocketInformation.all);
         Hr := m_Interface.get_ServerCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out MessageWebSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MessageWebSocketMessageReceivedEventArgs

   procedure Initialize (this : in out MessageWebSocketMessageReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MessageWebSocketMessageReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMessageWebSocketMessageReceivedEventArgs, IMessageWebSocketMessageReceivedEventArgs_Ptr);
   begin
      if this.m_IMessageWebSocketMessageReceivedEventArgs /= null then
         if this.m_IMessageWebSocketMessageReceivedEventArgs.all /= null then
            RefCount := this.m_IMessageWebSocketMessageReceivedEventArgs.all.Release;
            Free (this.m_IMessageWebSocketMessageReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MessageWebSocketMessageReceivedEventArgs

   function get_MessageType
   (
      this : in out MessageWebSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.SocketMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketMessageType;
   begin
      Hr := this.m_IMessageWebSocketMessageReceivedEventArgs.all.get_MessageType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDataReader
   (
      this : in out MessageWebSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.DataReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IDataReader;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.DataReader do
         Hr := this.m_IMessageWebSocketMessageReceivedEventArgs.all.GetDataReader (m_ComRetVal'Access);
         Retval.m_IDataReader := new Windows.Storage.Streams.IDataReader;
         Retval.m_IDataReader.all := m_ComRetVal;
      end return;
   end;

   function GetDataStream
   (
      this : in out MessageWebSocketMessageReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IMessageWebSocketMessageReceivedEventArgs.all.GetDataStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMessageComplete
   (
      this : in out MessageWebSocketMessageReceivedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs_Interface, WinRt.Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2, WinRt.Windows.Networking.Sockets.IID_IMessageWebSocketMessageReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMessageWebSocketMessageReceivedEventArgs.all);
      Hr := m_Interface.get_IsMessageComplete (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServerMessageWebSocket

   procedure Initialize (this : in out ServerMessageWebSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServerMessageWebSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServerMessageWebSocket, IServerMessageWebSocket_Ptr);
   begin
      if this.m_IServerMessageWebSocket /= null then
         if this.m_IServerMessageWebSocket.all /= null then
            RefCount := this.m_IServerMessageWebSocket.all.Release;
            Free (this.m_IServerMessageWebSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServerMessageWebSocket

   function add_MessageReceived
   (
      this : in out ServerMessageWebSocket;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IServerMessageWebSocket.all.add_MessageReceived (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageReceived
   (
      this : in out ServerMessageWebSocket;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IServerMessageWebSocket.all.remove_MessageReceived (token);
   end;

   function get_Control
   (
      this : in out ServerMessageWebSocket
   )
   return WinRt.Windows.Networking.Sockets.ServerMessageWebSocketControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerMessageWebSocketControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerMessageWebSocketControl do
         Hr := this.m_IServerMessageWebSocket.all.get_Control (m_ComRetVal'Access);
         Retval.m_IServerMessageWebSocketControl := new Windows.Networking.Sockets.IServerMessageWebSocketControl;
         Retval.m_IServerMessageWebSocketControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out ServerMessageWebSocket
   )
   return WinRt.Windows.Networking.Sockets.ServerMessageWebSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerMessageWebSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerMessageWebSocketInformation do
         Hr := this.m_IServerMessageWebSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IServerMessageWebSocketInformation := new Windows.Networking.Sockets.IServerMessageWebSocketInformation;
         Retval.m_IServerMessageWebSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function get_OutputStream
   (
      this : in out ServerMessageWebSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IServerMessageWebSocket.all.get_OutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Closed
   (
      this : in out ServerMessageWebSocket;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IServerMessageWebSocket.all.add_Closed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ServerMessageWebSocket;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IServerMessageWebSocket.all.remove_Closed (token);
   end;

   procedure Close
   (
      this : in out ServerMessageWebSocket;
      code : WinRt.UInt16;
      reason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_reason : WinRt.HString := To_HString (reason);
   begin
      Hr := this.m_IServerMessageWebSocket.all.Close (code, HStr_reason);
      Hr := WindowsDeleteString (HStr_reason);
   end;

   procedure Close
   (
      this : in out ServerMessageWebSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IServerMessageWebSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServerMessageWebSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServerMessageWebSocketControl

   procedure Initialize (this : in out ServerMessageWebSocketControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServerMessageWebSocketControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServerMessageWebSocketControl, IServerMessageWebSocketControl_Ptr);
   begin
      if this.m_IServerMessageWebSocketControl /= null then
         if this.m_IServerMessageWebSocketControl.all /= null then
            RefCount := this.m_IServerMessageWebSocketControl.all.Release;
            Free (this.m_IServerMessageWebSocketControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServerMessageWebSocketControl

   function get_MessageType
   (
      this : in out ServerMessageWebSocketControl
   )
   return WinRt.Windows.Networking.Sockets.SocketMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketMessageType;
   begin
      Hr := this.m_IServerMessageWebSocketControl.all.get_MessageType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MessageType
   (
      this : in out ServerMessageWebSocketControl;
      value : Windows.Networking.Sockets.SocketMessageType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IServerMessageWebSocketControl.all.put_MessageType (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServerMessageWebSocketInformation

   procedure Initialize (this : in out ServerMessageWebSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServerMessageWebSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServerMessageWebSocketInformation, IServerMessageWebSocketInformation_Ptr);
   begin
      if this.m_IServerMessageWebSocketInformation /= null then
         if this.m_IServerMessageWebSocketInformation.all /= null then
            RefCount := this.m_IServerMessageWebSocketInformation.all.Release;
            Free (this.m_IServerMessageWebSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServerMessageWebSocketInformation

   function get_BandwidthStatistics
   (
      this : in out ServerMessageWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.BandwidthStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.BandwidthStatistics;
   begin
      Hr := this.m_IServerMessageWebSocketInformation.all.get_BandwidthStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Protocol
   (
      this : in out ServerMessageWebSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IServerMessageWebSocketInformation.all.get_Protocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LocalAddress
   (
      this : in out ServerMessageWebSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IServerMessageWebSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServerStreamWebSocket

   procedure Initialize (this : in out ServerStreamWebSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServerStreamWebSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServerStreamWebSocket, IServerStreamWebSocket_Ptr);
   begin
      if this.m_IServerStreamWebSocket /= null then
         if this.m_IServerStreamWebSocket.all /= null then
            RefCount := this.m_IServerStreamWebSocket.all.Release;
            Free (this.m_IServerStreamWebSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServerStreamWebSocket

   function get_Information
   (
      this : in out ServerStreamWebSocket
   )
   return WinRt.Windows.Networking.Sockets.ServerStreamWebSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IServerStreamWebSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.ServerStreamWebSocketInformation do
         Hr := this.m_IServerStreamWebSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IServerStreamWebSocketInformation := new Windows.Networking.Sockets.IServerStreamWebSocketInformation;
         Retval.m_IServerStreamWebSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function get_InputStream
   (
      this : in out ServerStreamWebSocket
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IServerStreamWebSocket.all.get_InputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OutputStream
   (
      this : in out ServerStreamWebSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IServerStreamWebSocket.all.get_OutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Closed
   (
      this : in out ServerStreamWebSocket;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IServerStreamWebSocket.all.add_Closed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out ServerStreamWebSocket;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IServerStreamWebSocket.all.remove_Closed (token);
   end;

   procedure Close
   (
      this : in out ServerStreamWebSocket;
      code : WinRt.UInt16;
      reason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_reason : WinRt.HString := To_HString (reason);
   begin
      Hr := this.m_IServerStreamWebSocket.all.Close (code, HStr_reason);
      Hr := WindowsDeleteString (HStr_reason);
   end;

   procedure Close
   (
      this : in out ServerStreamWebSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IServerStreamWebSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IServerStreamWebSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ServerStreamWebSocketInformation

   procedure Initialize (this : in out ServerStreamWebSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out ServerStreamWebSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IServerStreamWebSocketInformation, IServerStreamWebSocketInformation_Ptr);
   begin
      if this.m_IServerStreamWebSocketInformation /= null then
         if this.m_IServerStreamWebSocketInformation.all /= null then
            RefCount := this.m_IServerStreamWebSocketInformation.all.Release;
            Free (this.m_IServerStreamWebSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ServerStreamWebSocketInformation

   function get_BandwidthStatistics
   (
      this : in out ServerStreamWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.BandwidthStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.BandwidthStatistics;
   begin
      Hr := this.m_IServerStreamWebSocketInformation.all.get_BandwidthStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Protocol
   (
      this : in out ServerStreamWebSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IServerStreamWebSocketInformation.all.get_Protocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LocalAddress
   (
      this : in out ServerStreamWebSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IServerStreamWebSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocketActivityContext

   procedure Initialize (this : in out SocketActivityContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocketActivityContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocketActivityContext, ISocketActivityContext_Ptr);
   begin
      if this.m_ISocketActivityContext /= null then
         if this.m_ISocketActivityContext.all /= null then
            RefCount := this.m_ISocketActivityContext.all.Release;
            Free (this.m_ISocketActivityContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocketActivityContext

   function Constructor
   (
      data : Windows.Storage.Streams.IBuffer
   )
   return SocketActivityContext is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.SocketActivityContext");
      m_Factory    : access ISocketActivityContextFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.Sockets.ISocketActivityContext;
   begin
      return RetVal : SocketActivityContext do
         Hr := RoGetActivationFactory (m_hString, IID_ISocketActivityContextFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (data, m_ComRetVal'Access);
            Retval.m_ISocketActivityContext := new Windows.Networking.Sockets.ISocketActivityContext;
            Retval.m_ISocketActivityContext.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocketActivityContext

   function get_Data
   (
      this : in out SocketActivityContext
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISocketActivityContext.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocketActivityInformation

   procedure Initialize (this : in out SocketActivityInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocketActivityInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocketActivityInformation, ISocketActivityInformation_Ptr);
   begin
      if this.m_ISocketActivityInformation /= null then
         if this.m_ISocketActivityInformation.all /= null then
            RefCount := this.m_ISocketActivityInformation.all.Release;
            Free (this.m_ISocketActivityInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SocketActivityInformation

   function get_AllSockets
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.SocketActivityInformation");
      m_Factory        : access WinRt.Windows.Networking.Sockets.ISocketActivityInformationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISocketActivityInformationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllSockets (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocketActivityInformation

   function get_TaskId
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ISocketActivityInformation.all.get_TaskId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out SocketActivityInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISocketActivityInformation.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SocketKind
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketActivityKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketActivityKind;
   begin
      Hr := this.m_ISocketActivityInformation.all.get_SocketKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Context
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketActivityContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.ISocketActivityContext;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.SocketActivityContext do
         Hr := this.m_ISocketActivityInformation.all.get_Context (m_ComRetVal'Access);
         Retval.m_ISocketActivityContext := new Windows.Networking.Sockets.ISocketActivityContext;
         Retval.m_ISocketActivityContext.all := m_ComRetVal;
      end return;
   end;

   function get_DatagramSocket
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Windows.Networking.Sockets.DatagramSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IDatagramSocket;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.DatagramSocket do
         Hr := this.m_ISocketActivityInformation.all.get_DatagramSocket (m_ComRetVal'Access);
         Retval.m_IDatagramSocket := new Windows.Networking.Sockets.IDatagramSocket;
         Retval.m_IDatagramSocket.all := m_ComRetVal;
      end return;
   end;

   function get_StreamSocket
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Windows.Networking.Sockets.StreamSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocket;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocket do
         Hr := this.m_ISocketActivityInformation.all.get_StreamSocket (m_ComRetVal'Access);
         Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
         Retval.m_IStreamSocket.all := m_ComRetVal;
      end return;
   end;

   function get_StreamSocketListener
   (
      this : in out SocketActivityInformation
   )
   return WinRt.Windows.Networking.Sockets.StreamSocketListener'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocketListener;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocketListener do
         Hr := this.m_ISocketActivityInformation.all.get_StreamSocketListener (m_ComRetVal'Access);
         Retval.m_IStreamSocketListener := new Windows.Networking.Sockets.IStreamSocketListener;
         Retval.m_IStreamSocketListener.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocketActivityTriggerDetails

   procedure Initialize (this : in out SocketActivityTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocketActivityTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISocketActivityTriggerDetails, ISocketActivityTriggerDetails_Ptr);
   begin
      if this.m_ISocketActivityTriggerDetails /= null then
         if this.m_ISocketActivityTriggerDetails.all /= null then
            RefCount := this.m_ISocketActivityTriggerDetails.all.Release;
            Free (this.m_ISocketActivityTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocketActivityTriggerDetails

   function get_Reason
   (
      this : in out SocketActivityTriggerDetails
   )
   return WinRt.Windows.Networking.Sockets.SocketActivityTriggerReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketActivityTriggerReason;
   begin
      Hr := this.m_ISocketActivityTriggerDetails.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SocketInformation
   (
      this : in out SocketActivityTriggerDetails
   )
   return WinRt.Windows.Networking.Sockets.SocketActivityInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.ISocketActivityInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.SocketActivityInformation do
         Hr := this.m_ISocketActivityTriggerDetails.all.get_SocketInformation (m_ComRetVal'Access);
         Retval.m_ISocketActivityInformation := new Windows.Networking.Sockets.ISocketActivityInformation;
         Retval.m_ISocketActivityInformation.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body SocketError is

      function GetStatus
      (
         hresult : WinRt.Int32
      )
      return WinRt.Windows.Networking.Sockets.SocketErrorStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.SocketError");
         m_Factory        : access WinRt.Windows.Networking.Sockets.ISocketErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Networking.Sockets.SocketErrorStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ISocketErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStatus (hresult, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end SocketError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocket

   procedure Initialize (this : in out StreamSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocket, IStreamSocket_Ptr);
   begin
      if this.m_IStreamSocket /= null then
         if this.m_IStreamSocket.all /= null then
            RefCount := this.m_IStreamSocket.all.Release;
            Free (this.m_IStreamSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StreamSocket

   function Constructor return StreamSocket is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.StreamSocket");
      m_ComRetVal  : aliased Windows.Networking.Sockets.IStreamSocket;
   begin
      return RetVal : StreamSocket do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
            Retval.m_IStreamSocket.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for StreamSocket

   function GetEndpointPairsAsync_StreamSocket
   (
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.StreamSocket");
      m_Factory        : access WinRt.Windows.Networking.Sockets.IStreamSocketStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2948792206, 58259, 22122, (137, 196, 208, 67, 233, 64, 5, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (550959787, 15246, 23071, (131, 151, 176, 28, 178, 25, 161, 141 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IStreamSocketStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEndpointPairsAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_remoteServiceName);
      return m_RetVal;
   end;

   function GetEndpointPairsAsync_StreamSocket
   (
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString;
      sortOptions : Windows.Networking.HostNameSortOptions
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.StreamSocket");
      m_Factory        : access WinRt.Windows.Networking.Sockets.IStreamSocketStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2948792206, 58259, 22122, (137, 196, 208, 67, 233, 64, 5, 13 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (550959787, 15246, 23071, (131, 151, 176, 28, 178, 25, 161, 141 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IStreamSocketStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetEndpointPairsAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, sortOptions, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_remoteServiceName);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocket

   function get_Control
   (
      this : in out StreamSocket
   )
   return WinRt.Windows.Networking.Sockets.StreamSocketControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocketControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocketControl do
         Hr := this.m_IStreamSocket.all.get_Control (m_ComRetVal'Access);
         Retval.m_IStreamSocketControl := new Windows.Networking.Sockets.IStreamSocketControl;
         Retval.m_IStreamSocketControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out StreamSocket
   )
   return WinRt.Windows.Networking.Sockets.StreamSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocketInformation do
         Hr := this.m_IStreamSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IStreamSocketInformation := new Windows.Networking.Sockets.IStreamSocketInformation;
         Retval.m_IStreamSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function get_InputStream
   (
      this : in out StreamSocket
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IStreamSocket.all.get_InputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OutputStream
   (
      this : in out StreamSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IStreamSocket.all.get_OutputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ConnectAsync
   (
      this : in out StreamSocket;
      endpointPair : Windows.Networking.EndpointPair'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocket.all.ConnectAsync (endpointPair.m_IEndpointPair.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ConnectAsync
   (
      this : in out StreamSocket;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocket.all.ConnectAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteServiceName);
   end;

   procedure ConnectAsync
   (
      this : in out StreamSocket;
      endpointPair : Windows.Networking.EndpointPair'Class;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocket.all.ConnectAsync (endpointPair.m_IEndpointPair.all, protectionLevel, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ConnectAsync
   (
      this : in out StreamSocket;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocket.all.ConnectAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, protectionLevel, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteServiceName);
   end;

   procedure UpgradeToSslAsync
   (
      this : in out StreamSocket;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel;
      validationHostName : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocket.all.UpgradeToSslAsync (protectionLevel, validationHostName.m_IHostName.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out StreamSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure ConnectAsync
   (
      this : in out StreamSocket;
      remoteHostName : Windows.Networking.HostName'Class;
      remoteServiceName : WinRt.WString;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_remoteServiceName : WinRt.HString := To_HString (remoteServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket2, WinRt.Windows.Networking.Sockets.IID_IStreamSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.ConnectAsync (remoteHostName.m_IHostName.all, HStr_remoteServiceName, protectionLevel, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_remoteServiceName);
   end;

   procedure CancelIOAsync
   (
      this : in out StreamSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.CancelIOAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure EnableTransferOwnership
   (
      this : in out StreamSocket;
      taskId : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.EnableTransferOwnership (taskId);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableTransferOwnership
   (
      this : in out StreamSocket;
      taskId : WinRt.Guid;
      connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.EnableTransferOwnership (taskId, connectedStandbyAction);
      m_RefCount := m_Interface.Release;
   end;

   procedure TransferOwnership
   (
      this : in out StreamSocket;
      socketId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   procedure TransferOwnership
   (
      this : in out StreamSocket;
      socketId : WinRt.WString;
      data : Windows.Networking.Sockets.SocketActivityContext'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId, data.m_ISocketActivityContext.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   procedure TransferOwnership
   (
      this : in out StreamSocket;
      socketId : WinRt.WString;
      data : Windows.Networking.Sockets.SocketActivityContext'Class;
      keepAliveTime : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocket3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamSocket3, WinRt.Windows.Networking.Sockets.IID_IStreamSocket3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocket.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId, data.m_ISocketActivityContext.all, keepAliveTime);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketControl

   procedure Initialize (this : in out StreamSocketControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketControl, IStreamSocketControl_Ptr);
   begin
      if this.m_IStreamSocketControl /= null then
         if this.m_IStreamSocketControl.all /= null then
            RefCount := this.m_IStreamSocketControl.all.Release;
            Free (this.m_IStreamSocketControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketControl

   function get_NoDelay
   (
      this : in out StreamSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStreamSocketControl.all.get_NoDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NoDelay
   (
      this : in out StreamSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketControl.all.put_NoDelay (value);
   end;

   function get_KeepAlive
   (
      this : in out StreamSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStreamSocketControl.all.get_KeepAlive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_KeepAlive
   (
      this : in out StreamSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketControl.all.put_KeepAlive (value);
   end;

   function get_OutboundBufferSizeInBytes
   (
      this : in out StreamSocketControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IStreamSocketControl.all.get_OutboundBufferSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutboundBufferSizeInBytes
   (
      this : in out StreamSocketControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketControl.all.put_OutboundBufferSizeInBytes (value);
   end;

   function get_QualityOfService
   (
      this : in out StreamSocketControl
   )
   return WinRt.Windows.Networking.Sockets.SocketQualityOfService is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketQualityOfService;
   begin
      Hr := this.m_IStreamSocketControl.all.get_QualityOfService (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QualityOfService
   (
      this : in out StreamSocketControl;
      value : Windows.Networking.Sockets.SocketQualityOfService
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketControl.all.put_QualityOfService (value);
   end;

   function get_OutboundUnicastHopLimit
   (
      this : in out StreamSocketControl
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IStreamSocketControl.all.get_OutboundUnicastHopLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OutboundUnicastHopLimit
   (
      this : in out StreamSocketControl;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketControl.all.put_OutboundUnicastHopLimit (value);
   end;

   function get_IgnorableServerCertificateErrors
   (
      this : in out StreamSocketControl
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.get_IgnorableServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SerializeConnectionAttempts
   (
      this : in out StreamSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.get_SerializeConnectionAttempts (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SerializeConnectionAttempts
   (
      this : in out StreamSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.put_SerializeConnectionAttempts (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ClientCertificate
   (
      this : in out StreamSocketControl
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IStreamSocketControl.all);
         Hr := m_Interface.get_ClientCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   procedure put_ClientCertificate
   (
      this : in out StreamSocketControl;
      value : Windows.Security.Cryptography.Certificates.Certificate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.put_ClientCertificate (value.m_ICertificate.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_MinProtectionLevel
   (
      this : in out StreamSocketControl
   )
   return WinRt.Windows.Networking.Sockets.SocketProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketProtectionLevel;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl4, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.get_MinProtectionLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MinProtectionLevel
   (
      this : in out StreamSocketControl;
      value : Windows.Networking.Sockets.SocketProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketControl4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketControl4, WinRt.Windows.Networking.Sockets.IID_IStreamSocketControl4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketControl.all);
      Hr := m_Interface.put_MinProtectionLevel (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketInformation

   procedure Initialize (this : in out StreamSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketInformation, IStreamSocketInformation_Ptr);
   begin
      if this.m_IStreamSocketInformation /= null then
         if this.m_IStreamSocketInformation.all /= null then
            RefCount := this.m_IStreamSocketInformation.all.Release;
            Free (this.m_IStreamSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketInformation

   function get_LocalAddress
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IStreamSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_LocalPort
   (
      this : in out StreamSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_LocalPort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RemoteHostName
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IStreamSocketInformation.all.get_RemoteHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteAddress
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IStreamSocketInformation.all.get_RemoteAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_RemoteServiceName
   (
      this : in out StreamSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_RemoteServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RemotePort
   (
      this : in out StreamSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_RemotePort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RoundTripTimeStatistics
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.RoundTripTimeStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.RoundTripTimeStatistics;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_RoundTripTimeStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BandwidthStatistics
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.BandwidthStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.BandwidthStatistics;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_BandwidthStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionLevel
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketProtectionLevel;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_ProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SessionKey
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IStreamSocketInformation.all.get_SessionKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out StreamSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerCertificate
   (
      this : in out StreamSocketInformation
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketInformation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IStreamSocketInformation.all);
         Hr := m_Interface.get_ServerCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out StreamSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketInformation.all);
      Hr := m_Interface.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketListener

   procedure Initialize (this : in out StreamSocketListener) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketListener) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketListener, IStreamSocketListener_Ptr);
   begin
      if this.m_IStreamSocketListener /= null then
         if this.m_IStreamSocketListener.all /= null then
            RefCount := this.m_IStreamSocketListener.all.Release;
            Free (this.m_IStreamSocketListener);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StreamSocketListener

   function Constructor return StreamSocketListener is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.StreamSocketListener");
      m_ComRetVal  : aliased Windows.Networking.Sockets.IStreamSocketListener;
   begin
      return RetVal : StreamSocketListener do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStreamSocketListener := new Windows.Networking.Sockets.IStreamSocketListener;
            Retval.m_IStreamSocketListener.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketListener

   function get_Control
   (
      this : in out StreamSocketListener
   )
   return WinRt.Windows.Networking.Sockets.StreamSocketListenerControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocketListenerControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocketListenerControl do
         Hr := this.m_IStreamSocketListener.all.get_Control (m_ComRetVal'Access);
         Retval.m_IStreamSocketListenerControl := new Windows.Networking.Sockets.IStreamSocketListenerControl;
         Retval.m_IStreamSocketListenerControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out StreamSocketListener
   )
   return WinRt.Windows.Networking.Sockets.StreamSocketListenerInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocketListenerInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocketListenerInformation do
         Hr := this.m_IStreamSocketListener.all.get_Information (m_ComRetVal'Access);
         Retval.m_IStreamSocketListenerInformation := new Windows.Networking.Sockets.IStreamSocketListenerInformation;
         Retval.m_IStreamSocketListenerInformation.all := m_ComRetVal;
      end return;
   end;

   procedure BindServiceNameAsync
   (
      this : in out StreamSocketListener;
      localServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocketListener.all.BindServiceNameAsync (HStr_localServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure BindEndpointAsync
   (
      this : in out StreamSocketListener;
      localHostName : Windows.Networking.HostName'Class;
      localServiceName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IStreamSocketListener.all.BindEndpointAsync (localHostName.m_IHostName.all, HStr_localServiceName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   function add_ConnectionReceived
   (
      this : in out StreamSocketListener;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IStreamSocketListener.all.add_ConnectionReceived (eventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionReceived
   (
      this : in out StreamSocketListener;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketListener.all.remove_ConnectionReceived (eventCookie);
   end;

   procedure Close
   (
      this : in out StreamSocketListener
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   procedure BindServiceNameAsync
   (
      this : in out StreamSocketListener;
      localServiceName : WinRt.WString;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.BindServiceNameAsync (HStr_localServiceName, protectionLevel, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure BindServiceNameAsync
   (
      this : in out StreamSocketListener;
      localServiceName : WinRt.WString;
      protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_localServiceName : WinRt.HString := To_HString (localServiceName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.BindServiceNameAsync (HStr_localServiceName, protectionLevel, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_localServiceName);
   end;

   procedure CancelIOAsync
   (
      this : in out StreamSocketListener
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.CancelIOAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure EnableTransferOwnership
   (
      this : in out StreamSocketListener;
      taskId : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.EnableTransferOwnership (taskId);
      m_RefCount := m_Interface.Release;
   end;

   procedure EnableTransferOwnership
   (
      this : in out StreamSocketListener;
      taskId : WinRt.Guid;
      connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.EnableTransferOwnership (taskId, connectedStandbyAction);
      m_RefCount := m_Interface.Release;
   end;

   procedure TransferOwnership
   (
      this : in out StreamSocketListener;
      socketId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   procedure TransferOwnership
   (
      this : in out StreamSocketListener;
      socketId : WinRt.WString;
      data : Windows.Networking.Sockets.SocketActivityContext'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListener3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_socketId : WinRt.HString := To_HString (socketId);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListener_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListener3, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListener3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListener.all);
      Hr := m_Interface.TransferOwnership (HStr_socketId, data.m_ISocketActivityContext.all);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_socketId);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketListenerConnectionReceivedEventArgs

   procedure Initialize (this : in out StreamSocketListenerConnectionReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketListenerConnectionReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketListenerConnectionReceivedEventArgs, IStreamSocketListenerConnectionReceivedEventArgs_Ptr);
   begin
      if this.m_IStreamSocketListenerConnectionReceivedEventArgs /= null then
         if this.m_IStreamSocketListenerConnectionReceivedEventArgs.all /= null then
            RefCount := this.m_IStreamSocketListenerConnectionReceivedEventArgs.all.Release;
            Free (this.m_IStreamSocketListenerConnectionReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketListenerConnectionReceivedEventArgs

   function get_Socket
   (
      this : in out StreamSocketListenerConnectionReceivedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.StreamSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocket;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocket do
         Hr := this.m_IStreamSocketListenerConnectionReceivedEventArgs.all.get_Socket (m_ComRetVal'Access);
         Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
         Retval.m_IStreamSocket.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketListenerControl

   procedure Initialize (this : in out StreamSocketListenerControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketListenerControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketListenerControl, IStreamSocketListenerControl_Ptr);
   begin
      if this.m_IStreamSocketListenerControl /= null then
         if this.m_IStreamSocketListenerControl.all /= null then
            RefCount := this.m_IStreamSocketListenerControl.all.Release;
            Free (this.m_IStreamSocketListenerControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketListenerControl

   function get_QualityOfService
   (
      this : in out StreamSocketListenerControl
   )
   return WinRt.Windows.Networking.Sockets.SocketQualityOfService is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketQualityOfService;
   begin
      Hr := this.m_IStreamSocketListenerControl.all.get_QualityOfService (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_QualityOfService
   (
      this : in out StreamSocketListenerControl;
      value : Windows.Networking.Sockets.SocketQualityOfService
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamSocketListenerControl.all.put_QualityOfService (value);
   end;

   function get_NoDelay
   (
      this : in out StreamSocketListenerControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.get_NoDelay (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_NoDelay
   (
      this : in out StreamSocketListenerControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.put_NoDelay (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_KeepAlive
   (
      this : in out StreamSocketListenerControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.get_KeepAlive (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_KeepAlive
   (
      this : in out StreamSocketListenerControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.put_KeepAlive (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutboundBufferSizeInBytes
   (
      this : in out StreamSocketListenerControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.get_OutboundBufferSizeInBytes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutboundBufferSizeInBytes
   (
      this : in out StreamSocketListenerControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.put_OutboundBufferSizeInBytes (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutboundUnicastHopLimit
   (
      this : in out StreamSocketListenerControl
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.get_OutboundUnicastHopLimit (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutboundUnicastHopLimit
   (
      this : in out StreamSocketListenerControl;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl_Interface, WinRt.Windows.Networking.Sockets.IStreamSocketListenerControl2, WinRt.Windows.Networking.Sockets.IID_IStreamSocketListenerControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamSocketListenerControl.all);
      Hr := m_Interface.put_OutboundUnicastHopLimit (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamSocketListenerInformation

   procedure Initialize (this : in out StreamSocketListenerInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamSocketListenerInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamSocketListenerInformation, IStreamSocketListenerInformation_Ptr);
   begin
      if this.m_IStreamSocketListenerInformation /= null then
         if this.m_IStreamSocketListenerInformation.all /= null then
            RefCount := this.m_IStreamSocketListenerInformation.all.Release;
            Free (this.m_IStreamSocketListenerInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamSocketListenerInformation

   function get_LocalPort
   (
      this : in out StreamSocketListenerInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IStreamSocketListenerInformation.all.get_LocalPort (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamWebSocket

   procedure Initialize (this : in out StreamWebSocket) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamWebSocket) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamWebSocket, IStreamWebSocket_Ptr);
   begin
      if this.m_IStreamWebSocket /= null then
         if this.m_IStreamWebSocket.all /= null then
            RefCount := this.m_IStreamWebSocket.all.Release;
            Free (this.m_IStreamWebSocket);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StreamWebSocket

   function Constructor return StreamWebSocket is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.StreamWebSocket");
      m_ComRetVal  : aliased Windows.Networking.Sockets.IStreamWebSocket;
   begin
      return RetVal : StreamWebSocket do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IStreamWebSocket := new Windows.Networking.Sockets.IStreamWebSocket;
            Retval.m_IStreamWebSocket.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamWebSocket

   function get_Control
   (
      this : in out StreamWebSocket
   )
   return WinRt.Windows.Networking.Sockets.StreamWebSocketControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamWebSocketControl;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamWebSocketControl do
         Hr := this.m_IStreamWebSocket.all.get_Control (m_ComRetVal'Access);
         Retval.m_IStreamWebSocketControl := new Windows.Networking.Sockets.IStreamWebSocketControl;
         Retval.m_IStreamWebSocketControl.all := m_ComRetVal;
      end return;
   end;

   function get_Information
   (
      this : in out StreamWebSocket
   )
   return WinRt.Windows.Networking.Sockets.StreamWebSocketInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IWebSocketInformation;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamWebSocketInformation do
         Hr := this.m_IStreamWebSocket.all.get_Information (m_ComRetVal'Access);
         Retval.m_IWebSocketInformation := new Windows.Networking.Sockets.IWebSocketInformation;
         Retval.m_IWebSocketInformation.all := m_ComRetVal;
      end return;
   end;

   function get_InputStream
   (
      this : in out StreamWebSocket
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IStreamWebSocket.all.get_InputStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OutputStream
   (
      this : in out StreamWebSocket
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.get_OutputStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure ConnectAsync
   (
      this : in out StreamWebSocket;
      uri : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.ConnectAsync (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetRequestHeader
   (
      this : in out StreamWebSocket;
      headerName : WinRt.WString;
      headerValue : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_headerName : WinRt.HString := To_HString (headerName);
      HStr_headerValue : WinRt.HString := To_HString (headerValue);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.SetRequestHeader (HStr_headerName, HStr_headerValue);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_headerName);
      Hr := WindowsDeleteString (HStr_headerValue);
   end;

   function add_Closed
   (
      this : in out StreamWebSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.add_Closed (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_Closed
   (
      this : in out StreamWebSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.remove_Closed (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out StreamWebSocket;
      code : WinRt.UInt16;
      reason : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocket := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_reason : WinRt.HString := To_HString (reason);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IWebSocket, WinRt.Windows.Networking.Sockets.IID_IWebSocket'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.Close (code, HStr_reason);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_reason);
   end;

   procedure Close
   (
      this : in out StreamWebSocket
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function add_ServerCustomValidationRequested
   (
      this : in out StreamWebSocket;
      eventHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocket2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.add_ServerCustomValidationRequested (eventHandler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ServerCustomValidationRequested
   (
      this : in out StreamWebSocket;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocket2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocket_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocket2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocket2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocket.all);
      Hr := m_Interface.remove_ServerCustomValidationRequested (eventCookie);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamWebSocketControl

   procedure Initialize (this : in out StreamWebSocketControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamWebSocketControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStreamWebSocketControl, IStreamWebSocketControl_Ptr);
   begin
      if this.m_IStreamWebSocketControl /= null then
         if this.m_IStreamWebSocketControl.all /= null then
            RefCount := this.m_IStreamWebSocketControl.all.Release;
            Free (this.m_IStreamWebSocketControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamWebSocketControl

   function get_NoDelay
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IStreamWebSocketControl.all.get_NoDelay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_NoDelay
   (
      this : in out StreamWebSocketControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IStreamWebSocketControl.all.put_NoDelay (value);
   end;

   function get_OutboundBufferSizeInBytes
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.get_OutboundBufferSizeInBytes (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_OutboundBufferSizeInBytes
   (
      this : in out StreamWebSocketControl;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.put_OutboundBufferSizeInBytes (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ServerCredential
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
         Hr := m_Interface.get_ServerCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out StreamWebSocketControl;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.put_ServerCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProxyCredential
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
         Hr := m_Interface.get_ProxyCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out StreamWebSocketControl;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.put_ProxyCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SupportedProtocols
   (
      this : in out StreamWebSocketControl
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.get_SupportedProtocols (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IgnorableServerCertificateErrors
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.get_IgnorableServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredUnsolicitedPongInterval
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.get_DesiredUnsolicitedPongInterval (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredUnsolicitedPongInterval
   (
      this : in out StreamWebSocketControl;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.put_DesiredUnsolicitedPongInterval (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ActualUnsolicitedPongInterval
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.get_ActualUnsolicitedPongInterval (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ClientCertificate
   (
      this : in out StreamWebSocketControl
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocketControl2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
         Hr := m_Interface.get_ClientCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   procedure put_ClientCertificate
   (
      this : in out StreamWebSocketControl;
      value : Windows.Security.Cryptography.Certificates.Certificate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IStreamWebSocketControl_Interface, WinRt.Windows.Networking.Sockets.IStreamWebSocketControl2, WinRt.Windows.Networking.Sockets.IID_IStreamWebSocketControl2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IStreamWebSocketControl.all);
      Hr := m_Interface.put_ClientCertificate (value.m_ICertificate.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StreamWebSocketInformation

   procedure Initialize (this : in out StreamWebSocketInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out StreamWebSocketInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebSocketInformation, IWebSocketInformation_Ptr);
   begin
      if this.m_IWebSocketInformation /= null then
         if this.m_IWebSocketInformation.all /= null then
            RefCount := this.m_IWebSocketInformation.all.Release;
            Free (this.m_IWebSocketInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StreamWebSocketInformation

   function get_LocalAddress
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IWebSocketInformation.all.get_LocalAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_BandwidthStatistics
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.BandwidthStatistics is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.BandwidthStatistics;
   begin
      Hr := this.m_IWebSocketInformation.all.get_BandwidthStatistics (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Protocol
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebSocketInformation.all.get_Protocol (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServerCertificate
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         m_Interface := QInterface (this.m_IWebSocketInformation.all);
         Hr := m_Interface.get_ServerCertificate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerCertificateErrors (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out StreamWebSocketInformation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Networking.Sockets.IWebSocketInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.Sockets.IWebSocketInformation_Interface, WinRt.Windows.Networking.Sockets.IWebSocketInformation2, WinRt.Windows.Networking.Sockets.IID_IWebSocketInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebSocketInformation.all);
      Hr := m_Interface.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebSocketClosedEventArgs

   procedure Initialize (this : in out WebSocketClosedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebSocketClosedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebSocketClosedEventArgs, IWebSocketClosedEventArgs_Ptr);
   begin
      if this.m_IWebSocketClosedEventArgs /= null then
         if this.m_IWebSocketClosedEventArgs.all /= null then
            RefCount := this.m_IWebSocketClosedEventArgs.all.Release;
            Free (this.m_IWebSocketClosedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebSocketClosedEventArgs

   function get_Code
   (
      this : in out WebSocketClosedEventArgs
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IWebSocketClosedEventArgs.all.get_Code (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Reason
   (
      this : in out WebSocketClosedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebSocketClosedEventArgs.all.get_Reason (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebSocketError is

      function GetStatus
      (
         hresult : WinRt.Int32
      )
      return WinRt.Windows.Web.WebErrorStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Networking.Sockets.WebSocketError");
         m_Factory        : access WinRt.Windows.Networking.Sockets.IWebSocketErrorStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Web.WebErrorStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IWebSocketErrorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetStatus (hresult, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end WebSocketError;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebSocketKeepAlive

   procedure Initialize (this : in out WebSocketKeepAlive) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebSocketKeepAlive) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.ApplicationModel.Background.IBackgroundTask;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.ApplicationModel.Background.IBackgroundTask, WinRt.Windows.ApplicationModel.Background.IBackgroundTask_Ptr);
   begin
      if this.m_IBackgroundTask /= null then
         if this.m_IBackgroundTask.all /= null then
            RefCount := this.m_IBackgroundTask.all.Release;
            Free (this.m_IBackgroundTask);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebSocketKeepAlive

   function Constructor return WebSocketKeepAlive is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.Sockets.WebSocketKeepAlive");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTask;
   begin
      return RetVal : WebSocketKeepAlive do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTask := new Windows.ApplicationModel.Background.IBackgroundTask;
            Retval.m_IBackgroundTask.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebSocketKeepAlive

   procedure Run
   (
      this : in out WebSocketKeepAlive;
      taskInstance : Windows.ApplicationModel.Background.IBackgroundTaskInstance
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTask.all.Run (taskInstance);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebSocketServerCustomValidationRequestedEventArgs

   procedure Initialize (this : in out WebSocketServerCustomValidationRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebSocketServerCustomValidationRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebSocketServerCustomValidationRequestedEventArgs, IWebSocketServerCustomValidationRequestedEventArgs_Ptr);
   begin
      if this.m_IWebSocketServerCustomValidationRequestedEventArgs /= null then
         if this.m_IWebSocketServerCustomValidationRequestedEventArgs.all /= null then
            RefCount := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.Release;
            Free (this.m_IWebSocketServerCustomValidationRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebSocketServerCustomValidationRequestedEventArgs

   function get_ServerCertificate
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.get_ServerCertificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
   begin
      Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.get_ServerCertificateErrors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Reject
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.Reject;
   end;

   function GetDeferral
   (
      this : in out WebSocketServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IWebSocketServerCustomValidationRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Numerics;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Gaming.Input.ForceFeedback is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IConditionForceEffect_Interface is interface and WinRt.IInspectable_Interface;
   type IConditionForceEffect is access IConditionForceEffect_Interface'Class;

   type IConditionForceEffectFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IConditionForceEffectFactory is access IConditionForceEffectFactory_Interface'Class;

   type IConstantForceEffect_Interface is interface and WinRt.IInspectable_Interface;
   type IConstantForceEffect is access IConstantForceEffect_Interface'Class;

   type IForceFeedbackEffect_Interface is interface and WinRt.IInspectable_Interface;
   type IForceFeedbackEffect is access IForceFeedbackEffect_Interface'Class;
   type IForceFeedbackEffect_Ptr is access all IForceFeedbackEffect;

   type IForceFeedbackMotor_Interface is interface and WinRt.IInspectable_Interface;
   type IForceFeedbackMotor is access IForceFeedbackMotor_Interface'Class;
   type IForceFeedbackMotor_Ptr is access all IForceFeedbackMotor;

   type IPeriodicForceEffect_Interface is interface and WinRt.IInspectable_Interface;
   type IPeriodicForceEffect is access IPeriodicForceEffect_Interface'Class;

   type IPeriodicForceEffectFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IPeriodicForceEffectFactory is access IPeriodicForceEffectFactory_Interface'Class;

   type IRampForceEffect_Interface is interface and WinRt.IInspectable_Interface;
   type IRampForceEffect is access IRampForceEffect_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type ConditionForceEffect is new Ada.Finalization.Limited_Controlled with
      record
         m_IForceFeedbackEffect : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
      end record;
   type ConditionForceEffect_Ptr is access all ConditionForceEffect;

   type ConstantForceEffect is new Ada.Finalization.Limited_Controlled with
      record
         m_IForceFeedbackEffect : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
      end record;
   type ConstantForceEffect_Ptr is access all ConstantForceEffect;

   type ForceFeedbackMotor is new Ada.Finalization.Limited_Controlled with
      record
         m_IForceFeedbackMotor : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackMotor;
      end record;
   type ForceFeedbackMotor_Ptr is access all ForceFeedbackMotor;

   type PeriodicForceEffect is new Ada.Finalization.Limited_Controlled with
      record
         m_IForceFeedbackEffect : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
      end record;
   type PeriodicForceEffect_Ptr is access all PeriodicForceEffect;

   type RampForceEffect is new Ada.Finalization.Limited_Controlled with
      record
         m_IForceFeedbackEffect : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
      end record;
   type RampForceEffect_Ptr is access all RampForceEffect;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type ConditionForceEffectKind is (
      Spring_e,
      Damper_e,
      Inertia_e,
      Friction_e
   );
   for ConditionForceEffectKind use (
      Spring_e => 0,
      Damper_e => 1,
      Inertia_e => 2,
      Friction_e => 3
   );
   type ConditionForceEffectKind_Ptr is access ConditionForceEffectKind;

   type ForceFeedbackEffectAxes is (
      None_e,
      X_e,
      Y_e,
      Z_e
   );
   for ForceFeedbackEffectAxes use (
      None_e => 0,
      X_e => 1,
      Y_e => 2,
      Z_e => 4
   );
   type ForceFeedbackEffectAxes_Ptr is access ForceFeedbackEffectAxes;

   type ForceFeedbackEffectState is (
      Stopped_e,
      Running_e,
      Paused_e,
      Faulted_e
   );
   for ForceFeedbackEffectState use (
      Stopped_e => 0,
      Running_e => 1,
      Paused_e => 2,
      Faulted_e => 3
   );
   type ForceFeedbackEffectState_Ptr is access ForceFeedbackEffectState;

   type ForceFeedbackLoadEffectResult is (
      Succeeded_e,
      EffectStorageFull_e,
      EffectNotSupported_e
   );
   for ForceFeedbackLoadEffectResult use (
      Succeeded_e => 0,
      EffectStorageFull_e => 1,
      EffectNotSupported_e => 2
   );
   type ForceFeedbackLoadEffectResult_Ptr is access ForceFeedbackLoadEffectResult;

   type PeriodicForceEffectKind is (
      SquareWave_e,
      SineWave_e,
      TriangleWave_e,
      SawtoothWaveUp_e,
      SawtoothWaveDown_e
   );
   for PeriodicForceEffectKind use (
      SquareWave_e => 0,
      SineWave_e => 1,
      TriangleWave_e => 2,
      SawtoothWaveUp_e => 3,
      SawtoothWaveDown_e => 4
   );
   type PeriodicForceEffectKind_Ptr is access PeriodicForceEffectKind;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IConditionForceEffect is interface and WinRt.IInspectable;

      function get_Kind
      (
         this : access IConditionForceEffect_Interface;
         RetVal : access Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind
      )
      return WinRt.Hresult is abstract;

      function SetParameters
      (
         this : access IConditionForceEffect_Interface;
         direction : Windows.Foundation.Numerics.Vector3;
         positiveCoefficient : WinRt.Single;
         negativeCoefficient : WinRt.Single;
         maxPositiveMagnitude : WinRt.Single;
         maxNegativeMagnitude : WinRt.Single;
         deadZone : WinRt.Single;
         bias : WinRt.Single
      )
      return WinRt.Hresult is abstract;

      IID_IConditionForceEffect : aliased WinRt.IID := (852617832, 13973, 20073, (133, 192, 205, 25, 68, 24, 145, 64 ));

   -----------------------------------------------------------------------------
   -- type IConditionForceEffectFactory is interface and WinRt.IInspectable;

      function CreateInstance
      (
         this : access IConditionForceEffectFactory_Interface;
         effectKind : Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind;
         RetVal : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
      )
      return WinRt.Hresult is abstract;

      IID_IConditionForceEffectFactory : aliased WinRt.IID := (2443809380, 6160, 20150, (167, 115, 191, 211, 184, 205, 219, 171 ));

   -----------------------------------------------------------------------------
   -- type IConstantForceEffect is interface and WinRt.IInspectable;

      function SetParameters
      (
         this : access IConstantForceEffect_Interface;
         vector : Windows.Foundation.Numerics.Vector3;
         duration : Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function SetParametersWithEnvelope
      (
         this : access IConstantForceEffect_Interface;
         vector : Windows.Foundation.Numerics.Vector3;
         attackGain : WinRt.Single;
         sustainGain : WinRt.Single;
         releaseGain : WinRt.Single;
         startDelay : Windows.Foundation.TimeSpan;
         attackDuration : Windows.Foundation.TimeSpan;
         sustainDuration : Windows.Foundation.TimeSpan;
         releaseDuration : Windows.Foundation.TimeSpan;
         repeatCount : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IConstantForceEffect : aliased WinRt.IID := (2616852800, 62407, 16732, (176, 104, 15, 6, 135, 52, 188, 224 ));

   -----------------------------------------------------------------------------
   -- type IForceFeedbackEffect is interface and WinRt.IInspectable;

      function get_Gain
      (
         this : access IForceFeedbackEffect_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_Gain
      (
         this : access IForceFeedbackEffect_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_State
      (
         this : access IForceFeedbackEffect_Interface;
         RetVal : access Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState
      )
      return WinRt.Hresult is abstract;

      function Start
      (
         this : access IForceFeedbackEffect_Interface
      )
      return WinRt.Hresult is abstract;

      function Stop
      (
         this : access IForceFeedbackEffect_Interface
      )
      return WinRt.Hresult is abstract;

      IID_IForceFeedbackEffect : aliased WinRt.IID := (2709502476, 10980, 18626, (128, 99, 234, 189, 7, 119, 203, 137 ));

   -----------------------------------------------------------------------------
   -- type IForceFeedbackMotor is interface and WinRt.IInspectable;

      function get_AreEffectsPaused
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_MasterGain
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function put_MasterGain
      (
         this : access IForceFeedbackMotor_Interface;
         value : WinRt.Double
      )
      return WinRt.Hresult is abstract;

      function get_IsEnabled
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function get_SupportedAxes
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectAxes
      )
      return WinRt.Hresult is abstract;

      function LoadEffectAsync
      (
         this : access IForceFeedbackMotor_Interface;
         effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function PauseAllEffects
      (
         this : access IForceFeedbackMotor_Interface
      )
      return WinRt.Hresult is abstract;

      function ResumeAllEffects
      (
         this : access IForceFeedbackMotor_Interface
      )
      return WinRt.Hresult is abstract;

      function StopAllEffects
      (
         this : access IForceFeedbackMotor_Interface
      )
      return WinRt.Hresult is abstract;

      function TryDisableAsync
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function TryEnableAsync
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function TryResetAsync
      (
         this : access IForceFeedbackMotor_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function TryUnloadEffectAsync
      (
         this : access IForceFeedbackMotor_Interface;
         effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IForceFeedbackMotor : aliased WinRt.IID := (2369601916, 42474, 17686, (128, 38, 43, 0, 247, 78, 246, 229 ));

   -----------------------------------------------------------------------------
   -- type IPeriodicForceEffect is interface and WinRt.IInspectable;

      function get_Kind
      (
         this : access IPeriodicForceEffect_Interface;
         RetVal : access Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind
      )
      return WinRt.Hresult is abstract;

      function SetParameters
      (
         this : access IPeriodicForceEffect_Interface;
         vector : Windows.Foundation.Numerics.Vector3;
         frequency : WinRt.Single;
         phase : WinRt.Single;
         bias : WinRt.Single;
         duration : Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function SetParametersWithEnvelope
      (
         this : access IPeriodicForceEffect_Interface;
         vector : Windows.Foundation.Numerics.Vector3;
         frequency : WinRt.Single;
         phase : WinRt.Single;
         bias : WinRt.Single;
         attackGain : WinRt.Single;
         sustainGain : WinRt.Single;
         releaseGain : WinRt.Single;
         startDelay : Windows.Foundation.TimeSpan;
         attackDuration : Windows.Foundation.TimeSpan;
         sustainDuration : Windows.Foundation.TimeSpan;
         releaseDuration : Windows.Foundation.TimeSpan;
         repeatCount : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IPeriodicForceEffect : aliased WinRt.IID := (1548826839, 64629, 19794, (154, 10, 239, 228, 202, 181, 254, 100 ));

   -----------------------------------------------------------------------------
   -- type IPeriodicForceEffectFactory is interface and WinRt.IInspectable;

      function CreateInstance
      (
         this : access IPeriodicForceEffectFactory_Interface;
         effectKind : Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind;
         RetVal : access Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
      )
      return WinRt.Hresult is abstract;

      IID_IPeriodicForceEffectFactory : aliased WinRt.IID := (1868753690, 38993, 18299, (179, 24, 53, 236, 170, 21, 7, 15 ));

   -----------------------------------------------------------------------------
   -- type IRampForceEffect is interface and WinRt.IInspectable;

      function SetParameters
      (
         this : access IRampForceEffect_Interface;
         startVector : Windows.Foundation.Numerics.Vector3;
         endVector : Windows.Foundation.Numerics.Vector3;
         duration : Windows.Foundation.TimeSpan
      )
      return WinRt.Hresult is abstract;

      function SetParametersWithEnvelope
      (
         this : access IRampForceEffect_Interface;
         startVector : Windows.Foundation.Numerics.Vector3;
         endVector : Windows.Foundation.Numerics.Vector3;
         attackGain : WinRt.Single;
         sustainGain : WinRt.Single;
         releaseGain : WinRt.Single;
         startDelay : Windows.Foundation.TimeSpan;
         attackDuration : Windows.Foundation.TimeSpan;
         sustainDuration : Windows.Foundation.TimeSpan;
         releaseDuration : Windows.Foundation.TimeSpan;
         repeatCount : WinRt.UInt32
      )
      return WinRt.Hresult is abstract;

      IID_IRampForceEffect : aliased WinRt.IID := (4059566681, 7334, 16512, (181, 109, 180, 63, 51, 84, 208, 82 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConditionForceEffect

   overriding procedure Initialize (this : in out ConditionForceEffect);
   overriding procedure Finalize (this : in out ConditionForceEffect);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConditionForceEffect

   function Constructor
   (
      effectKind : Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind
   )
   return ConditionForceEffect;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConditionForceEffect

   function get_Gain
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Double;

   procedure put_Gain
   (
      this : in out ConditionForceEffect;
      value : WinRt.Double
   );

   function get_State
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;

   procedure Start
   (
      this : in out ConditionForceEffect
   );

   procedure Stop
   (
      this : in out ConditionForceEffect
   );

   function get_Kind
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind;

   procedure SetParameters
   (
      this : in out ConditionForceEffect;
      direction : Windows.Foundation.Numerics.Vector3;
      positiveCoefficient : WinRt.Single;
      negativeCoefficient : WinRt.Single;
      maxPositiveMagnitude : WinRt.Single;
      maxNegativeMagnitude : WinRt.Single;
      deadZone : WinRt.Single;
      bias : WinRt.Single
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConstantForceEffect

   overriding procedure Initialize (this : in out ConstantForceEffect);
   overriding procedure Finalize (this : in out ConstantForceEffect);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConstantForceEffect

   function Constructor return ConstantForceEffect;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConstantForceEffect

   function get_Gain
   (
      this : in out ConstantForceEffect
   )
   return WinRt.Double;

   procedure put_Gain
   (
      this : in out ConstantForceEffect;
      value : WinRt.Double
   );

   function get_State
   (
      this : in out ConstantForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;

   procedure Start
   (
      this : in out ConstantForceEffect
   );

   procedure Stop
   (
      this : in out ConstantForceEffect
   );

   procedure SetParameters
   (
      this : in out ConstantForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      duration : Windows.Foundation.TimeSpan
   );

   procedure SetParametersWithEnvelope
   (
      this : in out ConstantForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ForceFeedbackMotor

   overriding procedure Initialize (this : in out ForceFeedbackMotor);
   overriding procedure Finalize (this : in out ForceFeedbackMotor);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ForceFeedbackMotor

   function get_AreEffectsPaused
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean;

   function get_MasterGain
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Double;

   procedure put_MasterGain
   (
      this : in out ForceFeedbackMotor;
      value : WinRt.Double
   );

   function get_IsEnabled
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean;

   function get_SupportedAxes
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectAxes;

   function LoadEffectAsync
   (
      this : in out ForceFeedbackMotor;
      effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult;

   procedure PauseAllEffects
   (
      this : in out ForceFeedbackMotor
   );

   procedure ResumeAllEffects
   (
      this : in out ForceFeedbackMotor
   );

   procedure StopAllEffects
   (
      this : in out ForceFeedbackMotor
   );

   function TryDisableAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean;

   function TryEnableAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean;

   function TryResetAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean;

   function TryUnloadEffectAsync
   (
      this : in out ForceFeedbackMotor;
      effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
   )
   return WinRt.Boolean;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PeriodicForceEffect

   overriding procedure Initialize (this : in out PeriodicForceEffect);
   overriding procedure Finalize (this : in out PeriodicForceEffect);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PeriodicForceEffect

   function Constructor
   (
      effectKind : Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind
   )
   return PeriodicForceEffect;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PeriodicForceEffect

   function get_Gain
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Double;

   procedure put_Gain
   (
      this : in out PeriodicForceEffect;
      value : WinRt.Double
   );

   function get_State
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;

   procedure Start
   (
      this : in out PeriodicForceEffect
   );

   procedure Stop
   (
      this : in out PeriodicForceEffect
   );

   function get_Kind
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind;

   procedure SetParameters
   (
      this : in out PeriodicForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      frequency : WinRt.Single;
      phase : WinRt.Single;
      bias : WinRt.Single;
      duration : Windows.Foundation.TimeSpan
   );

   procedure SetParametersWithEnvelope
   (
      this : in out PeriodicForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      frequency : WinRt.Single;
      phase : WinRt.Single;
      bias : WinRt.Single;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RampForceEffect

   overriding procedure Initialize (this : in out RampForceEffect);
   overriding procedure Finalize (this : in out RampForceEffect);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RampForceEffect

   function Constructor return RampForceEffect;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RampForceEffect

   function get_Gain
   (
      this : in out RampForceEffect
   )
   return WinRt.Double;

   procedure put_Gain
   (
      this : in out RampForceEffect;
      value : WinRt.Double
   );

   function get_State
   (
      this : in out RampForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;

   procedure Start
   (
      this : in out RampForceEffect
   );

   procedure Stop
   (
      this : in out RampForceEffect
   );

   procedure SetParameters
   (
      this : in out RampForceEffect;
      startVector : Windows.Foundation.Numerics.Vector3;
      endVector : Windows.Foundation.Numerics.Vector3;
      duration : Windows.Foundation.TimeSpan
   );

   procedure SetParametersWithEnvelope
   (
      this : in out RampForceEffect;
      startVector : Windows.Foundation.Numerics.Vector3;
      endVector : Windows.Foundation.Numerics.Vector3;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   );

end;

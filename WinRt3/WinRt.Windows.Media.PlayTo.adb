--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.PlayTo is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CurrentTimeChangeRequestedEventArgs

   procedure Initialize (this : in out CurrentTimeChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CurrentTimeChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICurrentTimeChangeRequestedEventArgs, ICurrentTimeChangeRequestedEventArgs_Ptr);
   begin
      if this.m_ICurrentTimeChangeRequestedEventArgs /= null then
         if this.m_ICurrentTimeChangeRequestedEventArgs.all /= null then
            RefCount := this.m_ICurrentTimeChangeRequestedEventArgs.all.Release;
            Free (this.m_ICurrentTimeChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CurrentTimeChangeRequestedEventArgs

   function get_Time
   (
      this : in out CurrentTimeChangeRequestedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_ICurrentTimeChangeRequestedEventArgs.all.get_Time (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MuteChangeRequestedEventArgs

   procedure Initialize (this : in out MuteChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MuteChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMuteChangeRequestedEventArgs, IMuteChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IMuteChangeRequestedEventArgs /= null then
         if this.m_IMuteChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IMuteChangeRequestedEventArgs.all.Release;
            Free (this.m_IMuteChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MuteChangeRequestedEventArgs

   function get_Mute
   (
      this : in out MuteChangeRequestedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMuteChangeRequestedEventArgs.all.get_Mute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToConnection

   procedure Initialize (this : in out PlayToConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToConnection, IPlayToConnection_Ptr);
   begin
      if this.m_IPlayToConnection /= null then
         if this.m_IPlayToConnection.all /= null then
            RefCount := this.m_IPlayToConnection.all.Release;
            Free (this.m_IPlayToConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToConnection

   function get_State
   (
      this : in out PlayToConnection
   )
   return WinRt.Windows.Media.PlayTo.PlayToConnectionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.PlayToConnectionState;
   begin
      Hr := this.m_IPlayToConnection.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_StateChanged
   (
      this : in out PlayToConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToConnection.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out PlayToConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToConnection.all.remove_StateChanged (token);
   end;

   function add_Transferred
   (
      this : in out PlayToConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToConnection.all.add_Transferred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Transferred
   (
      this : in out PlayToConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToConnection.all.remove_Transferred (token);
   end;

   function add_Error
   (
      this : in out PlayToConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToConnection.all.add_Error (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Error
   (
      this : in out PlayToConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToConnection.all.remove_Error (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToConnectionErrorEventArgs

   procedure Initialize (this : in out PlayToConnectionErrorEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToConnectionErrorEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToConnectionErrorEventArgs, IPlayToConnectionErrorEventArgs_Ptr);
   begin
      if this.m_IPlayToConnectionErrorEventArgs /= null then
         if this.m_IPlayToConnectionErrorEventArgs.all /= null then
            RefCount := this.m_IPlayToConnectionErrorEventArgs.all.Release;
            Free (this.m_IPlayToConnectionErrorEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToConnectionErrorEventArgs

   function get_Code
   (
      this : in out PlayToConnectionErrorEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToConnectionError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.PlayToConnectionError;
   begin
      Hr := this.m_IPlayToConnectionErrorEventArgs.all.get_Code (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Message
   (
      this : in out PlayToConnectionErrorEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayToConnectionErrorEventArgs.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToConnectionStateChangedEventArgs

   procedure Initialize (this : in out PlayToConnectionStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToConnectionStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToConnectionStateChangedEventArgs, IPlayToConnectionStateChangedEventArgs_Ptr);
   begin
      if this.m_IPlayToConnectionStateChangedEventArgs /= null then
         if this.m_IPlayToConnectionStateChangedEventArgs.all /= null then
            RefCount := this.m_IPlayToConnectionStateChangedEventArgs.all.Release;
            Free (this.m_IPlayToConnectionStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToConnectionStateChangedEventArgs

   function get_PreviousState
   (
      this : in out PlayToConnectionStateChangedEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToConnectionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.PlayToConnectionState;
   begin
      Hr := this.m_IPlayToConnectionStateChangedEventArgs.all.get_PreviousState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CurrentState
   (
      this : in out PlayToConnectionStateChangedEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToConnectionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.PlayToConnectionState;
   begin
      Hr := this.m_IPlayToConnectionStateChangedEventArgs.all.get_CurrentState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToConnectionTransferredEventArgs

   procedure Initialize (this : in out PlayToConnectionTransferredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToConnectionTransferredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToConnectionTransferredEventArgs, IPlayToConnectionTransferredEventArgs_Ptr);
   begin
      if this.m_IPlayToConnectionTransferredEventArgs /= null then
         if this.m_IPlayToConnectionTransferredEventArgs.all /= null then
            RefCount := this.m_IPlayToConnectionTransferredEventArgs.all.Release;
            Free (this.m_IPlayToConnectionTransferredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToConnectionTransferredEventArgs

   function get_PreviousSource
   (
      this : in out PlayToConnectionTransferredEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToSource;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToSource do
         Hr := this.m_IPlayToConnectionTransferredEventArgs.all.get_PreviousSource (m_ComRetVal'Access);
         Retval.m_IPlayToSource := new Windows.Media.PlayTo.IPlayToSource;
         Retval.m_IPlayToSource.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentSource
   (
      this : in out PlayToConnectionTransferredEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToSource;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToSource do
         Hr := this.m_IPlayToConnectionTransferredEventArgs.all.get_CurrentSource (m_ComRetVal'Access);
         Retval.m_IPlayToSource := new Windows.Media.PlayTo.IPlayToSource;
         Retval.m_IPlayToSource.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToManager

   procedure Initialize (this : in out PlayToManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToManager, IPlayToManager_Ptr);
   begin
      if this.m_IPlayToManager /= null then
         if this.m_IPlayToManager.all /= null then
            RefCount := this.m_IPlayToManager.all.Release;
            Free (this.m_IPlayToManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PlayToManager

   function GetForCurrentView
   return WinRt.Windows.Media.PlayTo.PlayToManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.PlayTo.PlayToManager");
      m_Factory        : access WinRt.Windows.Media.PlayTo.IPlayToManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToManager;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToManager do
         Hr := RoGetActivationFactory (m_hString, IID_IPlayToManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IPlayToManager := new Windows.Media.PlayTo.IPlayToManager;
            Retval.m_IPlayToManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure ShowPlayToUI is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.PlayTo.PlayToManager");
      m_Factory        : access WinRt.Windows.Media.PlayTo.IPlayToManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IPlayToManagerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ShowPlayToUI;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToManager

   function add_SourceRequested
   (
      this : in out PlayToManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToManager.all.add_SourceRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceRequested
   (
      this : in out PlayToManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToManager.all.remove_SourceRequested (token);
   end;

   function add_SourceSelected
   (
      this : in out PlayToManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToManager.all.add_SourceSelected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceSelected
   (
      this : in out PlayToManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToManager.all.remove_SourceSelected (token);
   end;

   procedure put_DefaultSourceSelection
   (
      this : in out PlayToManager;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToManager.all.put_DefaultSourceSelection (value);
   end;

   function get_DefaultSourceSelection
   (
      this : in out PlayToManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToManager.all.get_DefaultSourceSelection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToReceiver

   procedure Initialize (this : in out PlayToReceiver) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToReceiver) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToReceiver, IPlayToReceiver_Ptr);
   begin
      if this.m_IPlayToReceiver /= null then
         if this.m_IPlayToReceiver.all /= null then
            RefCount := this.m_IPlayToReceiver.all.Release;
            Free (this.m_IPlayToReceiver);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PlayToReceiver

   function Constructor return PlayToReceiver is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.PlayTo.PlayToReceiver");
      m_ComRetVal  : aliased Windows.Media.PlayTo.IPlayToReceiver;
   begin
      return RetVal : PlayToReceiver do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPlayToReceiver := new Windows.Media.PlayTo.IPlayToReceiver;
            Retval.m_IPlayToReceiver.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToReceiver

   function add_PlayRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_PlayRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlayRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_PlayRequested (token);
   end;

   function add_PauseRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_PauseRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PauseRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_PauseRequested (token);
   end;

   function add_SourceChangeRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_SourceChangeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceChangeRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_SourceChangeRequested (token);
   end;

   function add_PlaybackRateChangeRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_PlaybackRateChangeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlaybackRateChangeRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_PlaybackRateChangeRequested (token);
   end;

   function add_CurrentTimeChangeRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_CurrentTimeChangeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CurrentTimeChangeRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_CurrentTimeChangeRequested (token);
   end;

   function add_MuteChangeRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_MuteChangeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MuteChangeRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_MuteChangeRequested (token);
   end;

   function add_VolumeChangeRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_VolumeChangeRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VolumeChangeRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_VolumeChangeRequested (token);
   end;

   function add_TimeUpdateRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_TimeUpdateRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_TimeUpdateRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_TimeUpdateRequested (token);
   end;

   function add_StopRequested
   (
      this : in out PlayToReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPlayToReceiver.all.add_StopRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StopRequested
   (
      this : in out PlayToReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.remove_StopRequested (token);
   end;

   procedure NotifyVolumeChange
   (
      this : in out PlayToReceiver;
      volume : WinRt.Double;
      mute : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyVolumeChange (volume, mute);
   end;

   procedure NotifyRateChange
   (
      this : in out PlayToReceiver;
      rate : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyRateChange (rate);
   end;

   procedure NotifyLoadedMetadata
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyLoadedMetadata;
   end;

   procedure NotifyTimeUpdate
   (
      this : in out PlayToReceiver;
      currentTime : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyTimeUpdate (currentTime);
   end;

   procedure NotifyDurationChange
   (
      this : in out PlayToReceiver;
      duration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyDurationChange (duration);
   end;

   procedure NotifySeeking
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifySeeking;
   end;

   procedure NotifySeeked
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifySeeked;
   end;

   procedure NotifyPaused
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyPaused;
   end;

   procedure NotifyPlaying
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyPlaying;
   end;

   procedure NotifyEnded
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyEnded;
   end;

   procedure NotifyError
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyError;
   end;

   procedure NotifyStopped
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.NotifyStopped;
   end;

   function get_FriendlyName
   (
      this : in out PlayToReceiver
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayToReceiver.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FriendlyName
   (
      this : in out PlayToReceiver;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IPlayToReceiver.all.put_FriendlyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure put_SupportsImage
   (
      this : in out PlayToReceiver;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.put_SupportsImage (value);
   end;

   function get_SupportsImage
   (
      this : in out PlayToReceiver
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToReceiver.all.get_SupportsImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportsAudio
   (
      this : in out PlayToReceiver;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.put_SupportsAudio (value);
   end;

   function get_SupportsAudio
   (
      this : in out PlayToReceiver
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToReceiver.all.get_SupportsAudio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SupportsVideo
   (
      this : in out PlayToReceiver;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToReceiver.all.put_SupportsVideo (value);
   end;

   function get_SupportsVideo
   (
      this : in out PlayToReceiver
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToReceiver.all.get_SupportsVideo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out PlayToReceiver
   )
   return WinRt.Windows.Foundation.Collections.IPropertySet is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      Hr := this.m_IPlayToReceiver.all.get_Properties (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StartAsync
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPlayToReceiver.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StopAsync
   (
      this : in out PlayToReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IPlayToReceiver.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToSource

   procedure Initialize (this : in out PlayToSource) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToSource) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToSource, IPlayToSource_Ptr);
   begin
      if this.m_IPlayToSource /= null then
         if this.m_IPlayToSource.all /= null then
            RefCount := this.m_IPlayToSource.all.Release;
            Free (this.m_IPlayToSource);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToSource

   function get_Connection
   (
      this : in out PlayToSource
   )
   return WinRt.Windows.Media.PlayTo.PlayToConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToConnection;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToConnection do
         Hr := this.m_IPlayToSource.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IPlayToConnection := new Windows.Media.PlayTo.IPlayToConnection;
         Retval.m_IPlayToConnection.all := m_ComRetVal;
      end return;
   end;

   function get_Next
   (
      this : in out PlayToSource
   )
   return WinRt.Windows.Media.PlayTo.PlayToSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToSource;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToSource do
         Hr := this.m_IPlayToSource.all.get_Next (m_ComRetVal'Access);
         Retval.m_IPlayToSource := new Windows.Media.PlayTo.IPlayToSource;
         Retval.m_IPlayToSource.all := m_ComRetVal;
      end return;
   end;

   procedure put_Next
   (
      this : in out PlayToSource;
      value : Windows.Media.PlayTo.PlayToSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToSource.all.put_Next (value.m_IPlayToSource.all);
   end;

   procedure PlayNext
   (
      this : in out PlayToSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToSource.all.PlayNext;
   end;

   function get_PreferredSourceUri
   (
      this : in out PlayToSource
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.PlayTo.IPlayToSourceWithPreferredSourceUri := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.PlayTo.IPlayToSource_Interface, WinRt.Windows.Media.PlayTo.IPlayToSourceWithPreferredSourceUri, WinRt.Windows.Media.PlayTo.IID_IPlayToSourceWithPreferredSourceUri'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IPlayToSource.all);
         Hr := m_Interface.get_PreferredSourceUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_PreferredSourceUri
   (
      this : in out PlayToSource;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.PlayTo.IPlayToSourceWithPreferredSourceUri := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.PlayTo.IPlayToSource_Interface, WinRt.Windows.Media.PlayTo.IPlayToSourceWithPreferredSourceUri, WinRt.Windows.Media.PlayTo.IID_IPlayToSourceWithPreferredSourceUri'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IPlayToSource.all);
      Hr := m_Interface.put_PreferredSourceUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToSourceDeferral

   procedure Initialize (this : in out PlayToSourceDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToSourceDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToSourceDeferral, IPlayToSourceDeferral_Ptr);
   begin
      if this.m_IPlayToSourceDeferral /= null then
         if this.m_IPlayToSourceDeferral.all /= null then
            RefCount := this.m_IPlayToSourceDeferral.all.Release;
            Free (this.m_IPlayToSourceDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToSourceDeferral

   procedure Complete
   (
      this : in out PlayToSourceDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToSourceDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToSourceRequest

   procedure Initialize (this : in out PlayToSourceRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToSourceRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToSourceRequest, IPlayToSourceRequest_Ptr);
   begin
      if this.m_IPlayToSourceRequest /= null then
         if this.m_IPlayToSourceRequest.all /= null then
            RefCount := this.m_IPlayToSourceRequest.all.Release;
            Free (this.m_IPlayToSourceRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToSourceRequest

   function get_Deadline
   (
      this : in out PlayToSourceRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IPlayToSourceRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure DisplayErrorString
   (
      this : in out PlayToSourceRequest;
      errorString : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_errorString : WinRt.HString := To_HString (errorString);
   begin
      Hr := this.m_IPlayToSourceRequest.all.DisplayErrorString (HStr_errorString);
      Hr := WindowsDeleteString (HStr_errorString);
   end;

   function GetDeferral
   (
      this : in out PlayToSourceRequest
   )
   return WinRt.Windows.Media.PlayTo.PlayToSourceDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToSourceDeferral;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToSourceDeferral do
         Hr := this.m_IPlayToSourceRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IPlayToSourceDeferral := new Windows.Media.PlayTo.IPlayToSourceDeferral;
         Retval.m_IPlayToSourceDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure SetSource
   (
      this : in out PlayToSourceRequest;
      value : Windows.Media.PlayTo.PlayToSource'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPlayToSourceRequest.all.SetSource (value.m_IPlayToSource.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToSourceRequestedEventArgs

   procedure Initialize (this : in out PlayToSourceRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToSourceRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToSourceRequestedEventArgs, IPlayToSourceRequestedEventArgs_Ptr);
   begin
      if this.m_IPlayToSourceRequestedEventArgs /= null then
         if this.m_IPlayToSourceRequestedEventArgs.all /= null then
            RefCount := this.m_IPlayToSourceRequestedEventArgs.all.Release;
            Free (this.m_IPlayToSourceRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToSourceRequestedEventArgs

   function get_SourceRequest
   (
      this : in out PlayToSourceRequestedEventArgs
   )
   return WinRt.Windows.Media.PlayTo.PlayToSourceRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.PlayTo.IPlayToSourceRequest;
   begin
      return RetVal : WinRt.Windows.Media.PlayTo.PlayToSourceRequest do
         Hr := this.m_IPlayToSourceRequestedEventArgs.all.get_SourceRequest (m_ComRetVal'Access);
         Retval.m_IPlayToSourceRequest := new Windows.Media.PlayTo.IPlayToSourceRequest;
         Retval.m_IPlayToSourceRequest.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlayToSourceSelectedEventArgs

   procedure Initialize (this : in out PlayToSourceSelectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlayToSourceSelectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlayToSourceSelectedEventArgs, IPlayToSourceSelectedEventArgs_Ptr);
   begin
      if this.m_IPlayToSourceSelectedEventArgs /= null then
         if this.m_IPlayToSourceSelectedEventArgs.all /= null then
            RefCount := this.m_IPlayToSourceSelectedEventArgs.all.Release;
            Free (this.m_IPlayToSourceSelectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlayToSourceSelectedEventArgs

   function get_FriendlyName
   (
      this : in out PlayToSourceSelectedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IPlayToSourceSelectedEventArgs.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Icon
   (
      this : in out PlayToSourceSelectedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_IPlayToSourceSelectedEventArgs.all.get_Icon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportsImage
   (
      this : in out PlayToSourceSelectedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToSourceSelectedEventArgs.all.get_SupportsImage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportsAudio
   (
      this : in out PlayToSourceSelectedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToSourceSelectedEventArgs.all.get_SupportsAudio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportsVideo
   (
      this : in out PlayToSourceSelectedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPlayToSourceSelectedEventArgs.all.get_SupportsVideo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PlaybackRateChangeRequestedEventArgs

   procedure Initialize (this : in out PlaybackRateChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PlaybackRateChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPlaybackRateChangeRequestedEventArgs, IPlaybackRateChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IPlaybackRateChangeRequestedEventArgs /= null then
         if this.m_IPlaybackRateChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IPlaybackRateChangeRequestedEventArgs.all.Release;
            Free (this.m_IPlaybackRateChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PlaybackRateChangeRequestedEventArgs

   function get_Rate
   (
      this : in out PlaybackRateChangeRequestedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPlaybackRateChangeRequestedEventArgs.all.get_Rate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SourceChangeRequestedEventArgs

   procedure Initialize (this : in out SourceChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SourceChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISourceChangeRequestedEventArgs, ISourceChangeRequestedEventArgs_Ptr);
   begin
      if this.m_ISourceChangeRequestedEventArgs /= null then
         if this.m_ISourceChangeRequestedEventArgs.all /= null then
            RefCount := this.m_ISourceChangeRequestedEventArgs.all.Release;
            Free (this.m_ISourceChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SourceChangeRequestedEventArgs

   function get_Stream
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Stream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Title
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Author
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Author (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Album
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Album (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Genre
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Genre (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Description
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Date
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Date (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Thumbnail
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Thumbnail (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Rating
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Rating (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Properties
   (
      this : in out SourceChangeRequestedEventArgs
   )
   return IMapView_HString_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_IInspectable.Kind;
   begin
      Hr := this.m_ISourceChangeRequestedEventArgs.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VolumeChangeRequestedEventArgs

   procedure Initialize (this : in out VolumeChangeRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out VolumeChangeRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVolumeChangeRequestedEventArgs, IVolumeChangeRequestedEventArgs_Ptr);
   begin
      if this.m_IVolumeChangeRequestedEventArgs /= null then
         if this.m_IVolumeChangeRequestedEventArgs.all /= null then
            RefCount := this.m_IVolumeChangeRequestedEventArgs.all.Release;
            Free (this.m_IVolumeChangeRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VolumeChangeRequestedEventArgs

   function get_Volume
   (
      this : in out VolumeChangeRequestedEventArgs
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IVolumeChangeRequestedEventArgs.all.get_Volume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

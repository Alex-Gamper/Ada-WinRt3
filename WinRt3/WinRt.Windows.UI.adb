--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ColorHelper

   procedure Initialize (this : in out ColorHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out ColorHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColorHelper, IColorHelper_Ptr);
   begin
      if this.m_IColorHelper /= null then
         if this.m_IColorHelper.all /= null then
            RefCount := this.m_IColorHelper.all.Release;
            Free (this.m_IColorHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ColorHelper

   function FromArgb
   (
      a : WinRt.Byte;
      r : WinRt.Byte;
      g : WinRt.Byte;
      b : WinRt.Byte
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ColorHelper");
      m_Factory        : access WinRt.Windows.UI.IColorHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FromArgb (a, r, g, b, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function ToDisplayName
   (
      color : Windows.UI.Color
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.ColorHelper");
      m_Factory        : access WinRt.Windows.UI.IColorHelperStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorHelperStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ToDisplayName (color, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ColorHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Colors

   procedure Initialize (this : in out Colors) is
   begin
      null;
   end;

   procedure Finalize (this : in out Colors) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IColors, IColors_Ptr);
   begin
      if this.m_IColors /= null then
         if this.m_IColors.all /= null then
            RefCount := this.m_IColors.all.Release;
            Free (this.m_IColors);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Colors

   function get_AliceBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AliceBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_AntiqueWhite
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AntiqueWhite (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Aqua
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Aqua (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Aquamarine
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Aquamarine (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Azure
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Azure (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Beige
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Beige (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Bisque
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Bisque (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Black
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Black (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_BlanchedAlmond
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BlanchedAlmond (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Blue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Blue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_BlueViolet
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BlueViolet (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Brown
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Brown (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_BurlyWood
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_BurlyWood (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_CadetBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_CadetBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Chartreuse
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Chartreuse (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Chocolate
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Chocolate (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Coral
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Coral (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_CornflowerBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_CornflowerBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Cornsilk
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Cornsilk (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Crimson
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Crimson (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Cyan
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Cyan (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkCyan
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkCyan (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkGoldenrod
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkGoldenrod (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkKhaki
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkKhaki (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkMagenta
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkMagenta (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkOliveGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkOliveGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkOrange
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkOrange (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkOrchid
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkOrchid (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkRed
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkRed (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkSalmon
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkSalmon (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkSeaGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkSeaGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkSlateBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkSlateBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkSlateGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkSlateGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkTurquoise
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkTurquoise (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DarkViolet
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DarkViolet (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DeepPink
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DeepPink (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DeepSkyBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DeepSkyBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DimGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DimGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_DodgerBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_DodgerBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Firebrick
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Firebrick (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_FloralWhite
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_FloralWhite (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_ForestGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_ForestGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Fuchsia
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Fuchsia (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Gainsboro
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Gainsboro (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_GhostWhite
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_GhostWhite (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Gold
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Gold (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Goldenrod
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Goldenrod (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Gray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Gray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Green
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Green (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_GreenYellow
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_GreenYellow (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Honeydew
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Honeydew (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_HotPink
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_HotPink (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_IndianRed
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_IndianRed (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Indigo
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Indigo (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Ivory
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Ivory (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Khaki
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Khaki (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Lavender
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Lavender (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LavenderBlush
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LavenderBlush (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LawnGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LawnGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LemonChiffon
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LemonChiffon (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightCoral
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightCoral (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightCyan
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightCyan (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightGoldenrodYellow
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightGoldenrodYellow (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightPink
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightPink (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightSalmon
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightSalmon (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightSeaGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightSeaGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightSkyBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightSkyBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightSlateGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightSlateGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightSteelBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightSteelBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LightYellow
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LightYellow (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Lime
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Lime (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_LimeGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_LimeGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Linen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Linen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Magenta
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Magenta (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Maroon
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Maroon (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumAquamarine
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumAquamarine (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumOrchid
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumOrchid (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumPurple
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumPurple (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumSeaGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumSeaGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumSlateBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumSlateBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumSpringGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumSpringGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumTurquoise
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumTurquoise (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MediumVioletRed
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MediumVioletRed (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MidnightBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MidnightBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MintCream
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MintCream (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_MistyRose
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MistyRose (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Moccasin
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Moccasin (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_NavajoWhite
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_NavajoWhite (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Navy
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Navy (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_OldLace
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_OldLace (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Olive
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Olive (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_OliveDrab
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_OliveDrab (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Orange
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Orange (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_OrangeRed
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_OrangeRed (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Orchid
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Orchid (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PaleGoldenrod
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PaleGoldenrod (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PaleGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PaleGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PaleTurquoise
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PaleTurquoise (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PaleVioletRed
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PaleVioletRed (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PapayaWhip
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PapayaWhip (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PeachPuff
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PeachPuff (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Peru
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Peru (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Pink
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Pink (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Plum
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Plum (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_PowderBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_PowderBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Purple
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Purple (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Red
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Red (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_RosyBrown
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_RosyBrown (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_RoyalBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_RoyalBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SaddleBrown
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SaddleBrown (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Salmon
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Salmon (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SandyBrown
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SandyBrown (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SeaGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SeaGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SeaShell
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SeaShell (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Sienna
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Sienna (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Silver
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Silver (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SkyBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SkyBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SlateBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SlateBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SlateGray
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SlateGray (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Snow
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Snow (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SpringGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SpringGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_SteelBlue
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_SteelBlue (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Tan
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Tan (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Teal
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Teal (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Thistle
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Thistle (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Tomato
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Tomato (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Transparent
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Transparent (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Turquoise
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Turquoise (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Violet
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Violet (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Wheat
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Wheat (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_White
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_White (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_WhiteSmoke
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_WhiteSmoke (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_Yellow
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Yellow (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_YellowGreen
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Colors");
      m_Factory        : access WinRt.Windows.UI.IColorsStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IColorsStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_YellowGreen (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Colors

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UIContentRoot

   procedure Initialize (this : in out UIContentRoot) is
   begin
      null;
   end;

   procedure Finalize (this : in out UIContentRoot) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUIContentRoot, IUIContentRoot_Ptr);
   begin
      if this.m_IUIContentRoot /= null then
         if this.m_IUIContentRoot.all /= null then
            RefCount := this.m_IUIContentRoot.all.Release;
            Free (this.m_IUIContentRoot);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UIContentRoot

   function get_UIContext
   (
      this : in out UIContentRoot
   )
   return WinRt.Windows.UI.UIContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.IUIContext;
   begin
      return RetVal : WinRt.Windows.UI.UIContext do
         Hr := this.m_IUIContentRoot.all.get_UIContext (m_ComRetVal'Access);
         Retval.m_IUIContext := new Windows.UI.IUIContext;
         Retval.m_IUIContext.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UIContext

   procedure Initialize (this : in out UIContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out UIContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUIContext, IUIContext_Ptr);
   begin
      if this.m_IUIContext /= null then
         if this.m_IUIContext.all /= null then
            RefCount := this.m_IUIContext.all.Release;
            Free (this.m_IUIContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UIContext

end;

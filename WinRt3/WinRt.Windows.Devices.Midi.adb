--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Midi is

   package IAsyncOperation_MidiInPort is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Midi.IMidiInPort);
   package AsyncOperationCompletedHandler_MidiInPort is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Midi.IMidiInPort);

   package IAsyncOperation_IMidiOutPort is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Midi.IMidiOutPort);
   package AsyncOperationCompletedHandler_IMidiOutPort is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Midi.IMidiOutPort);

   package IAsyncOperation_MidiSynthesizer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Midi.IMidiSynthesizer);
   package AsyncOperationCompletedHandler_MidiSynthesizer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Midi.IMidiSynthesizer);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiActiveSensingMessage

   procedure Initialize (this : in out MidiActiveSensingMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiActiveSensingMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiActiveSensingMessage

   function Constructor return MidiActiveSensingMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiActiveSensingMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiActiveSensingMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiActiveSensingMessage

   function get_Timestamp
   (
      this : in out MidiActiveSensingMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiActiveSensingMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiActiveSensingMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiChannelPressureMessage

   procedure Initialize (this : in out MidiChannelPressureMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiChannelPressureMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiChannelPressureMessage, IMidiChannelPressureMessage_Ptr);
   begin
      if this.m_IMidiChannelPressureMessage /= null then
         if this.m_IMidiChannelPressureMessage.all /= null then
            RefCount := this.m_IMidiChannelPressureMessage.all.Release;
            Free (this.m_IMidiChannelPressureMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiChannelPressureMessage

   function Constructor
   (
      channel : WinRt.Byte;
      pressure : WinRt.Byte
   )
   return MidiChannelPressureMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiChannelPressureMessage");
      m_Factory    : access IMidiChannelPressureMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiChannelPressureMessage;
   begin
      return RetVal : MidiChannelPressureMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiChannelPressureMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiChannelPressureMessage (channel, pressure, m_ComRetVal'Access);
            Retval.m_IMidiChannelPressureMessage := new Windows.Devices.Midi.IMidiChannelPressureMessage;
            Retval.m_IMidiChannelPressureMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiChannelPressureMessage

   function get_Channel
   (
      this : in out MidiChannelPressureMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiChannelPressureMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Pressure
   (
      this : in out MidiChannelPressureMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiChannelPressureMessage.all.get_Pressure (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiChannelPressureMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiChannelPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiChannelPressureMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiChannelPressureMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiChannelPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiChannelPressureMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiChannelPressureMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiChannelPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiChannelPressureMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiContinueMessage

   procedure Initialize (this : in out MidiContinueMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiContinueMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiContinueMessage

   function Constructor return MidiContinueMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiContinueMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiContinueMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiContinueMessage

   function get_Timestamp
   (
      this : in out MidiContinueMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiContinueMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiContinueMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiControlChangeMessage

   procedure Initialize (this : in out MidiControlChangeMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiControlChangeMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiControlChangeMessage, IMidiControlChangeMessage_Ptr);
   begin
      if this.m_IMidiControlChangeMessage /= null then
         if this.m_IMidiControlChangeMessage.all /= null then
            RefCount := this.m_IMidiControlChangeMessage.all.Release;
            Free (this.m_IMidiControlChangeMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiControlChangeMessage

   function Constructor
   (
      channel : WinRt.Byte;
      controller : WinRt.Byte;
      controlValue : WinRt.Byte
   )
   return MidiControlChangeMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiControlChangeMessage");
      m_Factory    : access IMidiControlChangeMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiControlChangeMessage;
   begin
      return RetVal : MidiControlChangeMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiControlChangeMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiControlChangeMessage (channel, controller, controlValue, m_ComRetVal'Access);
            Retval.m_IMidiControlChangeMessage := new Windows.Devices.Midi.IMidiControlChangeMessage;
            Retval.m_IMidiControlChangeMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiControlChangeMessage

   function get_Channel
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiControlChangeMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Controller
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiControlChangeMessage.all.get_Controller (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ControlValue
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiControlChangeMessage.all.get_ControlValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiControlChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiControlChangeMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiControlChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiControlChangeMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiControlChangeMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiControlChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiControlChangeMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiInPort

   procedure Initialize (this : in out MidiInPort) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiInPort) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiInPort, IMidiInPort_Ptr);
   begin
      if this.m_IMidiInPort /= null then
         if this.m_IMidiInPort.all /= null then
            RefCount := this.m_IMidiInPort.all.Release;
            Free (this.m_IMidiInPort);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MidiInPort

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Midi.MidiInPort is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiInPort");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiInPortStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MidiInPort.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MidiInPort.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Midi.IMidiInPort;
      m_IID            : aliased WinRt.IID := (3429256974, 60849, 21960, (158, 247, 236, 144, 7, 228, 86, 28 )); -- Windows.Devices.Midi.MidiInPort;
      m_HandlerIID     : aliased WinRt.IID := (1812533170, 32921, 21903, (138, 146, 154, 142, 168, 6, 230, 251 ));
      m_Handler        : AsyncOperationCompletedHandler_MidiInPort.Kind := new AsyncOperationCompletedHandler_MidiInPort.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MidiInPort.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MidiInPort.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MidiInPort.Kind_Delegate, AsyncOperationCompletedHandler_MidiInPort.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Midi.MidiInPort do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiInPortStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMidiInPort := new Windows.Devices.Midi.IMidiInPort;
                     Retval.m_IMidiInPort.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiInPort");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiInPortStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMidiInPortStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiInPort

   function add_MessageReceived
   (
      this : in out MidiInPort;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMidiInPort.all.add_MessageReceived (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MessageReceived
   (
      this : in out MidiInPort;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMidiInPort.all.remove_MessageReceived (token);
   end;

   function get_DeviceId
   (
      this : in out MidiInPort
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMidiInPort.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out MidiInPort
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiInPort_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiInPort.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiMessageReceivedEventArgs

   procedure Initialize (this : in out MidiMessageReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiMessageReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessageReceivedEventArgs, IMidiMessageReceivedEventArgs_Ptr);
   begin
      if this.m_IMidiMessageReceivedEventArgs /= null then
         if this.m_IMidiMessageReceivedEventArgs.all /= null then
            RefCount := this.m_IMidiMessageReceivedEventArgs.all.Release;
            Free (this.m_IMidiMessageReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiMessageReceivedEventArgs

   function get_Message
   (
      this : in out MidiMessageReceivedEventArgs
   )
   return WinRt.Windows.Devices.Midi.IMidiMessage is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      Hr := this.m_IMidiMessageReceivedEventArgs.all.get_Message (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiNoteOffMessage

   procedure Initialize (this : in out MidiNoteOffMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiNoteOffMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiNoteOffMessage, IMidiNoteOffMessage_Ptr);
   begin
      if this.m_IMidiNoteOffMessage /= null then
         if this.m_IMidiNoteOffMessage.all /= null then
            RefCount := this.m_IMidiNoteOffMessage.all.Release;
            Free (this.m_IMidiNoteOffMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiNoteOffMessage

   function Constructor
   (
      channel : WinRt.Byte;
      note : WinRt.Byte;
      velocity : WinRt.Byte
   )
   return MidiNoteOffMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiNoteOffMessage");
      m_Factory    : access IMidiNoteOffMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiNoteOffMessage;
   begin
      return RetVal : MidiNoteOffMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiNoteOffMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiNoteOffMessage (channel, note, velocity, m_ComRetVal'Access);
            Retval.m_IMidiNoteOffMessage := new Windows.Devices.Midi.IMidiNoteOffMessage;
            Retval.m_IMidiNoteOffMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiNoteOffMessage

   function get_Channel
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOffMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Note
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOffMessage.all.get_Note (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Velocity
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOffMessage.all.get_Velocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOffMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOffMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOffMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOffMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiNoteOffMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOffMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOffMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiNoteOnMessage

   procedure Initialize (this : in out MidiNoteOnMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiNoteOnMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiNoteOnMessage, IMidiNoteOnMessage_Ptr);
   begin
      if this.m_IMidiNoteOnMessage /= null then
         if this.m_IMidiNoteOnMessage.all /= null then
            RefCount := this.m_IMidiNoteOnMessage.all.Release;
            Free (this.m_IMidiNoteOnMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiNoteOnMessage

   function Constructor
   (
      channel : WinRt.Byte;
      note : WinRt.Byte;
      velocity : WinRt.Byte
   )
   return MidiNoteOnMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiNoteOnMessage");
      m_Factory    : access IMidiNoteOnMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiNoteOnMessage;
   begin
      return RetVal : MidiNoteOnMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiNoteOnMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiNoteOnMessage (channel, note, velocity, m_ComRetVal'Access);
            Retval.m_IMidiNoteOnMessage := new Windows.Devices.Midi.IMidiNoteOnMessage;
            Retval.m_IMidiNoteOnMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiNoteOnMessage

   function get_Channel
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOnMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Note
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOnMessage.all.get_Note (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Velocity
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiNoteOnMessage.all.get_Velocity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOnMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOnMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOnMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOnMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiNoteOnMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiNoteOnMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiNoteOnMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiOutPort

   procedure Initialize (this : in out MidiOutPort) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiOutPort) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiOutPort, IMidiOutPort_Ptr);
   begin
      if this.m_IMidiOutPort /= null then
         if this.m_IMidiOutPort.all /= null then
            RefCount := this.m_IMidiOutPort.all.Release;
            Free (this.m_IMidiOutPort);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MidiOutPort

   function FromIdAsync_MidiOutPort
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Midi.IMidiOutPort is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiOutPort");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiOutPortStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IMidiOutPort.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IMidiOutPort.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Midi.IMidiOutPort;
      m_IID            : aliased WinRt.IID := (845781581, 7360, 23068, (157, 166, 135, 81, 151, 135, 80, 134 )); -- Windows.Devices.Midi.IMidiOutPort;
      m_HandlerIID     : aliased WinRt.IID := (4006836229, 10825, 22964, (180, 212, 17, 136, 198, 129, 145, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_IMidiOutPort.Kind := new AsyncOperationCompletedHandler_IMidiOutPort.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IMidiOutPort.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IMidiOutPort.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IMidiOutPort.Kind_Delegate, AsyncOperationCompletedHandler_IMidiOutPort.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMidiOutPortStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_deviceId);
      return m_RetVal;
   end;

   function GetDeviceSelector_MidiOutPort
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiOutPort");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiOutPortStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMidiOutPortStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiOutPort

   procedure SendMessage
   (
      this : in out MidiOutPort;
      midiMessage : Windows.Devices.Midi.IMidiMessage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMidiOutPort.all.SendMessage (midiMessage);
   end;

   procedure SendBuffer
   (
      this : in out MidiOutPort;
      midiData : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMidiOutPort.all.SendBuffer (midiData);
   end;

   function get_DeviceId
   (
      this : in out MidiOutPort
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMidiOutPort.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out MidiOutPort
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiOutPort_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiOutPort.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiPitchBendChangeMessage

   procedure Initialize (this : in out MidiPitchBendChangeMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiPitchBendChangeMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiPitchBendChangeMessage, IMidiPitchBendChangeMessage_Ptr);
   begin
      if this.m_IMidiPitchBendChangeMessage /= null then
         if this.m_IMidiPitchBendChangeMessage.all /= null then
            RefCount := this.m_IMidiPitchBendChangeMessage.all.Release;
            Free (this.m_IMidiPitchBendChangeMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiPitchBendChangeMessage

   function Constructor
   (
      channel : WinRt.Byte;
      bend : WinRt.UInt16
   )
   return MidiPitchBendChangeMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiPitchBendChangeMessage");
      m_Factory    : access IMidiPitchBendChangeMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiPitchBendChangeMessage;
   begin
      return RetVal : MidiPitchBendChangeMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiPitchBendChangeMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiPitchBendChangeMessage (channel, bend, m_ComRetVal'Access);
            Retval.m_IMidiPitchBendChangeMessage := new Windows.Devices.Midi.IMidiPitchBendChangeMessage;
            Retval.m_IMidiPitchBendChangeMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiPitchBendChangeMessage

   function get_Channel
   (
      this : in out MidiPitchBendChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiPitchBendChangeMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Bend
   (
      this : in out MidiPitchBendChangeMessage
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IMidiPitchBendChangeMessage.all.get_Bend (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiPitchBendChangeMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPitchBendChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPitchBendChangeMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiPitchBendChangeMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPitchBendChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPitchBendChangeMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiPitchBendChangeMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPitchBendChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPitchBendChangeMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiPolyphonicKeyPressureMessage

   procedure Initialize (this : in out MidiPolyphonicKeyPressureMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiPolyphonicKeyPressureMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiPolyphonicKeyPressureMessage, IMidiPolyphonicKeyPressureMessage_Ptr);
   begin
      if this.m_IMidiPolyphonicKeyPressureMessage /= null then
         if this.m_IMidiPolyphonicKeyPressureMessage.all /= null then
            RefCount := this.m_IMidiPolyphonicKeyPressureMessage.all.Release;
            Free (this.m_IMidiPolyphonicKeyPressureMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiPolyphonicKeyPressureMessage

   function Constructor
   (
      channel : WinRt.Byte;
      note : WinRt.Byte;
      pressure : WinRt.Byte
   )
   return MidiPolyphonicKeyPressureMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage");
      m_Factory    : access IMidiPolyphonicKeyPressureMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage;
   begin
      return RetVal : MidiPolyphonicKeyPressureMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiPolyphonicKeyPressureMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiPolyphonicKeyPressureMessage (channel, note, pressure, m_ComRetVal'Access);
            Retval.m_IMidiPolyphonicKeyPressureMessage := new Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage;
            Retval.m_IMidiPolyphonicKeyPressureMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiPolyphonicKeyPressureMessage

   function get_Channel
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiPolyphonicKeyPressureMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Note
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiPolyphonicKeyPressureMessage.all.get_Note (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Pressure
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiPolyphonicKeyPressureMessage.all.get_Pressure (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPolyphonicKeyPressureMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPolyphonicKeyPressureMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiPolyphonicKeyPressureMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiPolyphonicKeyPressureMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiProgramChangeMessage

   procedure Initialize (this : in out MidiProgramChangeMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiProgramChangeMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiProgramChangeMessage, IMidiProgramChangeMessage_Ptr);
   begin
      if this.m_IMidiProgramChangeMessage /= null then
         if this.m_IMidiProgramChangeMessage.all /= null then
            RefCount := this.m_IMidiProgramChangeMessage.all.Release;
            Free (this.m_IMidiProgramChangeMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiProgramChangeMessage

   function Constructor
   (
      channel : WinRt.Byte;
      program : WinRt.Byte
   )
   return MidiProgramChangeMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiProgramChangeMessage");
      m_Factory    : access IMidiProgramChangeMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiProgramChangeMessage;
   begin
      return RetVal : MidiProgramChangeMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiProgramChangeMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiProgramChangeMessage (channel, program, m_ComRetVal'Access);
            Retval.m_IMidiProgramChangeMessage := new Windows.Devices.Midi.IMidiProgramChangeMessage;
            Retval.m_IMidiProgramChangeMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiProgramChangeMessage

   function get_Channel
   (
      this : in out MidiProgramChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiProgramChangeMessage.all.get_Channel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Program
   (
      this : in out MidiProgramChangeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiProgramChangeMessage.all.get_Program (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiProgramChangeMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiProgramChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiProgramChangeMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiProgramChangeMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiProgramChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiProgramChangeMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiProgramChangeMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiProgramChangeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiProgramChangeMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiSongPositionPointerMessage

   procedure Initialize (this : in out MidiSongPositionPointerMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiSongPositionPointerMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiSongPositionPointerMessage, IMidiSongPositionPointerMessage_Ptr);
   begin
      if this.m_IMidiSongPositionPointerMessage /= null then
         if this.m_IMidiSongPositionPointerMessage.all /= null then
            RefCount := this.m_IMidiSongPositionPointerMessage.all.Release;
            Free (this.m_IMidiSongPositionPointerMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiSongPositionPointerMessage

   function Constructor
   (
      beats : WinRt.UInt16
   )
   return MidiSongPositionPointerMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSongPositionPointerMessage");
      m_Factory    : access IMidiSongPositionPointerMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiSongPositionPointerMessage;
   begin
      return RetVal : MidiSongPositionPointerMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiSongPositionPointerMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiSongPositionPointerMessage (beats, m_ComRetVal'Access);
            Retval.m_IMidiSongPositionPointerMessage := new Windows.Devices.Midi.IMidiSongPositionPointerMessage;
            Retval.m_IMidiSongPositionPointerMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiSongPositionPointerMessage

   function get_Beats
   (
      this : in out MidiSongPositionPointerMessage
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IMidiSongPositionPointerMessage.all.get_Beats (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiSongPositionPointerMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongPositionPointerMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongPositionPointerMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiSongPositionPointerMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongPositionPointerMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongPositionPointerMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiSongPositionPointerMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongPositionPointerMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongPositionPointerMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiSongSelectMessage

   procedure Initialize (this : in out MidiSongSelectMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiSongSelectMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiSongSelectMessage, IMidiSongSelectMessage_Ptr);
   begin
      if this.m_IMidiSongSelectMessage /= null then
         if this.m_IMidiSongSelectMessage.all /= null then
            RefCount := this.m_IMidiSongSelectMessage.all.Release;
            Free (this.m_IMidiSongSelectMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiSongSelectMessage

   function Constructor
   (
      song : WinRt.Byte
   )
   return MidiSongSelectMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSongSelectMessage");
      m_Factory    : access IMidiSongSelectMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiSongSelectMessage;
   begin
      return RetVal : MidiSongSelectMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiSongSelectMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiSongSelectMessage (song, m_ComRetVal'Access);
            Retval.m_IMidiSongSelectMessage := new Windows.Devices.Midi.IMidiSongSelectMessage;
            Retval.m_IMidiSongSelectMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiSongSelectMessage

   function get_Song
   (
      this : in out MidiSongSelectMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiSongSelectMessage.all.get_Song (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiSongSelectMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongSelectMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongSelectMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiSongSelectMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongSelectMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongSelectMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiSongSelectMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSongSelectMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSongSelectMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiStartMessage

   procedure Initialize (this : in out MidiStartMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiStartMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiStartMessage

   function Constructor return MidiStartMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiStartMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiStartMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiStartMessage

   function get_Timestamp
   (
      this : in out MidiStartMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiStartMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiStartMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiStopMessage

   procedure Initialize (this : in out MidiStopMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiStopMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiStopMessage

   function Constructor return MidiStopMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiStopMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiStopMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiStopMessage

   function get_Timestamp
   (
      this : in out MidiStopMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiStopMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiStopMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiSynthesizer

   procedure Initialize (this : in out MidiSynthesizer) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiSynthesizer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiSynthesizer, IMidiSynthesizer_Ptr);
   begin
      if this.m_IMidiSynthesizer /= null then
         if this.m_IMidiSynthesizer.all /= null then
            RefCount := this.m_IMidiSynthesizer.all.Release;
            Free (this.m_IMidiSynthesizer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MidiSynthesizer

   function CreateAsync
   return WinRt.Windows.Devices.Midi.MidiSynthesizer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSynthesizer");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiSynthesizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MidiSynthesizer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MidiSynthesizer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Midi.IMidiSynthesizer;
      m_IID            : aliased WinRt.IID := (2475211128, 5105, 24119, (129, 51, 148, 67, 13, 144, 221, 80 )); -- Windows.Devices.Midi.MidiSynthesizer;
      m_HandlerIID     : aliased WinRt.IID := (1567712053, 53383, 20847, (173, 10, 99, 246, 28, 188, 243, 66 ));
      m_Handler        : AsyncOperationCompletedHandler_MidiSynthesizer.Kind := new AsyncOperationCompletedHandler_MidiSynthesizer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MidiSynthesizer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MidiSynthesizer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MidiSynthesizer.Kind_Delegate, AsyncOperationCompletedHandler_MidiSynthesizer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Midi.MidiSynthesizer do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiSynthesizerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMidiSynthesizer := new Windows.Devices.Midi.IMidiSynthesizer;
                     Retval.m_IMidiSynthesizer.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAsync
   (
      audioDevice : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Windows.Devices.Midi.MidiSynthesizer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSynthesizer");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiSynthesizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MidiSynthesizer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MidiSynthesizer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Midi.IMidiSynthesizer;
      m_IID            : aliased WinRt.IID := (2475211128, 5105, 24119, (129, 51, 148, 67, 13, 144, 221, 80 )); -- Windows.Devices.Midi.MidiSynthesizer;
      m_HandlerIID     : aliased WinRt.IID := (1567712053, 53383, 20847, (173, 10, 99, 246, 28, 188, 243, 66 ));
      m_Handler        : AsyncOperationCompletedHandler_MidiSynthesizer.Kind := new AsyncOperationCompletedHandler_MidiSynthesizer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MidiSynthesizer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MidiSynthesizer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MidiSynthesizer.Kind_Delegate, AsyncOperationCompletedHandler_MidiSynthesizer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Midi.MidiSynthesizer do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiSynthesizerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (audioDevice.m_IDeviceInformation.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMidiSynthesizer := new Windows.Devices.Midi.IMidiSynthesizer;
                     Retval.m_IMidiSynthesizer.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function IsSynthesizer
   (
      midiDevice : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSynthesizer");
      m_Factory        : access WinRt.Windows.Devices.Midi.IMidiSynthesizerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMidiSynthesizerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSynthesizer (midiDevice.m_IDeviceInformation.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiSynthesizer

   function get_AudioDevice
   (
      this : in out MidiSynthesizer
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IMidiSynthesizer.all.get_AudioDevice (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_Volume
   (
      this : in out MidiSynthesizer
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMidiSynthesizer.all.get_Volume (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Volume
   (
      this : in out MidiSynthesizer;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMidiSynthesizer.all.put_Volume (value);
   end;

   procedure SendMessage
   (
      this : in out MidiSynthesizer;
      midiMessage : Windows.Devices.Midi.IMidiMessage
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiOutPort := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSynthesizer_Interface, WinRt.Windows.Devices.Midi.IMidiOutPort, WinRt.Windows.Devices.Midi.IID_IMidiOutPort'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSynthesizer.all);
      Hr := m_Interface.SendMessage (midiMessage);
      m_RefCount := m_Interface.Release;
   end;

   procedure SendBuffer
   (
      this : in out MidiSynthesizer;
      midiData : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiOutPort := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSynthesizer_Interface, WinRt.Windows.Devices.Midi.IMidiOutPort, WinRt.Windows.Devices.Midi.IID_IMidiOutPort'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSynthesizer.all);
      Hr := m_Interface.SendBuffer (midiData);
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceId
   (
      this : in out MidiSynthesizer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiOutPort := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSynthesizer_Interface, WinRt.Windows.Devices.Midi.IMidiOutPort, WinRt.Windows.Devices.Midi.IID_IMidiOutPort'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSynthesizer.all);
      Hr := m_Interface.get_DeviceId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out MidiSynthesizer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiSynthesizer_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiSynthesizer.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiSystemExclusiveMessage

   procedure Initialize (this : in out MidiSystemExclusiveMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiSystemExclusiveMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiSystemExclusiveMessage

   function Constructor
   (
      rawData : Windows.Storage.Streams.IBuffer
   )
   return MidiSystemExclusiveMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSystemExclusiveMessage");
      m_Factory    : access IMidiSystemExclusiveMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiSystemExclusiveMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiSystemExclusiveMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiSystemExclusiveMessage (rawData, m_ComRetVal'Access);
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiSystemExclusiveMessage

   function get_Timestamp
   (
      this : in out MidiSystemExclusiveMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiSystemExclusiveMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiSystemExclusiveMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiSystemResetMessage

   procedure Initialize (this : in out MidiSystemResetMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiSystemResetMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiSystemResetMessage

   function Constructor return MidiSystemResetMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiSystemResetMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiSystemResetMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiSystemResetMessage

   function get_Timestamp
   (
      this : in out MidiSystemResetMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiSystemResetMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiSystemResetMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiTimeCodeMessage

   procedure Initialize (this : in out MidiTimeCodeMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiTimeCodeMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiTimeCodeMessage, IMidiTimeCodeMessage_Ptr);
   begin
      if this.m_IMidiTimeCodeMessage /= null then
         if this.m_IMidiTimeCodeMessage.all /= null then
            RefCount := this.m_IMidiTimeCodeMessage.all.Release;
            Free (this.m_IMidiTimeCodeMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiTimeCodeMessage

   function Constructor
   (
      frameType : WinRt.Byte;
      values : WinRt.Byte
   )
   return MidiTimeCodeMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiTimeCodeMessage");
      m_Factory    : access IMidiTimeCodeMessageFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiTimeCodeMessage;
   begin
      return RetVal : MidiTimeCodeMessage do
         Hr := RoGetActivationFactory (m_hString, IID_IMidiTimeCodeMessageFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMidiTimeCodeMessage (frameType, values, m_ComRetVal'Access);
            Retval.m_IMidiTimeCodeMessage := new Windows.Devices.Midi.IMidiTimeCodeMessage;
            Retval.m_IMidiTimeCodeMessage.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiTimeCodeMessage

   function get_FrameType
   (
      this : in out MidiTimeCodeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiTimeCodeMessage.all.get_FrameType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Values
   (
      this : in out MidiTimeCodeMessage
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IMidiTimeCodeMessage.all.get_Values (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Timestamp
   (
      this : in out MidiTimeCodeMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiTimeCodeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiTimeCodeMessage.all);
      Hr := m_Interface.get_Timestamp (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiTimeCodeMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiTimeCodeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiTimeCodeMessage.all);
      Hr := m_Interface.get_RawData (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiTimeCodeMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Midi.IMidiMessage := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Midi.IMidiTimeCodeMessage_Interface, WinRt.Windows.Devices.Midi.IMidiMessage, WinRt.Windows.Devices.Midi.IID_IMidiMessage'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMidiTimeCodeMessage.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiTimingClockMessage

   procedure Initialize (this : in out MidiTimingClockMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiTimingClockMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiTimingClockMessage

   function Constructor return MidiTimingClockMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiTimingClockMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiTimingClockMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiTimingClockMessage

   function get_Timestamp
   (
      this : in out MidiTimingClockMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiTimingClockMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiTimingClockMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MidiTuneRequestMessage

   procedure Initialize (this : in out MidiTuneRequestMessage) is
   begin
      null;
   end;

   procedure Finalize (this : in out MidiTuneRequestMessage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMidiMessage, IMidiMessage_Ptr);
   begin
      if this.m_IMidiMessage /= null then
         if this.m_IMidiMessage.all /= null then
            RefCount := this.m_IMidiMessage.all.Release;
            Free (this.m_IMidiMessage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MidiTuneRequestMessage

   function Constructor return MidiTuneRequestMessage is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.Midi.MidiTuneRequestMessage");
      m_ComRetVal  : aliased Windows.Devices.Midi.IMidiMessage;
   begin
      return RetVal : MidiTuneRequestMessage do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMidiMessage := new Windows.Devices.Midi.IMidiMessage;
            Retval.m_IMidiMessage.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MidiTuneRequestMessage

   function get_Timestamp
   (
      this : in out MidiTuneRequestMessage
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMidiMessage.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RawData
   (
      this : in out MidiTuneRequestMessage
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IMidiMessage.all.get_RawData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out MidiTuneRequestMessage
   )
   return WinRt.Windows.Devices.Midi.MidiMessageType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Midi.MidiMessageType;
   begin
      Hr := this.m_IMidiMessage.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Connectivity;
with WinRt.Windows.Security.Credentials;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.WiFi is

   package IAsyncOperation_WiFiConnectionResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFi.IWiFiConnectionResult);
   package AsyncOperationCompletedHandler_WiFiConnectionResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFi.IWiFiConnectionResult);

   package IAsyncOperation_WiFiWpsConfigurationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFi.IWiFiWpsConfigurationResult);
   package AsyncOperationCompletedHandler_WiFiWpsConfigurationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFi.IWiFiWpsConfigurationResult);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_WiFiAdapter is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFi.IWiFiAdapter);
   package AsyncOperationCompletedHandler_WiFiAdapter is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFi.IWiFiAdapter);

   package IAsyncOperation_WiFiAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFi.WiFiAccessStatus);
   package AsyncOperationCompletedHandler_WiFiAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFi.WiFiAccessStatus);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiAdapter

   procedure Initialize (this : in out WiFiAdapter) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiAdapter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiAdapter, IWiFiAdapter_Ptr);
   begin
      if this.m_IWiFiAdapter /= null then
         if this.m_IWiFiAdapter.all /= null then
            RefCount := this.m_IWiFiAdapter.all.Release;
            Free (this.m_IWiFiAdapter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WiFiAdapter

   function FindAllAdaptersAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFi.WiFiAdapter");
      m_Factory        : access WinRt.Windows.Devices.WiFi.IWiFiAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (826310699, 39036, 23638, (164, 48, 144, 251, 193, 137, 141, 218 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (2458921479, 12056, 22249, (135, 251, 36, 254, 25, 247, 6, 136 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiAdapterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllAdaptersAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFi.WiFiAdapter");
      m_Factory        : access WinRt.Windows.Devices.WiFi.IWiFiAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiAdapterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFi.WiFiAdapter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFi.WiFiAdapter");
      m_Factory        : access WinRt.Windows.Devices.WiFi.IWiFiAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiAdapter.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiAdapter.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiAdapter;
      m_IID            : aliased WinRt.IID := (500134813, 4279, 23017, (171, 71, 139, 2, 119, 226, 1, 147 )); -- Windows.Devices.WiFi.WiFiAdapter;
      m_HandlerIID     : aliased WinRt.IID := (892743541, 27310, 22029, (179, 208, 63, 174, 156, 114, 96, 168 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiAdapter.Kind := new AsyncOperationCompletedHandler_WiFiAdapter.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiAdapter.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiAdapter.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiAdapter.Kind_Delegate, AsyncOperationCompletedHandler_WiFiAdapter.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiAdapter do
         Hr := RoGetActivationFactory (m_hString, IID_IWiFiAdapterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWiFiAdapter := new Windows.Devices.WiFi.IWiFiAdapter;
                     Retval.m_IWiFiAdapter.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function RequestAccessAsync
   return WinRt.Windows.Devices.WiFi.WiFiAccessStatus is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFi.WiFiAdapter");
      m_Factory        : access WinRt.Windows.Devices.WiFi.IWiFiAdapterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiAccessStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiAccessStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.WiFiAccessStatus;
      m_IID            : aliased WinRt.IID := (4173814330, 29594, 22442, (152, 109, 31, 118, 4, 215, 227, 134 )); -- Windows.Devices.WiFi.WiFiAccessStatus;
      m_HandlerIID     : aliased WinRt.IID := (1709738442, 63177, 23669, (190, 249, 5, 171, 136, 164, 154, 84 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiAccessStatus.Kind := new AsyncOperationCompletedHandler_WiFiAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiAccessStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiAccessStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_WiFiAccessStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiAdapterStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiAdapter

   function get_NetworkAdapter
   (
      this : in out WiFiAdapter
   )
   return WinRt.Windows.Networking.Connectivity.NetworkAdapter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkAdapter;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkAdapter do
         Hr := this.m_IWiFiAdapter.all.get_NetworkAdapter (m_ComRetVal'Access);
         Retval.m_INetworkAdapter := new Windows.Networking.Connectivity.INetworkAdapter;
         Retval.m_INetworkAdapter.all := m_ComRetVal;
      end return;
   end;

   procedure ScanAsync
   (
      this : in out WiFiAdapter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWiFiAdapter.all.ScanAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_NetworkReport
   (
      this : in out WiFiAdapter
   )
   return WinRt.Windows.Devices.WiFi.WiFiNetworkReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFi.IWiFiNetworkReport;
   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiNetworkReport do
         Hr := this.m_IWiFiAdapter.all.get_NetworkReport (m_ComRetVal'Access);
         Retval.m_IWiFiNetworkReport := new Windows.Devices.WiFi.IWiFiNetworkReport;
         Retval.m_IWiFiNetworkReport.all := m_ComRetVal;
      end return;
   end;

   function add_AvailableNetworksChanged
   (
      this : in out WiFiAdapter;
      args : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiAdapter.all.add_AvailableNetworksChanged (args, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailableNetworksChanged
   (
      this : in out WiFiAdapter;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiAdapter.all.remove_AvailableNetworksChanged (eventCookie);
   end;

   function ConnectAsync
   (
      this : in out WiFiAdapter;
      availableNetwork : Windows.Devices.WiFi.WiFiAvailableNetwork'Class;
      reconnectionKind : Windows.Devices.WiFi.WiFiReconnectionKind
   )
   return WinRt.Windows.Devices.WiFi.WiFiConnectionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiConnectionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiConnectionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiConnectionResult;
      m_IID            : aliased WinRt.IID := (4288945993, 19504, 20691, (149, 73, 228, 240, 85, 180, 23, 180 )); -- Windows.Devices.WiFi.WiFiConnectionResult;
      m_HandlerIID     : aliased WinRt.IID := (4085312397, 7762, 21328, (162, 136, 134, 28, 150, 58, 132, 240 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiConnectionResult.Kind := new AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiConnectionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate, AsyncOperationCompletedHandler_WiFiConnectionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiConnectionResult do
         Hr := this.m_IWiFiAdapter.all.ConnectAsync (availableNetwork.m_IWiFiAvailableNetwork.all, reconnectionKind, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiConnectionResult := new Windows.Devices.WiFi.IWiFiConnectionResult;
                  Retval.m_IWiFiConnectionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiAdapter;
      availableNetwork : Windows.Devices.WiFi.WiFiAvailableNetwork'Class;
      reconnectionKind : Windows.Devices.WiFi.WiFiReconnectionKind;
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class
   )
   return WinRt.Windows.Devices.WiFi.WiFiConnectionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiConnectionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiConnectionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiConnectionResult;
      m_IID            : aliased WinRt.IID := (4288945993, 19504, 20691, (149, 73, 228, 240, 85, 180, 23, 180 )); -- Windows.Devices.WiFi.WiFiConnectionResult;
      m_HandlerIID     : aliased WinRt.IID := (4085312397, 7762, 21328, (162, 136, 134, 28, 150, 58, 132, 240 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiConnectionResult.Kind := new AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiConnectionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate, AsyncOperationCompletedHandler_WiFiConnectionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiConnectionResult do
         Hr := this.m_IWiFiAdapter.all.ConnectAsync (availableNetwork.m_IWiFiAvailableNetwork.all, reconnectionKind, passwordCredential.m_IPasswordCredential.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiConnectionResult := new Windows.Devices.WiFi.IWiFiConnectionResult;
                  Retval.m_IWiFiConnectionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiAdapter;
      availableNetwork : Windows.Devices.WiFi.WiFiAvailableNetwork'Class;
      reconnectionKind : Windows.Devices.WiFi.WiFiReconnectionKind;
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class;
      ssid : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFi.WiFiConnectionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_ssid : WinRt.HString := To_HString (ssid);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiConnectionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiConnectionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiConnectionResult;
      m_IID            : aliased WinRt.IID := (4288945993, 19504, 20691, (149, 73, 228, 240, 85, 180, 23, 180 )); -- Windows.Devices.WiFi.WiFiConnectionResult;
      m_HandlerIID     : aliased WinRt.IID := (4085312397, 7762, 21328, (162, 136, 134, 28, 150, 58, 132, 240 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiConnectionResult.Kind := new AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiConnectionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate, AsyncOperationCompletedHandler_WiFiConnectionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiConnectionResult do
         Hr := this.m_IWiFiAdapter.all.ConnectAsync (availableNetwork.m_IWiFiAvailableNetwork.all, reconnectionKind, passwordCredential.m_IPasswordCredential.all, HStr_ssid, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiConnectionResult := new Windows.Devices.WiFi.IWiFiConnectionResult;
                  Retval.m_IWiFiConnectionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_ssid);
      end return;
   end;

   procedure Disconnect
   (
      this : in out WiFiAdapter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiAdapter.all.Disconnect;
   end;

   function GetWpsConfigurationAsync
   (
      this : in out WiFiAdapter;
      availableNetwork : Windows.Devices.WiFi.WiFiAvailableNetwork'Class
   )
   return WinRt.Windows.Devices.WiFi.WiFiWpsConfigurationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFi.IWiFiAdapter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiWpsConfigurationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiWpsConfigurationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiWpsConfigurationResult;
      m_IID            : aliased WinRt.IID := (1265769844, 649, 22588, (168, 29, 243, 190, 3, 234, 89, 109 )); -- Windows.Devices.WiFi.WiFiWpsConfigurationResult;
      m_HandlerIID     : aliased WinRt.IID := (872035419, 10445, 22696, (188, 252, 190, 76, 253, 16, 142, 145 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiWpsConfigurationResult.Kind := new AsyncOperationCompletedHandler_WiFiWpsConfigurationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiWpsConfigurationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiWpsConfigurationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiWpsConfigurationResult.Kind_Delegate, AsyncOperationCompletedHandler_WiFiWpsConfigurationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFi.IWiFiAdapter_Interface, WinRt.Windows.Devices.WiFi.IWiFiAdapter2, WinRt.Windows.Devices.WiFi.IID_IWiFiAdapter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiWpsConfigurationResult do
         m_Interface := QInterface (this.m_IWiFiAdapter.all);
         Hr := m_Interface.GetWpsConfigurationAsync (availableNetwork.m_IWiFiAvailableNetwork.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiWpsConfigurationResult := new Windows.Devices.WiFi.IWiFiWpsConfigurationResult;
                  Retval.m_IWiFiWpsConfigurationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiAdapter;
      availableNetwork : Windows.Devices.WiFi.WiFiAvailableNetwork'Class;
      reconnectionKind : Windows.Devices.WiFi.WiFiReconnectionKind;
      passwordCredential : Windows.Security.Credentials.PasswordCredential'Class;
      ssid : WinRt.WString;
      connectionMethod : Windows.Devices.WiFi.WiFiConnectionMethod
   )
   return WinRt.Windows.Devices.WiFi.WiFiConnectionResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.WiFi.IWiFiAdapter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_ssid : WinRt.HString := To_HString (ssid);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiConnectionResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiConnectionResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFi.IWiFiConnectionResult;
      m_IID            : aliased WinRt.IID := (4288945993, 19504, 20691, (149, 73, 228, 240, 85, 180, 23, 180 )); -- Windows.Devices.WiFi.WiFiConnectionResult;
      m_HandlerIID     : aliased WinRt.IID := (4085312397, 7762, 21328, (162, 136, 134, 28, 150, 58, 132, 240 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiConnectionResult.Kind := new AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiConnectionResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiConnectionResult.Kind_Delegate, AsyncOperationCompletedHandler_WiFiConnectionResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFi.IWiFiAdapter_Interface, WinRt.Windows.Devices.WiFi.IWiFiAdapter2, WinRt.Windows.Devices.WiFi.IID_IWiFiAdapter2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.WiFi.WiFiConnectionResult do
         m_Interface := QInterface (this.m_IWiFiAdapter.all);
         Hr := m_Interface.ConnectAsync (availableNetwork.m_IWiFiAvailableNetwork.all, reconnectionKind, passwordCredential.m_IPasswordCredential.all, HStr_ssid, connectionMethod, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiConnectionResult := new Windows.Devices.WiFi.IWiFiConnectionResult;
                  Retval.m_IWiFiConnectionResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_ssid);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiAvailableNetwork

   procedure Initialize (this : in out WiFiAvailableNetwork) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiAvailableNetwork) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiAvailableNetwork, IWiFiAvailableNetwork_Ptr);
   begin
      if this.m_IWiFiAvailableNetwork /= null then
         if this.m_IWiFiAvailableNetwork.all /= null then
            RefCount := this.m_IWiFiAvailableNetwork.all.Release;
            Free (this.m_IWiFiAvailableNetwork);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiAvailableNetwork

   function get_Uptime
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_Uptime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Ssid
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_Ssid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Bssid
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_Bssid (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ChannelCenterFrequencyInKilohertz
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_ChannelCenterFrequencyInKilohertz (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkRssiInDecibelMilliwatts
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_NetworkRssiInDecibelMilliwatts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SignalBars
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_SignalBars (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NetworkKind
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Windows.Devices.WiFi.WiFiNetworkKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFi.WiFiNetworkKind;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_NetworkKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhyKind
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Windows.Devices.WiFi.WiFiPhyKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFi.WiFiPhyKind;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_PhyKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SecuritySettings
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Windows.Networking.Connectivity.NetworkSecuritySettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Connectivity.INetworkSecuritySettings;
   begin
      return RetVal : WinRt.Windows.Networking.Connectivity.NetworkSecuritySettings do
         Hr := this.m_IWiFiAvailableNetwork.all.get_SecuritySettings (m_ComRetVal'Access);
         Retval.m_INetworkSecuritySettings := new Windows.Networking.Connectivity.INetworkSecuritySettings;
         Retval.m_INetworkSecuritySettings.all := m_ComRetVal;
      end return;
   end;

   function get_BeaconInterval
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_BeaconInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsWiFiDirect
   (
      this : in out WiFiAvailableNetwork
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiAvailableNetwork.all.get_IsWiFiDirect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiConnectionResult

   procedure Initialize (this : in out WiFiConnectionResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiConnectionResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiConnectionResult, IWiFiConnectionResult_Ptr);
   begin
      if this.m_IWiFiConnectionResult /= null then
         if this.m_IWiFiConnectionResult.all /= null then
            RefCount := this.m_IWiFiConnectionResult.all.Release;
            Free (this.m_IWiFiConnectionResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiConnectionResult

   function get_ConnectionStatus
   (
      this : in out WiFiConnectionResult
   )
   return WinRt.Windows.Devices.WiFi.WiFiConnectionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFi.WiFiConnectionStatus;
   begin
      Hr := this.m_IWiFiConnectionResult.all.get_ConnectionStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiNetworkReport

   procedure Initialize (this : in out WiFiNetworkReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiNetworkReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiNetworkReport, IWiFiNetworkReport_Ptr);
   begin
      if this.m_IWiFiNetworkReport /= null then
         if this.m_IWiFiNetworkReport.all /= null then
            RefCount := this.m_IWiFiNetworkReport.all.Release;
            Free (this.m_IWiFiNetworkReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiNetworkReport

   function get_Timestamp
   (
      this : in out WiFiNetworkReport
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IWiFiNetworkReport.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AvailableNetworks
   (
      this : in out WiFiNetworkReport
   )
   return IVectorView_IWiFiAvailableNetwork.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IWiFiAvailableNetwork.Kind;
   begin
      Hr := this.m_IWiFiNetworkReport.all.get_AvailableNetworks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IWiFiAvailableNetwork (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiWpsConfigurationResult

   procedure Initialize (this : in out WiFiWpsConfigurationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiWpsConfigurationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiWpsConfigurationResult, IWiFiWpsConfigurationResult_Ptr);
   begin
      if this.m_IWiFiWpsConfigurationResult /= null then
         if this.m_IWiFiWpsConfigurationResult.all /= null then
            RefCount := this.m_IWiFiWpsConfigurationResult.all.Release;
            Free (this.m_IWiFiWpsConfigurationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiWpsConfigurationResult

   function get_Status
   (
      this : in out WiFiWpsConfigurationResult
   )
   return WinRt.Windows.Devices.WiFi.WiFiWpsConfigurationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFi.WiFiWpsConfigurationStatus;
   begin
      Hr := this.m_IWiFiWpsConfigurationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedWpsKinds
   (
      this : in out WiFiWpsConfigurationResult
   )
   return IVectorView_WiFiWpsKind.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_WiFiWpsKind.Kind;
   begin
      Hr := this.m_IWiFiWpsConfigurationResult.all.get_SupportedWpsKinds (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_WiFiWpsKind (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

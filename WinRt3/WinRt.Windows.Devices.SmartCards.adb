--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Cryptography.Core;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.SmartCards is

   package IAsyncOperation_SmartCardStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.SmartCardStatus);
   package AsyncOperationCompletedHandler_SmartCardStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.SmartCardStatus);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IBuffer);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer);

   package IAsyncOperation_SmartCardConnection is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardConnection);
   package AsyncOperationCompletedHandler_SmartCardConnection is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardConnection);

   package IAsyncOperation_SmartCardActivationPolicyChangeResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult);
   package AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus);
   package AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus);

   package IAsyncOperation_SmartCardCryptogramStorageKeyInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo);
   package AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo);

   package IAsyncOperation_SmartCardCryptogramMaterialPossessionProof is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPossessionProof);
   package AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPossessionProof);

   package IAsyncOperation_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult);
   package AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult);

   package IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult);
   package AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult);

   package IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult);
   package AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult);

   package IAsyncOperation_SmartCardCryptogramGenerator is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator);
   package AsyncOperationCompletedHandler_SmartCardCryptogramGenerator is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator);

   package IAsyncOperation_SmartCardEmulator is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator);
   package AsyncOperationCompletedHandler_SmartCardEmulator is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_SmartCardAppletIdGroupRegistration is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration);
   package AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration);

   package IAsyncOperation_Guid is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Guid);
   package AsyncOperationCompletedHandler_Guid is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Guid);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   package IAsyncOperation_SmartCardChallengeContext is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardChallengeContext);
   package AsyncOperationCompletedHandler_SmartCardChallengeContext is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardChallengeContext);

   package IAsyncOperation_SmartCardProvisioning is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning);
   package AsyncOperationCompletedHandler_SmartCardProvisioning is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning);

   package IAsyncOperation_SmartCardReaderStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.SmartCardReaderStatus);
   package AsyncOperationCompletedHandler_SmartCardReaderStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.SmartCardReaderStatus);

   package IAsyncOperation_SmartCardReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.SmartCards.ISmartCardReader);
   package AsyncOperationCompletedHandler_SmartCardReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.SmartCards.ISmartCardReader);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CardAddedEventArgs

   procedure Initialize (this : in out CardAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CardAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICardAddedEventArgs, ICardAddedEventArgs_Ptr);
   begin
      if this.m_ICardAddedEventArgs /= null then
         if this.m_ICardAddedEventArgs.all /= null then
            RefCount := this.m_ICardAddedEventArgs.all.Release;
            Free (this.m_ICardAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CardAddedEventArgs

   function get_SmartCard
   (
      this : in out CardAddedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCard'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCard;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCard do
         Hr := this.m_ICardAddedEventArgs.all.get_SmartCard (m_ComRetVal'Access);
         Retval.m_ISmartCard := new Windows.Devices.SmartCards.ISmartCard;
         Retval.m_ISmartCard.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CardRemovedEventArgs

   procedure Initialize (this : in out CardRemovedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CardRemovedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICardRemovedEventArgs, ICardRemovedEventArgs_Ptr);
   begin
      if this.m_ICardRemovedEventArgs /= null then
         if this.m_ICardRemovedEventArgs.all /= null then
            RefCount := this.m_ICardRemovedEventArgs.all.Release;
            Free (this.m_ICardRemovedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CardRemovedEventArgs

   function get_SmartCard
   (
      this : in out CardRemovedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCard'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCard;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCard do
         Hr := this.m_ICardRemovedEventArgs.all.get_SmartCard (m_ComRetVal'Access);
         Retval.m_ISmartCard := new Windows.Devices.SmartCards.ISmartCard;
         Retval.m_ISmartCard.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body KnownSmartCardAppletIds is

      function get_PaymentSystemEnvironment
      return WinRt.Windows.Storage.Streams.IBuffer is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.KnownSmartCardAppletIds");
         m_Factory        : access WinRt.Windows.Devices.SmartCards.IKnownSmartCardAppletIds_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSmartCardAppletIds'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_PaymentSystemEnvironment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_ProximityPaymentSystemEnvironment
      return WinRt.Windows.Storage.Streams.IBuffer is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.KnownSmartCardAppletIds");
         m_Factory        : access WinRt.Windows.Devices.SmartCards.IKnownSmartCardAppletIds_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IKnownSmartCardAppletIds'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ProximityPaymentSystemEnvironment (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end KnownSmartCardAppletIds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCard

   procedure Initialize (this : in out SmartCard) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCard) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCard, ISmartCard_Ptr);
   begin
      if this.m_ISmartCard /= null then
         if this.m_ISmartCard.all /= null then
            RefCount := this.m_ISmartCard.all.Release;
            Free (this.m_ISmartCard);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCard

   function get_Reader
   (
      this : in out SmartCard
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardReader;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardReader do
         Hr := this.m_ISmartCard.all.get_Reader (m_ComRetVal'Access);
         Retval.m_ISmartCardReader := new Windows.Devices.SmartCards.ISmartCardReader;
         Retval.m_ISmartCardReader.all := m_ComRetVal;
      end return;
   end;

   function GetStatusAsync
   (
      this : in out SmartCard
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardStatus;
      m_IID            : aliased WinRt.IID := (3793892214, 36086, 20925, (153, 7, 19, 68, 170, 102, 94, 93 )); -- Windows.Devices.SmartCards.SmartCardStatus;
      m_HandlerIID     : aliased WinRt.IID := (3182381633, 15178, 22192, (174, 236, 254, 231, 28, 199, 243, 40 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardStatus.Kind := new AsyncOperationCompletedHandler_SmartCardStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCard.all.GetStatusAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAnswerToResetAsync
   (
      this : in out SmartCard
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCard.all.GetAnswerToResetAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function ConnectAsync
   (
      this : in out SmartCard
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardConnect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardConnection.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardConnection.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardConnection;
      m_IID            : aliased WinRt.IID := (2006695003, 42844, 22920, (151, 143, 52, 219, 198, 41, 213, 118 )); -- Windows.Devices.SmartCards.SmartCardConnection;
      m_HandlerIID     : aliased WinRt.IID := (3340697830, 44838, 24156, (145, 61, 14, 254, 183, 208, 142, 247 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardConnection.Kind := new AsyncOperationCompletedHandler_SmartCardConnection.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardConnection.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardConnection.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardConnection.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardConnection.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCard_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardConnect, WinRt.Windows.Devices.SmartCards.IID_ISmartCardConnect'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardConnection do
         m_Interface := QInterface (this.m_ISmartCard.all);
         Hr := m_Interface.ConnectAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardConnection := new Windows.Devices.SmartCards.ISmartCardConnection;
                  Retval.m_ISmartCardConnection.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardAppletIdGroup

   procedure Initialize (this : in out SmartCardAppletIdGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardAppletIdGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardAppletIdGroup, ISmartCardAppletIdGroup_Ptr);
   begin
      if this.m_ISmartCardAppletIdGroup /= null then
         if this.m_ISmartCardAppletIdGroup.all /= null then
            RefCount := this.m_ISmartCardAppletIdGroup.all.Release;
            Free (this.m_ISmartCardAppletIdGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardAppletIdGroup

   function Constructor return SmartCardAppletIdGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardAppletIdGroup");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
   begin
      return RetVal : SmartCardAppletIdGroup do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardAppletIdGroup := new Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
            Retval.m_ISmartCardAppletIdGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      displayName : WinRt.WString;
      appletIds : GenericObject;
      emulationCategory : Windows.Devices.SmartCards.SmartCardEmulationCategory;
      emulationType : Windows.Devices.SmartCards.SmartCardEmulationType
   )
   return SmartCardAppletIdGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardAppletIdGroup");
      m_Factory    : access ISmartCardAppletIdGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
      HStr_displayName : WinRt.HString := To_HString (displayName);
   begin
      return RetVal : SmartCardAppletIdGroup do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardAppletIdGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_displayName, appletIds, emulationCategory, emulationType, m_ComRetVal'Access);
            Retval.m_ISmartCardAppletIdGroup := new Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
            Retval.m_ISmartCardAppletIdGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_displayName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmartCardAppletIdGroup

   function get_MaxAppletIds
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardAppletIdGroup");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardAppletIdGroupStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxAppletIds (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardAppletIdGroup

   function get_DisplayName
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayName
   (
      this : in out SmartCardAppletIdGroup;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.put_DisplayName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AppletIds
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.get_AppletIds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SmartCardEmulationCategory
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulationCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardEmulationCategory;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.get_SmartCardEmulationCategory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SmartCardEmulationCategory
   (
      this : in out SmartCardAppletIdGroup;
      value : Windows.Devices.SmartCards.SmartCardEmulationCategory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.put_SmartCardEmulationCategory (value);
   end;

   function get_SmartCardEmulationType
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulationType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardEmulationType;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.get_SmartCardEmulationType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SmartCardEmulationType
   (
      this : in out SmartCardAppletIdGroup;
      value : Windows.Devices.SmartCards.SmartCardEmulationType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.put_SmartCardEmulationType (value);
   end;

   function get_AutomaticEnablement
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.get_AutomaticEnablement (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutomaticEnablement
   (
      this : in out SmartCardAppletIdGroup;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAppletIdGroup.all.put_AutomaticEnablement (value);
   end;

   function get_Logo
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.get_Logo (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Logo
   (
      this : in out SmartCardAppletIdGroup;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.put_Logo (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_Description
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.get_Description (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out SmartCardAppletIdGroup;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.put_Description (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Properties
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   function get_SecureUserAuthenticationRequired
   (
      this : in out SmartCardAppletIdGroup
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.get_SecureUserAuthenticationRequired (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SecureUserAuthenticationRequired
   (
      this : in out SmartCardAppletIdGroup;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroup2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroup2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroup.all);
      Hr := m_Interface.put_SecureUserAuthenticationRequired (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardAppletIdGroupRegistration

   procedure Initialize (this : in out SmartCardAppletIdGroupRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardAppletIdGroupRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardAppletIdGroupRegistration, ISmartCardAppletIdGroupRegistration_Ptr);
   begin
      if this.m_ISmartCardAppletIdGroupRegistration /= null then
         if this.m_ISmartCardAppletIdGroupRegistration.all /= null then
            RefCount := this.m_ISmartCardAppletIdGroupRegistration.all.Release;
            Free (this.m_ISmartCardAppletIdGroupRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardAppletIdGroupRegistration

   function get_ActivationPolicy
   (
      this : in out SmartCardAppletIdGroupRegistration
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy;
   begin
      Hr := this.m_ISmartCardAppletIdGroupRegistration.all.get_ActivationPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppletIdGroup
   (
      this : in out SmartCardAppletIdGroupRegistration
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardAppletIdGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardAppletIdGroup do
         Hr := this.m_ISmartCardAppletIdGroupRegistration.all.get_AppletIdGroup (m_ComRetVal'Access);
         Retval.m_ISmartCardAppletIdGroup := new Windows.Devices.SmartCards.ISmartCardAppletIdGroup;
         Retval.m_ISmartCardAppletIdGroup.all := m_ComRetVal;
      end return;
   end;

   function RequestActivationPolicyChangeAsync
   (
      this : in out SmartCardAppletIdGroupRegistration;
      policy : Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardActivationPolicyChangeResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardActivationPolicyChangeResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult;
      m_IID            : aliased WinRt.IID := (3102825781, 12093, 21418, (181, 198, 250, 202, 76, 127, 241, 110 )); -- Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult;
      m_HandlerIID     : aliased WinRt.IID := (2502490443, 1147, 24106, (143, 192, 112, 23, 245, 218, 221, 255 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult.Kind := new AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardActivationPolicyChangeResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardActivationPolicyChangeResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardAppletIdGroupRegistration.all.RequestActivationPolicyChangeAsync (policy, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_Id
   (
      this : in out SmartCardAppletIdGroupRegistration
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ISmartCardAppletIdGroupRegistration.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetAutomaticResponseApdusAsync
   (
      this : in out SmartCardAppletIdGroupRegistration;
      apdus : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmartCardAppletIdGroupRegistration.all.SetAutomaticResponseApdusAsync (apdus, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_SmartCardReaderId
   (
      this : in out SmartCardAppletIdGroupRegistration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroupRegistration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroupRegistration.all);
      Hr := m_Interface.get_SmartCardReaderId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetPropertiesAsync
   (
      this : in out SmartCardAppletIdGroupRegistration;
      props : Windows.Foundation.Collections.ValueSet'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAppletIdGroupRegistration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAppletIdGroupRegistration.all);
      Hr := m_Interface.SetPropertiesAsync (props.m_IPropertySet.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardAutomaticResponseApdu

   procedure Initialize (this : in out SmartCardAutomaticResponseApdu) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardAutomaticResponseApdu) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardAutomaticResponseApdu, ISmartCardAutomaticResponseApdu_Ptr);
   begin
      if this.m_ISmartCardAutomaticResponseApdu /= null then
         if this.m_ISmartCardAutomaticResponseApdu.all /= null then
            RefCount := this.m_ISmartCardAutomaticResponseApdu.all.Release;
            Free (this.m_ISmartCardAutomaticResponseApdu);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardAutomaticResponseApdu

   function Constructor
   (
      commandApdu : Windows.Storage.Streams.IBuffer;
      responseApdu : Windows.Storage.Streams.IBuffer
   )
   return SmartCardAutomaticResponseApdu is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu");
      m_Factory    : access ISmartCardAutomaticResponseApduFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu;
   begin
      return RetVal : SmartCardAutomaticResponseApdu do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardAutomaticResponseApduFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (commandApdu, responseApdu, m_ComRetVal'Access);
            Retval.m_ISmartCardAutomaticResponseApdu := new Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu;
            Retval.m_ISmartCardAutomaticResponseApdu.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardAutomaticResponseApdu

   function get_CommandApdu
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.get_CommandApdu (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CommandApdu
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.put_CommandApdu (value);
   end;

   function get_CommandApduBitMask
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.get_CommandApduBitMask (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CommandApduBitMask
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.put_CommandApduBitMask (value);
   end;

   function get_ShouldMatchLength
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.get_ShouldMatchLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldMatchLength
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.put_ShouldMatchLength (value);
   end;

   function get_AppletId
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.get_AppletId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AppletId
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.put_AppletId (value);
   end;

   function get_ResponseApdu
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.get_ResponseApdu (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ResponseApdu
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardAutomaticResponseApdu.all.put_ResponseApdu (value);
   end;

   function get_InputState
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.get_InputState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_InputState
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.put_InputState (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_OutputState
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.get_OutputState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_OutputState
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.put_OutputState (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AllowWhenCryptogramGeneratorNotPrepared
   (
      this : in out SmartCardAutomaticResponseApdu
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu3, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.get_AllowWhenCryptogramGeneratorNotPrepared (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowWhenCryptogramGeneratorNotPrepared
   (
      this : in out SmartCardAutomaticResponseApdu;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu3, WinRt.Windows.Devices.SmartCards.IID_ISmartCardAutomaticResponseApdu3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardAutomaticResponseApdu.all);
      Hr := m_Interface.put_AllowWhenCryptogramGeneratorNotPrepared (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardChallengeContext

   procedure Initialize (this : in out SmartCardChallengeContext) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardChallengeContext) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardChallengeContext, ISmartCardChallengeContext_Ptr);
   begin
      if this.m_ISmartCardChallengeContext /= null then
         if this.m_ISmartCardChallengeContext.all /= null then
            RefCount := this.m_ISmartCardChallengeContext.all.Release;
            Free (this.m_ISmartCardChallengeContext);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardChallengeContext

   function get_Challenge
   (
      this : in out SmartCardChallengeContext
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardChallengeContext.all.get_Challenge (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function VerifyResponseAsync
   (
      this : in out SmartCardChallengeContext;
      response : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardChallengeContext.all.VerifyResponseAsync (response, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ProvisionAsync
   (
      this : in out SmartCardChallengeContext;
      response : Windows.Storage.Streams.IBuffer;
      formatCard : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmartCardChallengeContext.all.ProvisionAsync (response, formatCard, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ProvisionAsync
   (
      this : in out SmartCardChallengeContext;
      response : Windows.Storage.Streams.IBuffer;
      formatCard : WinRt.Boolean;
      newCardId : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmartCardChallengeContext.all.ProvisionAsync (response, formatCard, newCardId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ChangeAdministrativeKeyAsync
   (
      this : in out SmartCardChallengeContext;
      response : Windows.Storage.Streams.IBuffer;
      newAdministrativeKey : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ISmartCardChallengeContext.all.ChangeAdministrativeKeyAsync (response, newAdministrativeKey, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out SmartCardChallengeContext
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardChallengeContext_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardChallengeContext.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardConnection

   procedure Initialize (this : in out SmartCardConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardConnection, ISmartCardConnection_Ptr);
   begin
      if this.m_ISmartCardConnection /= null then
         if this.m_ISmartCardConnection.all /= null then
            RefCount := this.m_ISmartCardConnection.all.Release;
            Free (this.m_ISmartCardConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardConnection

   function TransmitAsync
   (
      this : in out SmartCardConnection;
      command : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (1005488180, 47527, 23168, (167, 70, 94, 240, 151, 34, 120, 120 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (1371788029, 47265, 22048, (183, 70, 126, 230, 213, 51, 172, 163 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardConnection.all.TransmitAsync (command, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out SmartCardConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramGenerator

   procedure Initialize (this : in out SmartCardCryptogramGenerator) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramGenerator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramGenerator, ISmartCardCryptogramGenerator_Ptr);
   begin
      if this.m_ISmartCardCryptogramGenerator /= null then
         if this.m_ISmartCardCryptogramGenerator.all /= null then
            RefCount := this.m_ISmartCardCryptogramGenerator.all.Release;
            Free (this.m_ISmartCardCryptogramGenerator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmartCardCryptogramGenerator

   function IsSupported
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramGenerator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGeneratorStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardCryptogramGeneratorStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetSmartCardCryptogramGeneratorAsync
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGenerator is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramGenerator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGeneratorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGenerator.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGenerator.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator;
      m_IID            : aliased WinRt.IID := (1576920189, 38768, 24388, (169, 131, 242, 254, 228, 48, 118, 142 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGenerator;
      m_HandlerIID     : aliased WinRt.IID := (634164322, 18081, 20646, (173, 20, 154, 151, 24, 55, 32, 5 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGenerator.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGenerator.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGenerator.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGenerator.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGenerator.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGenerator.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGenerator do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardCryptogramGeneratorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetSmartCardCryptogramGeneratorAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardCryptogramGenerator := new Windows.Devices.SmartCards.ISmartCardCryptogramGenerator;
                     Retval.m_ISmartCardCryptogramGenerator.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramGenerator

   function get_SupportedCryptogramMaterialTypes
   (
      this : in out SmartCardCryptogramGenerator
   )
   return IVectorView_SmartCardCryptogramMaterialType.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramMaterialType.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.get_SupportedCryptogramMaterialTypes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramMaterialType (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedCryptogramAlgorithms
   (
      this : in out SmartCardCryptogramGenerator
   )
   return IVectorView_SmartCardCryptogramAlgorithm.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramAlgorithm.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.get_SupportedCryptogramAlgorithms (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramAlgorithm (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedCryptogramMaterialPackageFormats
   (
      this : in out SmartCardCryptogramGenerator
   )
   return IVectorView_SmartCardCryptogramMaterialPackageFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramMaterialPackageFormat.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.get_SupportedCryptogramMaterialPackageFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramMaterialPackageFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedCryptogramMaterialPackageConfirmationResponseFormats
   (
      this : in out SmartCardCryptogramGenerator
   )
   return IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.get_SupportedCryptogramMaterialPackageConfirmationResponseFormats (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedSmartCardCryptogramStorageKeyCapabilities
   (
      this : in out SmartCardCryptogramGenerator
   )
   return IVectorView_SmartCardCryptogramStorageKeyCapabilities.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramStorageKeyCapabilities.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.get_SupportedSmartCardCryptogramStorageKeyCapabilities (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramStorageKeyCapabilities (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function DeleteCryptogramMaterialStorageKeyAsync
   (
      this : in out SmartCardCryptogramGenerator;
      storageKeyName : WinRt.WString
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storageKeyName : WinRt.HString := To_HString (storageKeyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.DeleteCryptogramMaterialStorageKeyAsync (HStr_storageKeyName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_storageKeyName);
      return m_RetVal;
   end;

   function CreateCryptogramMaterialStorageKeyAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior;
      storageKeyName : WinRt.WString;
      algorithm : Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm;
      capabilities : Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storageKeyName : WinRt.HString := To_HString (storageKeyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.CreateCryptogramMaterialStorageKeyAsync (promptingBehavior, HStr_storageKeyName, algorithm, capabilities, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_storageKeyName);
      return m_RetVal;
   end;

   function RequestCryptogramMaterialStorageKeyInfoAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior;
      storageKeyName : WinRt.WString;
      format : Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storageKeyName : WinRt.HString := To_HString (storageKeyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramStorageKeyInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramStorageKeyInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo;
      m_IID            : aliased WinRt.IID := (562558372, 26908, 20705, (191, 79, 221, 237, 195, 230, 132, 184 )); -- Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo;
      m_HandlerIID     : aliased WinRt.IID := (1060431463, 2614, 21524, (136, 171, 99, 113, 209, 179, 176, 126 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramStorageKeyInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramStorageKeyInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo do
         Hr := this.m_ISmartCardCryptogramGenerator.all.RequestCryptogramMaterialStorageKeyInfoAsync (promptingBehavior, HStr_storageKeyName, format, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramStorageKeyInfo := new Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo;
                  Retval.m_ISmartCardCryptogramStorageKeyInfo.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storageKeyName);
      end return;
   end;

   function ImportCryptogramMaterialPackageAsync
   (
      this : in out SmartCardCryptogramGenerator;
      format : Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat;
      storageKeyName : WinRt.WString;
      materialPackageName : WinRt.WString;
      cryptogramMaterialPackage : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storageKeyName : WinRt.HString := To_HString (storageKeyName);
      HStr_materialPackageName : WinRt.HString := To_HString (materialPackageName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.ImportCryptogramMaterialPackageAsync (format, HStr_storageKeyName, HStr_materialPackageName, cryptogramMaterialPackage, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_storageKeyName);
      Hr := WindowsDeleteString (HStr_materialPackageName);
      return m_RetVal;
   end;

   function TryProvePossessionOfCryptogramMaterialPackageAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior;
      responseFormat : Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat;
      materialPackageName : WinRt.WString;
      materialName : WinRt.WString;
      challenge : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_materialPackageName : WinRt.HString := To_HString (materialPackageName);
      HStr_materialName : WinRt.HString := To_HString (materialName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramMaterialPossessionProof.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramMaterialPossessionProof.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPossessionProof;
      m_IID            : aliased WinRt.IID := (1865345590, 56896, 21940, (144, 195, 37, 86, 115, 247, 27, 46 )); -- Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof;
      m_HandlerIID     : aliased WinRt.IID := (3404875598, 34832, 23319, (149, 214, 129, 117, 138, 229, 25, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramMaterialPossessionProof.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramMaterialPossessionProof.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof do
         Hr := this.m_ISmartCardCryptogramGenerator.all.TryProvePossessionOfCryptogramMaterialPackageAsync (promptingBehavior, responseFormat, HStr_materialPackageName, HStr_materialName, challenge, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramMaterialPossessionProof := new Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPossessionProof;
                  Retval.m_ISmartCardCryptogramMaterialPossessionProof.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_materialPackageName);
         Hr := WindowsDeleteString (HStr_materialName);
      end return;
   end;

   function RequestUnlockCryptogramMaterialForUseAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.RequestUnlockCryptogramMaterialForUseAsync (promptingBehavior, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DeleteCryptogramMaterialPackageAsync
   (
      this : in out SmartCardCryptogramGenerator;
      materialPackageName : WinRt.WString
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_materialPackageName : WinRt.HString := To_HString (materialPackageName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardCryptogramGenerator.all.DeleteCryptogramMaterialPackageAsync (HStr_materialPackageName, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_materialPackageName);
      return m_RetVal;
   end;

   function ValidateRequestApduAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior;
      apduToValidate : Windows.Storage.Streams.IBuffer;
      cryptogramPlacementSteps : GenericObject
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramGenerator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardCryptogramGenerator.all);
      Hr := m_Interface.ValidateRequestApduAsync (promptingBehavior, apduToValidate, cryptogramPlacementSteps, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAllCryptogramStorageKeyCharacteristicsAsync
   (
      this : in out SmartCardCryptogramGenerator
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (2165372641, 13600, 23762, (186, 181, 8, 49, 24, 93, 44, 46 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3378551101, 45864, 24198, (176, 163, 37, 240, 159, 126, 69, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramGenerator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult do
         m_Interface := QInterface (this.m_ISmartCardCryptogramGenerator.all);
         Hr := m_Interface.GetAllCryptogramStorageKeyCharacteristicsAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
                  Retval.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAllCryptogramMaterialPackageCharacteristicsAsync
   (
      this : in out SmartCardCryptogramGenerator
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (749437352, 15401, 20689, (151, 97, 95, 57, 39, 201, 109, 202 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3444616196, 59446, 21797, (158, 219, 6, 109, 98, 5, 162, 167 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramGenerator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult do
         m_Interface := QInterface (this.m_ISmartCardCryptogramGenerator.all);
         Hr := m_Interface.GetAllCryptogramMaterialPackageCharacteristicsAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetAllCryptogramMaterialPackageCharacteristicsAsync
   (
      this : in out SmartCardCryptogramGenerator;
      storageKeyName : WinRt.WString
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storageKeyName : WinRt.HString := To_HString (storageKeyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (749437352, 15401, 20689, (151, 97, 95, 57, 39, 201, 109, 202 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (3444616196, 59446, 21797, (158, 219, 6, 109, 98, 5, 162, 167 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramGenerator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult do
         m_Interface := QInterface (this.m_ISmartCardCryptogramGenerator.all);
         Hr := m_Interface.GetAllCryptogramMaterialPackageCharacteristicsAsync (HStr_storageKeyName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storageKeyName);
      end return;
   end;

   function GetAllCryptogramMaterialCharacteristicsAsync
   (
      this : in out SmartCardCryptogramGenerator;
      promptingBehavior : Windows.Devices.SmartCards.SmartCardUnlockPromptingBehavior;
      materialPackageName : WinRt.WString
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_materialPackageName : WinRt.HString := To_HString (materialPackageName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
      m_IID            : aliased WinRt.IID := (1704085, 10972, 21698, (133, 148, 58, 54, 186, 22, 253, 134 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
      m_HandlerIID     : aliased WinRt.IID := (1171257866, 45908, 20675, (143, 36, 61, 212, 241, 103, 127, 190 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramGenerator2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult do
         m_Interface := QInterface (this.m_ISmartCardCryptogramGenerator.all);
         Hr := m_Interface.GetAllCryptogramMaterialCharacteristicsAsync (promptingBehavior, HStr_materialPackageName, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
                  Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_materialPackageName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult

   procedure Initialize (this : in out SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_Ptr);
   begin
      if this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult /= null then
         if this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all /= null then
            RefCount := this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all.Release;
            Free (this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult

   function Constructor return SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
   begin
      return RetVal : SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
            Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult

   function get_OperationStatus
   (
      this : in out SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all.get_OperationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Characteristics
   (
      this : in out SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
   )
   return IVectorView_ISmartCardCryptogramMaterialCharacteristics.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISmartCardCryptogramMaterialCharacteristics.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult.all.get_Characteristics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISmartCardCryptogramMaterialCharacteristics (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult

   procedure Initialize (this : in out SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_Ptr);
   begin
      if this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult /= null then
         if this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all /= null then
            RefCount := this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all.Release;
            Free (this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult

   function Constructor return SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
   begin
      return RetVal : SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
            Retval.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult

   function get_OperationStatus
   (
      this : in out SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all.get_OperationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Characteristics
   (
      this : in out SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
   )
   return IVectorView_ISmartCardCryptogramMaterialPackageCharacteristics.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISmartCardCryptogramMaterialPackageCharacteristics.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult.all.get_Characteristics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISmartCardCryptogramMaterialPackageCharacteristics (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult

   procedure Initialize (this : in out SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_Ptr);
   begin
      if this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult /= null then
         if this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all /= null then
            RefCount := this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all.Release;
            Free (this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult

   function Constructor return SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
   begin
      return RetVal : SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult := new Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
            Retval.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult

   function get_OperationStatus
   (
      this : in out SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all.get_OperationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Characteristics
   (
      this : in out SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
   )
   return IVectorView_ISmartCardCryptogramStorageKeyCharacteristics.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ISmartCardCryptogramStorageKeyCharacteristics.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult.all.get_Characteristics (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ISmartCardCryptogramStorageKeyCharacteristics (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramMaterialCharacteristics

   procedure Initialize (this : in out SmartCardCryptogramMaterialCharacteristics) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramMaterialCharacteristics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramMaterialCharacteristics, ISmartCardCryptogramMaterialCharacteristics_Ptr);
   begin
      if this.m_ISmartCardCryptogramMaterialCharacteristics /= null then
         if this.m_ISmartCardCryptogramMaterialCharacteristics.all /= null then
            RefCount := this.m_ISmartCardCryptogramMaterialCharacteristics.all.Release;
            Free (this.m_ISmartCardCryptogramMaterialCharacteristics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramMaterialCharacteristics

   function Constructor return SmartCardCryptogramMaterialCharacteristics is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramMaterialCharacteristics;
   begin
      return RetVal : SmartCardCryptogramMaterialCharacteristics do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramMaterialCharacteristics := new Windows.Devices.SmartCards.ISmartCardCryptogramMaterialCharacteristics;
            Retval.m_ISmartCardCryptogramMaterialCharacteristics.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramMaterialCharacteristics

   function get_MaterialName
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_MaterialName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AllowedAlgorithms
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return IVectorView_SmartCardCryptogramAlgorithm.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramAlgorithm.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_AllowedAlgorithms (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramAlgorithm (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AllowedProofOfPossessionAlgorithms
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_AllowedProofOfPossessionAlgorithms (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramMaterialPackageConfirmationResponseFormat (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AllowedValidations
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return IVectorView_SmartCardCryptogramAlgorithm.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_SmartCardCryptogramAlgorithm.Kind;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_AllowedValidations (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_SmartCardCryptogramAlgorithm (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MaterialType
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramMaterialType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramMaterialType;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_MaterialType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionMethod
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramMaterialProtectionMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramMaterialProtectionMethod;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_ProtectionMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProtectionVersion
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_ProtectionVersion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaterialLength
   (
      this : in out SmartCardCryptogramMaterialCharacteristics
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialCharacteristics.all.get_MaterialLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramMaterialPackageCharacteristics

   procedure Initialize (this : in out SmartCardCryptogramMaterialPackageCharacteristics) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramMaterialPackageCharacteristics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramMaterialPackageCharacteristics, ISmartCardCryptogramMaterialPackageCharacteristics_Ptr);
   begin
      if this.m_ISmartCardCryptogramMaterialPackageCharacteristics /= null then
         if this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all /= null then
            RefCount := this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all.Release;
            Free (this.m_ISmartCardCryptogramMaterialPackageCharacteristics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramMaterialPackageCharacteristics

   function Constructor return SmartCardCryptogramMaterialPackageCharacteristics is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPackageCharacteristics;
   begin
      return RetVal : SmartCardCryptogramMaterialPackageCharacteristics do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramMaterialPackageCharacteristics := new Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPackageCharacteristics;
            Retval.m_ISmartCardCryptogramMaterialPackageCharacteristics.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramMaterialPackageCharacteristics

   function get_PackageName
   (
      this : in out SmartCardCryptogramMaterialPackageCharacteristics
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all.get_PackageName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_StorageKeyName
   (
      this : in out SmartCardCryptogramMaterialPackageCharacteristics
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all.get_StorageKeyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DateImported
   (
      this : in out SmartCardCryptogramMaterialPackageCharacteristics
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all.get_DateImported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PackageFormat
   (
      this : in out SmartCardCryptogramMaterialPackageCharacteristics
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPackageCharacteristics.all.get_PackageFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramMaterialPossessionProof

   procedure Initialize (this : in out SmartCardCryptogramMaterialPossessionProof) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramMaterialPossessionProof) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramMaterialPossessionProof, ISmartCardCryptogramMaterialPossessionProof_Ptr);
   begin
      if this.m_ISmartCardCryptogramMaterialPossessionProof /= null then
         if this.m_ISmartCardCryptogramMaterialPossessionProof.all /= null then
            RefCount := this.m_ISmartCardCryptogramMaterialPossessionProof.all.Release;
            Free (this.m_ISmartCardCryptogramMaterialPossessionProof);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramMaterialPossessionProof

   function get_OperationStatus
   (
      this : in out SmartCardCryptogramMaterialPossessionProof
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPossessionProof.all.get_OperationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Proof
   (
      this : in out SmartCardCryptogramMaterialPossessionProof
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardCryptogramMaterialPossessionProof.all.get_Proof (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramPlacementStep

   procedure Initialize (this : in out SmartCardCryptogramPlacementStep) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramPlacementStep) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramPlacementStep, ISmartCardCryptogramPlacementStep_Ptr);
   begin
      if this.m_ISmartCardCryptogramPlacementStep /= null then
         if this.m_ISmartCardCryptogramPlacementStep.all /= null then
            RefCount := this.m_ISmartCardCryptogramPlacementStep.all.Release;
            Free (this.m_ISmartCardCryptogramPlacementStep);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramPlacementStep

   function Constructor return SmartCardCryptogramPlacementStep is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramPlacementStep;
   begin
      return RetVal : SmartCardCryptogramPlacementStep do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramPlacementStep := new Windows.Devices.SmartCards.ISmartCardCryptogramPlacementStep;
            Retval.m_ISmartCardCryptogramPlacementStep.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramPlacementStep

   function get_Algorithm
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_Algorithm (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Algorithm
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_Algorithm (value);
   end;

   function get_SourceData
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_SourceData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SourceData
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_SourceData (value);
   end;

   function get_CryptogramMaterialPackageName
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_CryptogramMaterialPackageName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CryptogramMaterialPackageName
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_CryptogramMaterialPackageName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_CryptogramMaterialName
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_CryptogramMaterialName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CryptogramMaterialName
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_CryptogramMaterialName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TemplateOffset
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_TemplateOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TemplateOffset
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_TemplateOffset (value);
   end;

   function get_CryptogramOffset
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_CryptogramOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CryptogramOffset
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_CryptogramOffset (value);
   end;

   function get_CryptogramLength
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_CryptogramLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CryptogramLength
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_CryptogramLength (value);
   end;

   function get_CryptogramPlacementOptions
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_CryptogramPlacementOptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CryptogramPlacementOptions
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_CryptogramPlacementOptions (value);
   end;

   function get_ChainedOutputStep
   (
      this : in out SmartCardCryptogramPlacementStep
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardCryptogramPlacementStep;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep do
         Hr := this.m_ISmartCardCryptogramPlacementStep.all.get_ChainedOutputStep (m_ComRetVal'Access);
         Retval.m_ISmartCardCryptogramPlacementStep := new Windows.Devices.SmartCards.ISmartCardCryptogramPlacementStep;
         Retval.m_ISmartCardCryptogramPlacementStep.all := m_ComRetVal;
      end return;
   end;

   procedure put_ChainedOutputStep
   (
      this : in out SmartCardCryptogramPlacementStep;
      value : Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardCryptogramPlacementStep.all.put_ChainedOutputStep (value.m_ISmartCardCryptogramPlacementStep.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramStorageKeyCharacteristics

   procedure Initialize (this : in out SmartCardCryptogramStorageKeyCharacteristics) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramStorageKeyCharacteristics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramStorageKeyCharacteristics, ISmartCardCryptogramStorageKeyCharacteristics_Ptr);
   begin
      if this.m_ISmartCardCryptogramStorageKeyCharacteristics /= null then
         if this.m_ISmartCardCryptogramStorageKeyCharacteristics.all /= null then
            RefCount := this.m_ISmartCardCryptogramStorageKeyCharacteristics.all.Release;
            Free (this.m_ISmartCardCryptogramStorageKeyCharacteristics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardCryptogramStorageKeyCharacteristics

   function Constructor return SmartCardCryptogramStorageKeyCharacteristics is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyCharacteristics;
   begin
      return RetVal : SmartCardCryptogramStorageKeyCharacteristics do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardCryptogramStorageKeyCharacteristics := new Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyCharacteristics;
            Retval.m_ISmartCardCryptogramStorageKeyCharacteristics.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramStorageKeyCharacteristics

   function get_StorageKeyName
   (
      this : in out SmartCardCryptogramStorageKeyCharacteristics
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyCharacteristics.all.get_StorageKeyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DateCreated
   (
      this : in out SmartCardCryptogramStorageKeyCharacteristics
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyCharacteristics.all.get_DateCreated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Algorithm
   (
      this : in out SmartCardCryptogramStorageKeyCharacteristics
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyCharacteristics.all.get_Algorithm (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Capabilities
   (
      this : in out SmartCardCryptogramStorageKeyCharacteristics
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyCharacteristics.all.get_Capabilities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardCryptogramStorageKeyInfo

   procedure Initialize (this : in out SmartCardCryptogramStorageKeyInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardCryptogramStorageKeyInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardCryptogramStorageKeyInfo, ISmartCardCryptogramStorageKeyInfo_Ptr);
   begin
      if this.m_ISmartCardCryptogramStorageKeyInfo /= null then
         if this.m_ISmartCardCryptogramStorageKeyInfo.all /= null then
            RefCount := this.m_ISmartCardCryptogramStorageKeyInfo.all.Release;
            Free (this.m_ISmartCardCryptogramStorageKeyInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardCryptogramStorageKeyInfo

   function get_OperationStatus
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_OperationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PublicKeyBlobType
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_PublicKeyBlobType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PublicKey
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_PublicKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttestationStatus
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptographicKeyAttestationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptographicKeyAttestationStatus;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_AttestationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Attestation
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_Attestation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttestationCertificateChain
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_AttestationCertificateChain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Capabilities
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities;
   begin
      Hr := this.m_ISmartCardCryptogramStorageKeyInfo.all.get_Capabilities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OperationalRequirements
   (
      this : in out SmartCardCryptogramStorageKeyInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardCryptogramStorageKeyInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardCryptogramStorageKeyInfo.all);
      Hr := m_Interface.get_OperationalRequirements (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardEmulator

   procedure Initialize (this : in out SmartCardEmulator) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardEmulator) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardEmulator, ISmartCardEmulator_Ptr);
   begin
      if this.m_ISmartCardEmulator /= null then
         if this.m_ISmartCardEmulator.all /= null then
            RefCount := this.m_ISmartCardEmulator.all.Release;
            Free (this.m_ISmartCardEmulator);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmartCardEmulator

   function IsSupported_SmartCardEmulator
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics3'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsSupported (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetDefaultAsync
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulator is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardEmulator.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardEmulator.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardEmulator;
      m_IID            : aliased WinRt.IID := (500734192, 51237, 23539, (149, 100, 71, 8, 147, 47, 149, 95 )); -- Windows.Devices.SmartCards.SmartCardEmulator;
      m_HandlerIID     : aliased WinRt.IID := (1233314822, 1324, 22402, (165, 125, 84, 249, 244, 79, 132, 18 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardEmulator.Kind := new AsyncOperationCompletedHandler_SmartCardEmulator.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardEmulator.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardEmulator.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardEmulator.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardEmulator.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardEmulator do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefaultAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardEmulator := new Windows.Devices.SmartCards.ISmartCardEmulator;
                     Retval.m_ISmartCardEmulator.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetAppletIdGroupRegistrationsAsync
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (73282745, 61779, 22816, (153, 222, 237, 145, 46, 163, 139, 26 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3722359588, 10323, 24124, (164, 217, 28, 168, 197, 119, 192, 46 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetAppletIdGroupRegistrationsAsync (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   function RegisterAppletIdGroupAsync
   (
      appletIdGroup : Windows.Devices.SmartCards.SmartCardAppletIdGroup'Class
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardAppletIdGroupRegistration.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardAppletIdGroupRegistration.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration;
      m_IID            : aliased WinRt.IID := (3624075314, 24380, 20712, (145, 184, 105, 28, 69, 70, 9, 232 )); -- Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration;
      m_HandlerIID     : aliased WinRt.IID := (923813371, 18836, 21523, (137, 190, 186, 78, 151, 173, 130, 160 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration.Kind := new AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardAppletIdGroupRegistration.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardAppletIdGroupRegistration.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RegisterAppletIdGroupAsync (appletIdGroup.m_ISmartCardAppletIdGroup.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardAppletIdGroupRegistration := new Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration;
                     Retval.m_ISmartCardAppletIdGroupRegistration.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure UnregisterAppletIdGroupAsync
   (
      registration : Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.UnregisterAppletIdGroupAsync (registration.m_ISmartCardAppletIdGroupRegistration.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function get_MaxAppletIdGroupRegistrations
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardEmulator");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardEmulatorStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxAppletIdGroupRegistrations (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardEmulator

   function get_EnablementPolicy
   (
      this : in out SmartCardEmulator
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulatorEnablementPolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardEmulatorEnablementPolicy;
   begin
      Hr := this.m_ISmartCardEmulator.all.get_EnablementPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ApduReceived
   (
      this : in out SmartCardEmulator;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.add_ApduReceived (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ApduReceived
   (
      this : in out SmartCardEmulator;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.remove_ApduReceived (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_ConnectionDeactivated
   (
      this : in out SmartCardEmulator;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.add_ConnectionDeactivated (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ConnectionDeactivated
   (
      this : in out SmartCardEmulator;
      value : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.remove_ConnectionDeactivated (value);
      m_RefCount := m_Interface.Release;
   end;

   procedure Start
   (
      this : in out SmartCardEmulator
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.Start;
      m_RefCount := m_Interface.Release;
   end;

   function IsHostCardEmulationSupported
   (
      this : in out SmartCardEmulator
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulator_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulator2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulator2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulator.all);
      Hr := m_Interface.IsHostCardEmulationSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardEmulatorApduReceivedEventArgs

   procedure Initialize (this : in out SmartCardEmulatorApduReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardEmulatorApduReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardEmulatorApduReceivedEventArgs, ISmartCardEmulatorApduReceivedEventArgs_Ptr);
   begin
      if this.m_ISmartCardEmulatorApduReceivedEventArgs /= null then
         if this.m_ISmartCardEmulatorApduReceivedEventArgs.all /= null then
            RefCount := this.m_ISmartCardEmulatorApduReceivedEventArgs.all.Release;
            Free (this.m_ISmartCardEmulatorApduReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardEmulatorApduReceivedEventArgs

   function get_CommandApdu
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardEmulatorApduReceivedEventArgs.all.get_CommandApdu (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConnectionProperties
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardEmulatorConnectionProperties;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties do
         Hr := this.m_ISmartCardEmulatorApduReceivedEventArgs.all.get_ConnectionProperties (m_ComRetVal'Access);
         Retval.m_ISmartCardEmulatorConnectionProperties := new Windows.Devices.SmartCards.ISmartCardEmulatorConnectionProperties;
         Retval.m_ISmartCardEmulatorConnectionProperties.all := m_ComRetVal;
      end return;
   end;

   function TryRespondAsync
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs;
      responseApdu : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardEmulatorApduReceivedEventArgs.all.TryRespondAsync (responseApdu, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_AutomaticResponseStatus
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardAutomaticResponseStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardAutomaticResponseStatus;
   begin
      Hr := this.m_ISmartCardEmulatorApduReceivedEventArgs.all.get_AutomaticResponseStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryRespondWithCryptogramsAsync
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs;
      responseTemplate : Windows.Storage.Streams.IBuffer;
      cryptogramPlacementSteps : GenericObject
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgsWithCryptograms := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgsWithCryptograms, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulatorApduReceivedEventArgsWithCryptograms'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulatorApduReceivedEventArgs.all);
      Hr := m_Interface.TryRespondWithCryptogramsAsync (responseTemplate, cryptogramPlacementSteps, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryRespondWithCryptogramsAsync
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs;
      responseTemplate : Windows.Storage.Streams.IBuffer;
      cryptogramPlacementSteps : GenericObject;
      nextState : GenericObject
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgsWithCryptograms := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_IID            : aliased WinRt.IID := (4122010032, 22439, 23219, (174, 170, 214, 182, 53, 37, 120, 102 )); -- Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus;
      m_HandlerIID     : aliased WinRt.IID := (3334752199, 42509, 20490, (155, 254, 89, 242, 92, 51, 233, 121 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind := new AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardCryptogramGeneratorOperationStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardCryptogramGeneratorOperationStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgsWithCryptograms, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulatorApduReceivedEventArgsWithCryptograms'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulatorApduReceivedEventArgs.all);
      Hr := m_Interface.TryRespondWithCryptogramsAsync (responseTemplate, cryptogramPlacementSteps, nextState, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_State
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulatorApduReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulatorApduReceivedEventArgs.all);
      Hr := m_Interface.get_State (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function TryRespondAsync
   (
      this : in out SmartCardEmulatorApduReceivedEventArgs;
      responseApdu : Windows.Storage.Streams.IBuffer;
      nextState : GenericObject
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardEmulatorApduReceivedEventArgs2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardEmulatorApduReceivedEventArgs.all);
      Hr := m_Interface.TryRespondAsync (responseApdu, nextState, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardEmulatorConnectionDeactivatedEventArgs

   procedure Initialize (this : in out SmartCardEmulatorConnectionDeactivatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardEmulatorConnectionDeactivatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardEmulatorConnectionDeactivatedEventArgs, ISmartCardEmulatorConnectionDeactivatedEventArgs_Ptr);
   begin
      if this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs /= null then
         if this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs.all /= null then
            RefCount := this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs.all.Release;
            Free (this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardEmulatorConnectionDeactivatedEventArgs

   function get_ConnectionProperties
   (
      this : in out SmartCardEmulatorConnectionDeactivatedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardEmulatorConnectionProperties;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties do
         Hr := this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs.all.get_ConnectionProperties (m_ComRetVal'Access);
         Retval.m_ISmartCardEmulatorConnectionProperties := new Windows.Devices.SmartCards.ISmartCardEmulatorConnectionProperties;
         Retval.m_ISmartCardEmulatorConnectionProperties.all := m_ComRetVal;
      end return;
   end;

   function get_Reason
   (
      this : in out SmartCardEmulatorConnectionDeactivatedEventArgs
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedReason;
   begin
      Hr := this.m_ISmartCardEmulatorConnectionDeactivatedEventArgs.all.get_Reason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardEmulatorConnectionProperties

   procedure Initialize (this : in out SmartCardEmulatorConnectionProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardEmulatorConnectionProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardEmulatorConnectionProperties, ISmartCardEmulatorConnectionProperties_Ptr);
   begin
      if this.m_ISmartCardEmulatorConnectionProperties /= null then
         if this.m_ISmartCardEmulatorConnectionProperties.all /= null then
            RefCount := this.m_ISmartCardEmulatorConnectionProperties.all.Release;
            Free (this.m_ISmartCardEmulatorConnectionProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardEmulatorConnectionProperties

   function get_Id
   (
      this : in out SmartCardEmulatorConnectionProperties
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_ISmartCardEmulatorConnectionProperties.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Source
   (
      this : in out SmartCardEmulatorConnectionProperties
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulatorConnectionSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardEmulatorConnectionSource;
   begin
      Hr := this.m_ISmartCardEmulatorConnectionProperties.all.get_Source (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardPinPolicy

   procedure Initialize (this : in out SmartCardPinPolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardPinPolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardPinPolicy, ISmartCardPinPolicy_Ptr);
   begin
      if this.m_ISmartCardPinPolicy /= null then
         if this.m_ISmartCardPinPolicy.all /= null then
            RefCount := this.m_ISmartCardPinPolicy.all.Release;
            Free (this.m_ISmartCardPinPolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardPinPolicy

   function Constructor return SmartCardPinPolicy is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardPinPolicy");
      m_ComRetVal  : aliased Windows.Devices.SmartCards.ISmartCardPinPolicy;
   begin
      return RetVal : SmartCardPinPolicy do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISmartCardPinPolicy := new Windows.Devices.SmartCards.ISmartCardPinPolicy;
            Retval.m_ISmartCardPinPolicy.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardPinPolicy

   function get_MinLength
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_MinLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinLength
   (
      this : in out SmartCardPinPolicy;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_MinLength (value);
   end;

   function get_MaxLength
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_MaxLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxLength
   (
      this : in out SmartCardPinPolicy;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_MaxLength (value);
   end;

   function get_UppercaseLetters
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_UppercaseLetters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UppercaseLetters
   (
      this : in out SmartCardPinPolicy;
      value : Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_UppercaseLetters (value);
   end;

   function get_LowercaseLetters
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_LowercaseLetters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LowercaseLetters
   (
      this : in out SmartCardPinPolicy;
      value : Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_LowercaseLetters (value);
   end;

   function get_Digits
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_Digits (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Digits
   (
      this : in out SmartCardPinPolicy;
      value : Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_Digits (value);
   end;

   function get_SpecialCharacters
   (
      this : in out SmartCardPinPolicy
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.get_SpecialCharacters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SpecialCharacters
   (
      this : in out SmartCardPinPolicy;
      value : Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinPolicy.all.put_SpecialCharacters (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardPinResetDeferral

   procedure Initialize (this : in out SmartCardPinResetDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardPinResetDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardPinResetDeferral, ISmartCardPinResetDeferral_Ptr);
   begin
      if this.m_ISmartCardPinResetDeferral /= null then
         if this.m_ISmartCardPinResetDeferral.all /= null then
            RefCount := this.m_ISmartCardPinResetDeferral.all.Release;
            Free (this.m_ISmartCardPinResetDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardPinResetDeferral

   procedure Complete
   (
      this : in out SmartCardPinResetDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinResetDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- Delegate SmartCardPinResetHandler

   function Invoke
   (
      this : access SmartCardPinResetHandler_Delegate;
      sender : Windows.Devices.SmartCards.ISmartCardProvisioning;
      request : Windows.Devices.SmartCards.ISmartCardPinResetRequest
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, request);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardPinResetRequest

   procedure Initialize (this : in out SmartCardPinResetRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardPinResetRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardPinResetRequest, ISmartCardPinResetRequest_Ptr);
   begin
      if this.m_ISmartCardPinResetRequest /= null then
         if this.m_ISmartCardPinResetRequest.all /= null then
            RefCount := this.m_ISmartCardPinResetRequest.all.Release;
            Free (this.m_ISmartCardPinResetRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardPinResetRequest

   function get_Challenge
   (
      this : in out SmartCardPinResetRequest
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardPinResetRequest.all.get_Challenge (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Deadline
   (
      this : in out SmartCardPinResetRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ISmartCardPinResetRequest.all.get_Deadline (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetDeferral
   (
      this : in out SmartCardPinResetRequest
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardPinResetDeferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardPinResetDeferral;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardPinResetDeferral do
         Hr := this.m_ISmartCardPinResetRequest.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_ISmartCardPinResetDeferral := new Windows.Devices.SmartCards.ISmartCardPinResetDeferral;
         Retval.m_ISmartCardPinResetDeferral.all := m_ComRetVal;
      end return;
   end;

   procedure SetResponse
   (
      this : in out SmartCardPinResetRequest;
      response : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardPinResetRequest.all.SetResponse (response);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardProvisioning

   procedure Initialize (this : in out SmartCardProvisioning) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardProvisioning) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardProvisioning, ISmartCardProvisioning_Ptr);
   begin
      if this.m_ISmartCardProvisioning /= null then
         if this.m_ISmartCardProvisioning.all /= null then
            RefCount := this.m_ISmartCardProvisioning.all.Release;
            Free (this.m_ISmartCardProvisioning);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmartCardProvisioning

   function RequestAttestedVirtualSmartCardCreationAsync
   (
      friendlyName : WinRt.WString;
      administrativeKey : Windows.Storage.Streams.IBuffer;
      pinPolicy : Windows.Devices.SmartCards.SmartCardPinPolicy'Class
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardProvisioning is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_friendlyName : WinRt.HString := To_HString (friendlyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardProvisioning.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardProvisioning.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning;
      m_IID            : aliased WinRt.IID := (1636105344, 46930, 23784, (161, 54, 245, 113, 116, 187, 147, 9 )); -- Windows.Devices.SmartCards.SmartCardProvisioning;
      m_HandlerIID     : aliased WinRt.IID := (2049857756, 8942, 23736, (131, 204, 167, 166, 27, 157, 205, 44 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardProvisioning.Kind := new AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardProvisioning.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardProvisioning.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardProvisioning do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAttestedVirtualSmartCardCreationAsync (HStr_friendlyName, administrativeKey, pinPolicy.m_ISmartCardPinPolicy.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardProvisioning := new Windows.Devices.SmartCards.ISmartCardProvisioning;
                     Retval.m_ISmartCardProvisioning.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_friendlyName);
      end return;
   end;

   function RequestAttestedVirtualSmartCardCreationAsync
   (
      friendlyName : WinRt.WString;
      administrativeKey : Windows.Storage.Streams.IBuffer;
      pinPolicy : Windows.Devices.SmartCards.SmartCardPinPolicy'Class;
      cardId : WinRt.Guid
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardProvisioning is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_friendlyName : WinRt.HString := To_HString (friendlyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardProvisioning.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardProvisioning.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning;
      m_IID            : aliased WinRt.IID := (1636105344, 46930, 23784, (161, 54, 245, 113, 116, 187, 147, 9 )); -- Windows.Devices.SmartCards.SmartCardProvisioning;
      m_HandlerIID     : aliased WinRt.IID := (2049857756, 8942, 23736, (131, 204, 167, 166, 27, 157, 205, 44 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardProvisioning.Kind := new AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardProvisioning.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardProvisioning.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardProvisioning do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAttestedVirtualSmartCardCreationAsync (HStr_friendlyName, administrativeKey, pinPolicy.m_ISmartCardPinPolicy.all, cardId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardProvisioning := new Windows.Devices.SmartCards.ISmartCardProvisioning;
                     Retval.m_ISmartCardProvisioning.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_friendlyName);
      end return;
   end;

   function FromSmartCardAsync
   (
      card : Windows.Devices.SmartCards.SmartCard'Class
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardProvisioning is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardProvisioning.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardProvisioning.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning;
      m_IID            : aliased WinRt.IID := (1636105344, 46930, 23784, (161, 54, 245, 113, 116, 187, 147, 9 )); -- Windows.Devices.SmartCards.SmartCardProvisioning;
      m_HandlerIID     : aliased WinRt.IID := (2049857756, 8942, 23736, (131, 204, 167, 166, 27, 157, 205, 44 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardProvisioning.Kind := new AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardProvisioning.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardProvisioning.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardProvisioning do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromSmartCardAsync (card.m_ISmartCard.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardProvisioning := new Windows.Devices.SmartCards.ISmartCardProvisioning;
                     Retval.m_ISmartCardProvisioning.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function RequestVirtualSmartCardCreationAsync
   (
      friendlyName : WinRt.WString;
      administrativeKey : Windows.Storage.Streams.IBuffer;
      pinPolicy : Windows.Devices.SmartCards.SmartCardPinPolicy'Class
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardProvisioning is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_friendlyName : WinRt.HString := To_HString (friendlyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardProvisioning.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardProvisioning.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning;
      m_IID            : aliased WinRt.IID := (1636105344, 46930, 23784, (161, 54, 245, 113, 116, 187, 147, 9 )); -- Windows.Devices.SmartCards.SmartCardProvisioning;
      m_HandlerIID     : aliased WinRt.IID := (2049857756, 8942, 23736, (131, 204, 167, 166, 27, 157, 205, 44 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardProvisioning.Kind := new AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardProvisioning.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardProvisioning.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardProvisioning do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestVirtualSmartCardCreationAsync (HStr_friendlyName, administrativeKey, pinPolicy.m_ISmartCardPinPolicy.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardProvisioning := new Windows.Devices.SmartCards.ISmartCardProvisioning;
                     Retval.m_ISmartCardProvisioning.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_friendlyName);
      end return;
   end;

   function RequestVirtualSmartCardCreationAsync
   (
      friendlyName : WinRt.WString;
      administrativeKey : Windows.Storage.Streams.IBuffer;
      pinPolicy : Windows.Devices.SmartCards.SmartCardPinPolicy'Class;
      cardId : WinRt.Guid
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardProvisioning is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_friendlyName : WinRt.HString := To_HString (friendlyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardProvisioning.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardProvisioning.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning;
      m_IID            : aliased WinRt.IID := (1636105344, 46930, 23784, (161, 54, 245, 113, 116, 187, 147, 9 )); -- Windows.Devices.SmartCards.SmartCardProvisioning;
      m_HandlerIID     : aliased WinRt.IID := (2049857756, 8942, 23736, (131, 204, 167, 166, 27, 157, 205, 44 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardProvisioning.Kind := new AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardProvisioning.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardProvisioning.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardProvisioning.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardProvisioning do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestVirtualSmartCardCreationAsync (HStr_friendlyName, administrativeKey, pinPolicy.m_ISmartCardPinPolicy.all, cardId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardProvisioning := new Windows.Devices.SmartCards.ISmartCardProvisioning;
                     Retval.m_ISmartCardProvisioning.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_friendlyName);
      end return;
   end;

   function RequestVirtualSmartCardDeletionAsync
   (
      card : Windows.Devices.SmartCards.SmartCard'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardProvisioning");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardProvisioningStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardProvisioningStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.RequestVirtualSmartCardDeletionAsync (card.m_ISmartCard.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardProvisioning

   function get_SmartCard
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.Windows.Devices.SmartCards.SmartCard'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCard;
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCard do
         Hr := this.m_ISmartCardProvisioning.all.get_SmartCard (m_ComRetVal'Access);
         Retval.m_ISmartCard := new Windows.Devices.SmartCards.ISmartCard;
         Retval.m_ISmartCard.all := m_ComRetVal;
      end return;
   end;

   function GetIdAsync
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Guid.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Guid.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Guid;
      m_IID            : aliased WinRt.IID := (1711782977, 10571, 22901, (156, 63, 75, 73, 131, 109, 9, 22 )); -- Guid;
      m_HandlerIID     : aliased WinRt.IID := (1379109275, 47742, 20559, (187, 131, 206, 235, 172, 98, 222, 207 ));
      m_Handler        : AsyncOperationCompletedHandler_Guid.Kind := new AsyncOperationCompletedHandler_Guid.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Guid.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Guid.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Guid.Kind_Delegate, AsyncOperationCompletedHandler_Guid.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardProvisioning.all.GetIdAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetNameAsync
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardProvisioning.all.GetNameAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   function GetChallengeContextAsync
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardChallengeContext'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardChallengeContext.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardChallengeContext.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardChallengeContext;
      m_IID            : aliased WinRt.IID := (476382819, 16232, 22939, (185, 212, 195, 80, 241, 62, 228, 228 )); -- Windows.Devices.SmartCards.SmartCardChallengeContext;
      m_HandlerIID     : aliased WinRt.IID := (2528211702, 57051, 24382, (175, 144, 123, 15, 16, 33, 147, 82 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardChallengeContext.Kind := new AsyncOperationCompletedHandler_SmartCardChallengeContext.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardChallengeContext.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardChallengeContext.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardChallengeContext.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardChallengeContext.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardChallengeContext do
         Hr := this.m_ISmartCardProvisioning.all.GetChallengeContextAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ISmartCardChallengeContext := new Windows.Devices.SmartCards.ISmartCardChallengeContext;
                  Retval.m_ISmartCardChallengeContext.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RequestPinChangeAsync
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardProvisioning.all.RequestPinChangeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestPinResetAsync
   (
      this : in out SmartCardProvisioning;
      handler : Windows.Devices.SmartCards.SmartCardPinResetHandler
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardProvisioning.all.RequestPinResetAsync (handler, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAuthorityKeyContainerNameAsync
   (
      this : in out SmartCardProvisioning
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardProvisioning2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardProvisioning2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardProvisioning.all);
      Hr := m_Interface.GetAuthorityKeyContainerNameAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardReader

   procedure Initialize (this : in out SmartCardReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardReader, ISmartCardReader_Ptr);
   begin
      if this.m_ISmartCardReader /= null then
         if this.m_ISmartCardReader.all /= null then
            RefCount := this.m_ISmartCardReader.all.Release;
            Free (this.m_ISmartCardReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for SmartCardReader

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardReader");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardReaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector
   (
      kind : Windows.Devices.SmartCards.SmartCardReaderKind
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardReader");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_ISmartCardReaderStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (kind, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardReader is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.SmartCards.SmartCardReader");
      m_Factory        : access WinRt.Windows.Devices.SmartCards.ISmartCardReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.ISmartCardReader;
      m_IID            : aliased WinRt.IID := (57312013, 48074, 23737, (151, 127, 178, 158, 163, 4, 33, 73 )); -- Windows.Devices.SmartCards.SmartCardReader;
      m_HandlerIID     : aliased WinRt.IID := (550708301, 14170, 24445, (137, 68, 22, 79, 223, 237, 66, 57 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardReader.Kind := new AsyncOperationCompletedHandler_SmartCardReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardReader.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardReader do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardReaderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ISmartCardReader := new Windows.Devices.SmartCards.ISmartCardReader;
                     Retval.m_ISmartCardReader.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardReader

   function get_DeviceId
   (
      this : in out SmartCardReader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardReader.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out SmartCardReader
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ISmartCardReader.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Kind
   (
      this : in out SmartCardReader
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardReaderKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardReaderKind;
   begin
      Hr := this.m_ISmartCardReader.all.get_Kind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetStatusAsync
   (
      this : in out SmartCardReader
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardReaderStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_SmartCardReaderStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_SmartCardReaderStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.SmartCards.SmartCardReaderStatus;
      m_IID            : aliased WinRt.IID := (1524892410, 7970, 21872, (160, 200, 178, 50, 10, 222, 219, 129 )); -- Windows.Devices.SmartCards.SmartCardReaderStatus;
      m_HandlerIID     : aliased WinRt.IID := (1031696041, 59193, 21852, (156, 2, 7, 57, 108, 83, 33, 245 ));
      m_Handler        : AsyncOperationCompletedHandler_SmartCardReaderStatus.Kind := new AsyncOperationCompletedHandler_SmartCardReaderStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_SmartCardReaderStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_SmartCardReaderStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_SmartCardReaderStatus.Kind_Delegate, AsyncOperationCompletedHandler_SmartCardReaderStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardReader.all.GetStatusAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FindAllCardsAsync
   (
      this : in out SmartCardReader
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (992383410, 64606, 23039, (140, 111, 230, 221, 41, 169, 103, 252 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (3219799981, 16670, 22305, (136, 245, 146, 201, 185, 251, 190, 20 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_ISmartCardReader.all.FindAllCardsAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_CardAdded
   (
      this : in out SmartCardReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmartCardReader.all.add_CardAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CardAdded
   (
      this : in out SmartCardReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardReader.all.remove_CardAdded (token);
   end;

   function add_CardRemoved
   (
      this : in out SmartCardReader;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ISmartCardReader.all.add_CardRemoved (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CardRemoved
   (
      this : in out SmartCardReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ISmartCardReader.all.remove_CardRemoved (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardTriggerDetails

   procedure Initialize (this : in out SmartCardTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardTriggerDetails, ISmartCardTriggerDetails_Ptr);
   begin
      if this.m_ISmartCardTriggerDetails /= null then
         if this.m_ISmartCardTriggerDetails.all /= null then
            RefCount := this.m_ISmartCardTriggerDetails.all.Release;
            Free (this.m_ISmartCardTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardTriggerDetails

   function get_TriggerType
   (
      this : in out SmartCardTriggerDetails
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardTriggerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardTriggerType;
   begin
      Hr := this.m_ISmartCardTriggerDetails.all.get_TriggerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SourceAppletId
   (
      this : in out SmartCardTriggerDetails
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardTriggerDetails.all.get_SourceAppletId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TriggerData
   (
      this : in out SmartCardTriggerDetails
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_ISmartCardTriggerDetails.all.get_TriggerData (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Emulator
   (
      this : in out SmartCardTriggerDetails
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardEmulator'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCardEmulator;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardTriggerDetails2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCardEmulator do
         m_Interface := QInterface (this.m_ISmartCardTriggerDetails.all);
         Hr := m_Interface.get_Emulator (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISmartCardEmulator := new Windows.Devices.SmartCards.ISmartCardEmulator;
         Retval.m_ISmartCardEmulator.all := m_ComRetVal;
      end return;
   end;

   function TryLaunchCurrentAppAsync
   (
      this : in out SmartCardTriggerDetails;
      arguments : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardTriggerDetails.all);
      Hr := m_Interface.TryLaunchCurrentAppAsync (HStr_arguments, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_arguments);
      return m_RetVal;
   end;

   function TryLaunchCurrentAppAsync
   (
      this : in out SmartCardTriggerDetails;
      arguments : WinRt.WString;
      behavior : Windows.Devices.SmartCards.SmartCardLaunchBehavior
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails2, WinRt.Windows.Devices.SmartCards.IID_ISmartCardTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ISmartCardTriggerDetails.all);
      Hr := m_Interface.TryLaunchCurrentAppAsync (HStr_arguments, behavior, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_arguments);
      return m_RetVal;
   end;

   function get_SmartCard
   (
      this : in out SmartCardTriggerDetails
   )
   return WinRt.Windows.Devices.SmartCards.SmartCard'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.ISmartCard;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails_Interface, WinRt.Windows.Devices.SmartCards.ISmartCardTriggerDetails3, WinRt.Windows.Devices.SmartCards.IID_ISmartCardTriggerDetails3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Devices.SmartCards.SmartCard do
         m_Interface := QInterface (this.m_ISmartCardTriggerDetails.all);
         Hr := m_Interface.get_SmartCard (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISmartCard := new Windows.Devices.SmartCards.ISmartCard;
         Retval.m_ISmartCard.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Media.Media3D is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Transform3D

   procedure Initialize (this : in out Transform3D) is
   begin
      null;
   end;

   procedure Finalize (this : in out Transform3D) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITransform3D, ITransform3D_Ptr);
   begin
      if this.m_ITransform3D /= null then
         if this.m_ITransform3D.all /= null then
            RefCount := this.m_ITransform3D.all.Release;
            Free (this.m_ITransform3D);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Transform3D

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return Transform3D is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Transform3D");
      m_Factory    : access ITransform3DFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Media3D.ITransform3D;
   begin
      return RetVal : Transform3D do
         Hr := RoGetActivationFactory (m_hString, IID_ITransform3DFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_ITransform3D := new Windows.UI.Xaml.Media.Media3D.ITransform3D;
            Retval.m_ITransform3D.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Transform3D

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CompositeTransform3D

   procedure Initialize (this : in out CompositeTransform3D) is
   begin
      null;
   end;

   procedure Finalize (this : in out CompositeTransform3D) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICompositeTransform3D, ICompositeTransform3D_Ptr);
   begin
      if this.m_ICompositeTransform3D /= null then
         if this.m_ICompositeTransform3D.all /= null then
            RefCount := this.m_ICompositeTransform3D.all.Release;
            Free (this.m_ICompositeTransform3D);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CompositeTransform3D

   function Constructor return CompositeTransform3D is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Media3D.ICompositeTransform3D;
   begin
      return RetVal : CompositeTransform3D do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICompositeTransform3D := new Windows.UI.Xaml.Media.Media3D.ICompositeTransform3D;
            Retval.m_ICompositeTransform3D.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for CompositeTransform3D

   function get_CenterXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_CenterZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CenterZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_RotationZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_RotationZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_ScaleZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ScaleZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TranslateXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TranslateXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TranslateYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TranslateYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_TranslateZProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.CompositeTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.ICompositeTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_ICompositeTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_TranslateZProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CompositeTransform3D

   function get_CenterX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_CenterX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_CenterX (value);
   end;

   function get_CenterY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_CenterY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_CenterY (value);
   end;

   function get_CenterZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_CenterZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CenterZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_CenterZ (value);
   end;

   function get_RotationX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_RotationX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_RotationX (value);
   end;

   function get_RotationY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_RotationY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_RotationY (value);
   end;

   function get_RotationZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_RotationZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RotationZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_RotationZ (value);
   end;

   function get_ScaleX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_ScaleX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_ScaleX (value);
   end;

   function get_ScaleY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_ScaleY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_ScaleY (value);
   end;

   function get_ScaleZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_ScaleZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaleZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_ScaleZ (value);
   end;

   function get_TranslateX
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_TranslateX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TranslateX
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_TranslateX (value);
   end;

   function get_TranslateY
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_TranslateY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TranslateY
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_TranslateY (value);
   end;

   function get_TranslateZ
   (
      this : in out CompositeTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ICompositeTransform3D.all.get_TranslateZ (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TranslateZ
   (
      this : in out CompositeTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICompositeTransform3D.all.put_TranslateZ (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Matrix3DHelper

   procedure Initialize (this : in out Matrix3DHelper) is
   begin
      null;
   end;

   procedure Finalize (this : in out Matrix3DHelper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMatrix3DHelper, IMatrix3DHelper_Ptr);
   begin
      if this.m_IMatrix3DHelper /= null then
         if this.m_IMatrix3DHelper.all /= null then
            RefCount := this.m_IMatrix3DHelper.all.Release;
            Free (this.m_IMatrix3DHelper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Matrix3DHelper

   function get_Identity
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_Identity (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function Multiply
   (
      matrix1 : Windows.UI.Xaml.Media.Media3D.Matrix3D;
      matrix2 : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Multiply (matrix1, matrix2, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function FromElements
   (
      m11 : WinRt.Double;
      m12 : WinRt.Double;
      m13 : WinRt.Double;
      m14 : WinRt.Double;
      m21 : WinRt.Double;
      m22 : WinRt.Double;
      m23 : WinRt.Double;
      m24 : WinRt.Double;
      m31 : WinRt.Double;
      m32 : WinRt.Double;
      m33 : WinRt.Double;
      m34 : WinRt.Double;
      offsetX : WinRt.Double;
      offsetY : WinRt.Double;
      offsetZ : WinRt.Double;
      m44 : WinRt.Double
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FromElements (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetHasInverse
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetHasInverse (target, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetIsIdentity
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetIsIdentity (target, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function Invert
   (
      target : Windows.UI.Xaml.Media.Media3D.Matrix3D
   )
   return WinRt.Windows.UI.Xaml.Media.Media3D.Matrix3D is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.Matrix3DHelper");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.Media.Media3D.Matrix3D;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMatrix3DHelperStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.Invert (target, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Matrix3DHelper

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PerspectiveTransform3D

   procedure Initialize (this : in out PerspectiveTransform3D) is
   begin
      null;
   end;

   procedure Finalize (this : in out PerspectiveTransform3D) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPerspectiveTransform3D, IPerspectiveTransform3D_Ptr);
   begin
      if this.m_IPerspectiveTransform3D /= null then
         if this.m_IPerspectiveTransform3D.all /= null then
            RefCount := this.m_IPerspectiveTransform3D.all.Release;
            Free (this.m_IPerspectiveTransform3D);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PerspectiveTransform3D

   function Constructor return PerspectiveTransform3D is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.PerspectiveTransform3D");
      m_ComRetVal  : aliased Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3D;
   begin
      return RetVal : PerspectiveTransform3D do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPerspectiveTransform3D := new Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3D;
            Retval.m_IPerspectiveTransform3D.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PerspectiveTransform3D

   function get_DepthProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.PerspectiveTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPerspectiveTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DepthProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OffsetXProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.PerspectiveTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPerspectiveTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OffsetXProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function get_OffsetYProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Media.Media3D.PerspectiveTransform3D");
      m_Factory        : access WinRt.Windows.UI.Xaml.Media.Media3D.IPerspectiveTransform3DStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPerspectiveTransform3DStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_OffsetYProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PerspectiveTransform3D

   function get_Depth
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.get_Depth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Depth
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.put_Depth (value);
   end;

   function get_OffsetX
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.get_OffsetX (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OffsetX
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.put_OffsetX (value);
   end;

   function get_OffsetY
   (
      this : in out PerspectiveTransform3D
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.get_OffsetY (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OffsetY
   (
      this : in out PerspectiveTransform3D;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPerspectiveTransform3D.all.put_OffsetY (value);
   end;

end;

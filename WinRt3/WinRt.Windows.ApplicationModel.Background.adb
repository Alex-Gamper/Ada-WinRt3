--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Activation;
with WinRt.Windows.ApplicationModel.Calls.Background;
with WinRt.Windows.Devices.Bluetooth;
with WinRt.Windows.Devices.Bluetooth.Advertisement;
with WinRt.Windows.Devices.Bluetooth.Background;
with WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile;
with WinRt.Windows.Devices.Geolocation;
with WinRt.Windows.Devices.Sensors;
with WinRt.Windows.Devices.SmartCards;
with WinRt.Windows.Devices.Sms;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Provider;
with WinRt.Windows.System;
with WinRt.Windows.UI.Notifications;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Background is

   package IAsyncOperation_AlarmAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.AlarmAccessStatus);
   package AsyncOperationCompletedHandler_AlarmAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.AlarmAccessStatus);

   package IAsyncOperation_ApplicationTriggerResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult);
   package AsyncOperationCompletedHandler_ApplicationTriggerResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult);

   package IAsyncOperation_BackgroundAccessStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus);
   package AsyncOperationCompletedHandler_BackgroundAccessStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_DeviceConnectionChangeTrigger is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.IDeviceConnectionChangeTrigger);
   package AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.IDeviceConnectionChangeTrigger);

   package IAsyncOperation_DeviceTriggerResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult);
   package AsyncOperationCompletedHandler_DeviceTriggerResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult);

   package IAsyncOperation_GattServiceProviderTriggerResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.IGattServiceProviderTriggerResult);
   package AsyncOperationCompletedHandler_GattServiceProviderTriggerResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.IGattServiceProviderTriggerResult);

   package IAsyncOperation_MediaProcessingTriggerResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult);
   package AsyncOperationCompletedHandler_MediaProcessingTriggerResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ActivitySensorTrigger

   procedure Initialize (this : in out ActivitySensorTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ActivitySensorTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IActivitySensorTrigger, IActivitySensorTrigger_Ptr);
   begin
      if this.m_IActivitySensorTrigger /= null then
         if this.m_IActivitySensorTrigger.all /= null then
            RefCount := this.m_IActivitySensorTrigger.all.Release;
            Free (this.m_IActivitySensorTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ActivitySensorTrigger

   function Constructor
   (
      reportIntervalInMilliseconds : WinRt.UInt32
   )
   return ActivitySensorTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ActivitySensorTrigger");
      m_Factory    : access IActivitySensorTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IActivitySensorTrigger;
   begin
      return RetVal : ActivitySensorTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IActivitySensorTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (reportIntervalInMilliseconds, m_ComRetVal'Access);
            Retval.m_IActivitySensorTrigger := new Windows.ApplicationModel.Background.IActivitySensorTrigger;
            Retval.m_IActivitySensorTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ActivitySensorTrigger

   function get_SubscribedActivities
   (
      this : in out ActivitySensorTrigger
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IActivitySensorTrigger.all.get_SubscribedActivities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportInterval
   (
      this : in out ActivitySensorTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IActivitySensorTrigger.all.get_ReportInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedActivities
   (
      this : in out ActivitySensorTrigger
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IActivitySensorTrigger.all.get_SupportedActivities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinimumReportInterval
   (
      this : in out ActivitySensorTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IActivitySensorTrigger.all.get_MinimumReportInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AlarmApplicationManager is

      function RequestAccessAsync
      return WinRt.Windows.ApplicationModel.Background.AlarmAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.AlarmApplicationManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IAlarmApplicationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_AlarmAccessStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_AlarmAccessStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.AlarmAccessStatus;
         m_IID            : aliased WinRt.IID := (2774168701, 23030, 23734, (180, 57, 200, 170, 214, 112, 144, 92 )); -- Windows.ApplicationModel.Background.AlarmAccessStatus;
         m_HandlerIID     : aliased WinRt.IID := (2215673879, 43239, 21577, (183, 19, 223, 72, 80, 58, 149, 62 ));
         m_Handler        : AsyncOperationCompletedHandler_AlarmAccessStatus.Kind := new AsyncOperationCompletedHandler_AlarmAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AlarmAccessStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AlarmAccessStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AlarmAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_AlarmAccessStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAlarmApplicationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function GetAccessStatus
      return WinRt.Windows.ApplicationModel.Background.AlarmAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.AlarmApplicationManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IAlarmApplicationManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Background.AlarmAccessStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAlarmApplicationManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAccessStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end AlarmApplicationManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastTrigger

   procedure Initialize (this : in out AppBroadcastTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastTrigger, IAppBroadcastTrigger_Ptr);
   begin
      if this.m_IAppBroadcastTrigger /= null then
         if this.m_IAppBroadcastTrigger.all /= null then
            RefCount := this.m_IAppBroadcastTrigger.all.Release;
            Free (this.m_IAppBroadcastTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppBroadcastTrigger

   function Constructor
   (
      providerKey : WinRt.WString
   )
   return AppBroadcastTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.AppBroadcastTrigger");
      m_Factory    : access IAppBroadcastTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IAppBroadcastTrigger;
      HStr_providerKey : WinRt.HString := To_HString (providerKey);
   begin
      return RetVal : AppBroadcastTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAppBroadcastTrigger (HStr_providerKey, m_ComRetVal'Access);
            Retval.m_IAppBroadcastTrigger := new Windows.ApplicationModel.Background.IAppBroadcastTrigger;
            Retval.m_IAppBroadcastTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_providerKey);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastTrigger

   procedure put_ProviderInfo
   (
      this : in out AppBroadcastTrigger;
      value : Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastTrigger.all.put_ProviderInfo (value.m_IAppBroadcastTriggerProviderInfo.all);
   end;

   function get_ProviderInfo
   (
      this : in out AppBroadcastTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IAppBroadcastTriggerProviderInfo;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.AppBroadcastTriggerProviderInfo do
         Hr := this.m_IAppBroadcastTrigger.all.get_ProviderInfo (m_ComRetVal'Access);
         Retval.m_IAppBroadcastTriggerProviderInfo := new Windows.ApplicationModel.Background.IAppBroadcastTriggerProviderInfo;
         Retval.m_IAppBroadcastTriggerProviderInfo.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastTriggerProviderInfo

   procedure Initialize (this : in out AppBroadcastTriggerProviderInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastTriggerProviderInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastTriggerProviderInfo, IAppBroadcastTriggerProviderInfo_Ptr);
   begin
      if this.m_IAppBroadcastTriggerProviderInfo /= null then
         if this.m_IAppBroadcastTriggerProviderInfo.all /= null then
            RefCount := this.m_IAppBroadcastTriggerProviderInfo.all.Release;
            Free (this.m_IAppBroadcastTriggerProviderInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastTriggerProviderInfo

   procedure put_DisplayNameResource
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_DisplayNameResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DisplayNameResource
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_DisplayNameResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_LogoResource
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_LogoResource (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_LogoResource
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_LogoResource (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_VideoKeyFrameInterval
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_VideoKeyFrameInterval (value);
   end;

   function get_VideoKeyFrameInterval
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_VideoKeyFrameInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxVideoBitrate
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_MaxVideoBitrate (value);
   end;

   function get_MaxVideoBitrate
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_MaxVideoBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxVideoWidth
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_MaxVideoWidth (value);
   end;

   function get_MaxVideoWidth
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_MaxVideoWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxVideoHeight
   (
      this : in out AppBroadcastTriggerProviderInfo;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.put_MaxVideoHeight (value);
   end;

   function get_MaxVideoHeight
   (
      this : in out AppBroadcastTriggerProviderInfo
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastTriggerProviderInfo.all.get_MaxVideoHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationTrigger

   procedure Initialize (this : in out ApplicationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationTrigger, IApplicationTrigger_Ptr);
   begin
      if this.m_IApplicationTrigger /= null then
         if this.m_IApplicationTrigger.all /= null then
            RefCount := this.m_IApplicationTrigger.all.Release;
            Free (this.m_IApplicationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ApplicationTrigger

   function Constructor return ApplicationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ApplicationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IApplicationTrigger;
   begin
      return RetVal : ApplicationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IApplicationTrigger := new Windows.ApplicationModel.Background.IApplicationTrigger;
            Retval.m_IApplicationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationTrigger

   function RequestAsync
   (
      this : in out ApplicationTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ApplicationTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ApplicationTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult;
      m_IID            : aliased WinRt.IID := (1204541829, 3848, 23101, (146, 207, 178, 121, 96, 80, 110, 214 )); -- Windows.ApplicationModel.Background.ApplicationTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3490078454, 61085, 22008, (172, 43, 83, 169, 31, 249, 109, 46 ));
      m_Handler        : AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind := new AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ApplicationTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IApplicationTrigger.all.RequestAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestAsync
   (
      this : in out ApplicationTrigger;
      arguments : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ApplicationTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ApplicationTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.ApplicationTriggerResult;
      m_IID            : aliased WinRt.IID := (1204541829, 3848, 23101, (146, 207, 178, 121, 96, 80, 110, 214 )); -- Windows.ApplicationModel.Background.ApplicationTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3490078454, 61085, 22008, (172, 43, 83, 169, 31, 249, 109, 46 ));
      m_Handler        : AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind := new AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ApplicationTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_ApplicationTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IApplicationTrigger.all.RequestAsync (arguments.m_IPropertySet.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ApplicationTriggerDetails

   procedure Initialize (this : in out ApplicationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ApplicationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IApplicationTriggerDetails, IApplicationTriggerDetails_Ptr);
   begin
      if this.m_IApplicationTriggerDetails /= null then
         if this.m_IApplicationTriggerDetails.all /= null then
            RefCount := this.m_IApplicationTriggerDetails.all.Release;
            Free (this.m_IApplicationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ApplicationTriggerDetails

   function get_Arguments
   (
      this : in out ApplicationTriggerDetails
   )
   return WinRt.Windows.Foundation.Collections.ValueSet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Collections.IPropertySet;
   begin
      return RetVal : WinRt.Windows.Foundation.Collections.ValueSet do
         Hr := this.m_IApplicationTriggerDetails.all.get_Arguments (m_ComRetVal'Access);
         Retval.m_IPropertySet := new Windows.Foundation.Collections.IPropertySet;
         Retval.m_IPropertySet.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppointmentStoreNotificationTrigger

   procedure Initialize (this : in out AppointmentStoreNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppointmentStoreNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppointmentStoreNotificationTrigger, IAppointmentStoreNotificationTrigger_Ptr);
   begin
      if this.m_IAppointmentStoreNotificationTrigger /= null then
         if this.m_IAppointmentStoreNotificationTrigger.all /= null then
            RefCount := this.m_IAppointmentStoreNotificationTrigger.all.Release;
            Free (this.m_IAppointmentStoreNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppointmentStoreNotificationTrigger

   function Constructor return AppointmentStoreNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.AppointmentStoreNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IAppointmentStoreNotificationTrigger;
   begin
      return RetVal : AppointmentStoreNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppointmentStoreNotificationTrigger := new Windows.ApplicationModel.Background.IAppointmentStoreNotificationTrigger;
            Retval.m_IAppointmentStoreNotificationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppointmentStoreNotificationTrigger

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BackgroundExecutionManager is

      function RequestAccessAsync_BackgroundExecutionManager
      return WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_BackgroundAccessStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_BackgroundAccessStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus;
         m_IID            : aliased WinRt.IID := (2068112769, 53161, 22371, (190, 215, 106, 101, 115, 159, 13, 191 )); -- Windows.ApplicationModel.Background.BackgroundAccessStatus;
         m_HandlerIID     : aliased WinRt.IID := (652027619, 16199, 22281, (178, 242, 214, 208, 173, 50, 136, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind := new AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BackgroundAccessStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAccessAsync (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function RequestAccessAsync
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_BackgroundAccessStatus.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_BackgroundAccessStatus.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus;
         m_IID            : aliased WinRt.IID := (2068112769, 53161, 22371, (190, 215, 106, 101, 115, 159, 13, 191 )); -- Windows.ApplicationModel.Background.BackgroundAccessStatus;
         m_HandlerIID     : aliased WinRt.IID := (652027619, 16199, 22281, (178, 242, 214, 208, 173, 50, 136, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind := new AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_BackgroundAccessStatus.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind_Delegate, AsyncOperationCompletedHandler_BackgroundAccessStatus.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAccessAsync (HStr_applicationId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
         return m_RetVal;
      end;

      procedure RemoveAccess is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RemoveAccess;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      procedure RemoveAccess
      (
         applicationId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RemoveAccess (HStr_applicationId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
      end;

      function GetAccessStatus
      return WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Background.BackgroundAccessStatus;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAccessStatus (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function GetAccessStatus
      (
         applicationId : WinRt.WString
      )
      return WinRt.Windows.ApplicationModel.Background.BackgroundAccessStatus is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Background.BackgroundAccessStatus;
         HStr_applicationId : WinRt.HString := To_HString (applicationId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAccessStatus (HStr_applicationId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
         return m_ComRetVal;
      end;

      function RequestAccessKindAsync
      (
         requestedAccess : Windows.ApplicationModel.Background.BackgroundAccessRequestKind;
         reason : WinRt.WString
      )
      return WinRt.Boolean is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundExecutionManager");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_reason : WinRt.HString := To_HString (reason);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_Boolean.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Boolean;
         m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
         m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
         m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundExecutionManagerStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.RequestAccessKindAsync (requestedAccess, HStr_reason, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_reason);
         return m_RetVal;
      end;

   end BackgroundExecutionManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskBuilder

   procedure Initialize (this : in out BackgroundTaskBuilder) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskBuilder) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskBuilder, IBackgroundTaskBuilder_Ptr);
   begin
      if this.m_IBackgroundTaskBuilder /= null then
         if this.m_IBackgroundTaskBuilder.all /= null then
            RefCount := this.m_IBackgroundTaskBuilder.all.Release;
            Free (this.m_IBackgroundTaskBuilder);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundTaskBuilder

   function Constructor return BackgroundTaskBuilder is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskBuilder");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTaskBuilder;
   begin
      return RetVal : BackgroundTaskBuilder do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTaskBuilder := new Windows.ApplicationModel.Background.IBackgroundTaskBuilder;
            Retval.m_IBackgroundTaskBuilder.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskBuilder

   procedure put_TaskEntryPoint
   (
      this : in out BackgroundTaskBuilder;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.put_TaskEntryPoint (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_TaskEntryPoint
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.get_TaskEntryPoint (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetTrigger
   (
      this : in out BackgroundTaskBuilder;
      trigger : Windows.ApplicationModel.Background.IBackgroundTrigger
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.SetTrigger (trigger);
   end;

   procedure AddCondition
   (
      this : in out BackgroundTaskBuilder;
      condition : Windows.ApplicationModel.Background.IBackgroundCondition
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.AddCondition (condition);
   end;

   procedure put_Name
   (
      this : in out BackgroundTaskBuilder;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Name
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTaskBuilder.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Register
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistration do
         Hr := this.m_IBackgroundTaskBuilder.all.Register (m_ComRetVal'Access);
         Retval.m_IBackgroundTaskRegistration := new Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
         Retval.m_IBackgroundTaskRegistration.all := m_ComRetVal;
      end return;
   end;

   procedure put_CancelOnConditionLoss
   (
      this : in out BackgroundTaskBuilder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder2, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.put_CancelOnConditionLoss (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CancelOnConditionLoss
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder2, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.get_CancelOnConditionLoss (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsNetworkRequested
   (
      this : in out BackgroundTaskBuilder;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder3, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.put_IsNetworkRequested (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsNetworkRequested
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder3, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.get_IsNetworkRequested (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TaskGroup
   (
      this : in out BackgroundTaskBuilder
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder4, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup do
         m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
         Hr := m_Interface.get_TaskGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTaskRegistrationGroup := new Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
         Retval.m_IBackgroundTaskRegistrationGroup.all := m_ComRetVal;
      end return;
   end;

   procedure put_TaskGroup
   (
      this : in out BackgroundTaskBuilder;
      value : Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder4, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.put_TaskGroup (value.m_IBackgroundTaskRegistrationGroup.all);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetTaskEntryPointClsid
   (
      this : in out BackgroundTaskBuilder;
      TaskEntryPoint : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskBuilder5, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskBuilder5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskBuilder.all);
      Hr := m_Interface.SetTaskEntryPointClsid (TaskEntryPoint);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Delegate BackgroundTaskCanceledEventHandler

   function Invoke
   (
      this : access BackgroundTaskCanceledEventHandler_Delegate;
      sender : Windows.ApplicationModel.Background.IBackgroundTaskInstance;
      reason : Windows.ApplicationModel.Background.BackgroundTaskCancellationReason
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, reason);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskCompletedEventArgs

   procedure Initialize (this : in out BackgroundTaskCompletedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskCompletedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskCompletedEventArgs, IBackgroundTaskCompletedEventArgs_Ptr);
   begin
      if this.m_IBackgroundTaskCompletedEventArgs /= null then
         if this.m_IBackgroundTaskCompletedEventArgs.all /= null then
            RefCount := this.m_IBackgroundTaskCompletedEventArgs.all.Release;
            Free (this.m_IBackgroundTaskCompletedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskCompletedEventArgs

   function get_InstanceId
   (
      this : in out BackgroundTaskCompletedEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IBackgroundTaskCompletedEventArgs.all.get_InstanceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure CheckResult
   (
      this : in out BackgroundTaskCompletedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskCompletedEventArgs.all.CheckResult;
   end;

   -----------------------------------------------------------------------------
   -- Delegate BackgroundTaskCompletedEventHandler

   function Invoke
   (
      this : access BackgroundTaskCompletedEventHandler_Delegate;
      sender : Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
      args : Windows.ApplicationModel.Background.IBackgroundTaskCompletedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskDeferral

   procedure Initialize (this : in out BackgroundTaskDeferral) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskDeferral) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskDeferral, IBackgroundTaskDeferral_Ptr);
   begin
      if this.m_IBackgroundTaskDeferral /= null then
         if this.m_IBackgroundTaskDeferral.all /= null then
            RefCount := this.m_IBackgroundTaskDeferral.all.Release;
            Free (this.m_IBackgroundTaskDeferral);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskDeferral

   procedure Complete
   (
      this : in out BackgroundTaskDeferral
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskDeferral.all.Complete;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskProgressEventArgs

   procedure Initialize (this : in out BackgroundTaskProgressEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskProgressEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskProgressEventArgs, IBackgroundTaskProgressEventArgs_Ptr);
   begin
      if this.m_IBackgroundTaskProgressEventArgs /= null then
         if this.m_IBackgroundTaskProgressEventArgs.all /= null then
            RefCount := this.m_IBackgroundTaskProgressEventArgs.all.Release;
            Free (this.m_IBackgroundTaskProgressEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskProgressEventArgs

   function get_InstanceId
   (
      this : in out BackgroundTaskProgressEventArgs
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IBackgroundTaskProgressEventArgs.all.get_InstanceId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Progress
   (
      this : in out BackgroundTaskProgressEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBackgroundTaskProgressEventArgs.all.get_Progress (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate BackgroundTaskProgressEventHandler

   function Invoke
   (
      this : access BackgroundTaskProgressEventHandler_Delegate;
      sender : Windows.ApplicationModel.Background.IBackgroundTaskRegistration;
      args : Windows.ApplicationModel.Background.IBackgroundTaskProgressEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, args);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskRegistration

   procedure Initialize (this : in out BackgroundTaskRegistration) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskRegistration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskRegistration, IBackgroundTaskRegistration_Ptr);
   begin
      if this.m_IBackgroundTaskRegistration /= null then
         if this.m_IBackgroundTaskRegistration.all /= null then
            RefCount := this.m_IBackgroundTaskRegistration.all.Release;
            Free (this.m_IBackgroundTaskRegistration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for BackgroundTaskRegistration

   function get_AllTasks
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskRegistration");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistrationStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTaskRegistrationStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllTasks (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_AllTaskGroups
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskRegistration");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistrationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTaskRegistrationStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllTaskGroups (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function GetTaskGroup
   (
      groupId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskRegistration");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistrationStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
      HStr_groupId : WinRt.HString := To_HString (groupId);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTaskRegistrationStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetTaskGroup (HStr_groupId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBackgroundTaskRegistrationGroup := new Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
            Retval.m_IBackgroundTaskRegistrationGroup.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_groupId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskRegistration

   function get_TaskId
   (
      this : in out BackgroundTaskRegistration
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.get_TaskId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Name
   (
      this : in out BackgroundTaskRegistration
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_Progress
   (
      this : in out BackgroundTaskRegistration;
      handler : Windows.ApplicationModel.Background.BackgroundTaskProgressEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.add_Progress (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Progress
   (
      this : in out BackgroundTaskRegistration;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.remove_Progress (cookie);
   end;

   function add_Completed
   (
      this : in out BackgroundTaskRegistration;
      handler : Windows.ApplicationModel.Background.BackgroundTaskCompletedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.add_Completed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out BackgroundTaskRegistration;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.remove_Completed (cookie);
   end;

   procedure Unregister
   (
      this : in out BackgroundTaskRegistration;
      cancelTask : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskRegistration.all.Unregister (cancelTask);
   end;

   function get_Trigger
   (
      this : in out BackgroundTaskRegistration
   )
   return WinRt.Windows.ApplicationModel.Background.IBackgroundTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration2, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskRegistration2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTaskRegistration.all);
      Hr := m_Interface.get_Trigger (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_TaskGroup
   (
      this : in out BackgroundTaskRegistration
   )
   return WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration_Interface, WinRt.Windows.ApplicationModel.Background.IBackgroundTaskRegistration3, WinRt.Windows.ApplicationModel.Background.IID_IBackgroundTaskRegistration3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup do
         m_Interface := QInterface (this.m_IBackgroundTaskRegistration.all);
         Hr := m_Interface.get_TaskGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IBackgroundTaskRegistrationGroup := new Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
         Retval.m_IBackgroundTaskRegistrationGroup.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackgroundTaskRegistrationGroup

   procedure Initialize (this : in out BackgroundTaskRegistrationGroup) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackgroundTaskRegistrationGroup) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTaskRegistrationGroup, IBackgroundTaskRegistrationGroup_Ptr);
   begin
      if this.m_IBackgroundTaskRegistrationGroup /= null then
         if this.m_IBackgroundTaskRegistrationGroup.all /= null then
            RefCount := this.m_IBackgroundTaskRegistrationGroup.all.Release;
            Free (this.m_IBackgroundTaskRegistrationGroup);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BackgroundTaskRegistrationGroup

   function Constructor
   (
      id : WinRt.WString
   )
   return BackgroundTaskRegistrationGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup");
      m_Factory    : access IBackgroundTaskRegistrationGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
      HStr_id : WinRt.HString := To_HString (id);
   begin
      return RetVal : BackgroundTaskRegistrationGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTaskRegistrationGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_id, m_ComRetVal'Access);
            Retval.m_IBackgroundTaskRegistrationGroup := new Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
            Retval.m_IBackgroundTaskRegistrationGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
      end return;
   end;

   function Constructor
   (
      id : WinRt.WString;
      name : WinRt.WString
   )
   return BackgroundTaskRegistrationGroup is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup");
      m_Factory    : access IBackgroundTaskRegistrationGroupFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
      HStr_id : WinRt.HString := To_HString (id);
      HStr_name : WinRt.HString := To_HString (name);
   begin
      return RetVal : BackgroundTaskRegistrationGroup do
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundTaskRegistrationGroupFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithName (HStr_id, HStr_name, m_ComRetVal'Access);
            Retval.m_IBackgroundTaskRegistrationGroup := new Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup;
            Retval.m_IBackgroundTaskRegistrationGroup.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
         Hr := WindowsDeleteString (HStr_name);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackgroundTaskRegistrationGroup

   function get_Id
   (
      this : in out BackgroundTaskRegistrationGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTaskRegistrationGroup.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out BackgroundTaskRegistrationGroup
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IBackgroundTaskRegistrationGroup.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_BackgroundActivated
   (
      this : in out BackgroundTaskRegistrationGroup;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IBackgroundTaskRegistrationGroup.all.add_BackgroundActivated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_BackgroundActivated
   (
      this : in out BackgroundTaskRegistrationGroup;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackgroundTaskRegistrationGroup.all.remove_BackgroundActivated (token);
   end;

   function get_AllTasks
   (
      this : in out BackgroundTaskRegistrationGroup
   )
   return IMapView_Guid_IBackgroundTaskRegistration.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IBackgroundTaskRegistration.Kind;
   begin
      Hr := this.m_IBackgroundTaskRegistrationGroup.all.get_AllTasks (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_Guid_IBackgroundTaskRegistration (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body BackgroundWorkCost is

      function get_CurrentBackgroundWorkCost
      return WinRt.Windows.ApplicationModel.Background.BackgroundWorkCostValue is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BackgroundWorkCost");
         m_Factory        : access WinRt.Windows.ApplicationModel.Background.IBackgroundWorkCostStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.ApplicationModel.Background.BackgroundWorkCostValue;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IBackgroundWorkCostStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_CurrentBackgroundWorkCost (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end BackgroundWorkCost;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementPublisherTrigger

   procedure Initialize (this : in out BluetoothLEAdvertisementPublisherTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementPublisherTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementPublisherTrigger, IBluetoothLEAdvertisementPublisherTrigger_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementPublisherTrigger /= null then
         if this.m_IBluetoothLEAdvertisementPublisherTrigger.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementPublisherTrigger.all.Release;
            Free (this.m_IBluetoothLEAdvertisementPublisherTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementPublisherTrigger

   function Constructor return BluetoothLEAdvertisementPublisherTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger;
   begin
      return RetVal : BluetoothLEAdvertisementPublisherTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementPublisherTrigger := new Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger;
            Retval.m_IBluetoothLEAdvertisementPublisherTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementPublisherTrigger

   function get_Advertisement
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement do
         Hr := this.m_IBluetoothLEAdvertisementPublisherTrigger.all.get_Advertisement (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisement := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisement;
         Retval.m_IBluetoothLEAdvertisement.all := m_ComRetVal;
      end return;
   end;

   function get_PreferredTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.get_PreferredTransmitPowerLevelInDBm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_PreferredTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.put_PreferredTransmitPowerLevelInDBm (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_UseExtendedFormat
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.get_UseExtendedFormat (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_UseExtendedFormat
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.put_UseExtendedFormat (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsAnonymous
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.get_IsAnonymous (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsAnonymous
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.put_IsAnonymous (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IncludeTransmitPowerLevel
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.get_IncludeTransmitPowerLevel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IncludeTransmitPowerLevel
   (
      this : in out BluetoothLEAdvertisementPublisherTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementPublisherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTrigger.all);
      Hr := m_Interface.put_IncludeTransmitPowerLevel (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementWatcherTrigger

   procedure Initialize (this : in out BluetoothLEAdvertisementWatcherTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementWatcherTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementWatcherTrigger, IBluetoothLEAdvertisementWatcherTrigger_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementWatcherTrigger /= null then
         if this.m_IBluetoothLEAdvertisementWatcherTrigger.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.Release;
            Free (this.m_IBluetoothLEAdvertisementWatcherTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for BluetoothLEAdvertisementWatcherTrigger

   function Constructor return BluetoothLEAdvertisementWatcherTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger;
   begin
      return RetVal : BluetoothLEAdvertisementWatcherTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBluetoothLEAdvertisementWatcherTrigger := new Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger;
            Retval.m_IBluetoothLEAdvertisementWatcherTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementWatcherTrigger

   function get_MinSamplingInterval
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_MinSamplingInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxSamplingInterval
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_MaxSamplingInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinOutOfRangeTimeout
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_MinOutOfRangeTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxOutOfRangeTimeout
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_MaxOutOfRangeTimeout (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SignalStrengthFilter
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter do
         Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_SignalStrengthFilter (m_ComRetVal'Access);
         Retval.m_IBluetoothSignalStrengthFilter := new Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
         Retval.m_IBluetoothSignalStrengthFilter.all := m_ComRetVal;
      end return;
   end;

   procedure put_SignalStrengthFilter
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger;
      value : Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.put_SignalStrengthFilter (value.m_IBluetoothSignalStrengthFilter.all);
   end;

   function get_AdvertisementFilter
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter do
         Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.get_AdvertisementFilter (m_ComRetVal'Access);
         Retval.m_IBluetoothLEAdvertisementFilter := new Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementFilter;
         Retval.m_IBluetoothLEAdvertisementFilter.all := m_ComRetVal;
      end return;
   end;

   procedure put_AdvertisementFilter
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger;
      value : Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTrigger.all.put_AdvertisementFilter (value.m_IBluetoothLEAdvertisementFilter.all);
   end;

   function get_AllowExtendedAdvertisements
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementWatcherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementWatcherTrigger.all);
      Hr := m_Interface.get_AllowExtendedAdvertisements (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AllowExtendedAdvertisements
   (
      this : in out BluetoothLEAdvertisementWatcherTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IBluetoothLEAdvertisementWatcherTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementWatcherTrigger.all);
      Hr := m_Interface.put_AllowExtendedAdvertisements (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CachedFileUpdaterTrigger

   procedure Initialize (this : in out CachedFileUpdaterTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out CachedFileUpdaterTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICachedFileUpdaterTrigger, ICachedFileUpdaterTrigger_Ptr);
   begin
      if this.m_ICachedFileUpdaterTrigger /= null then
         if this.m_ICachedFileUpdaterTrigger.all /= null then
            RefCount := this.m_ICachedFileUpdaterTrigger.all.Release;
            Free (this.m_ICachedFileUpdaterTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CachedFileUpdaterTrigger

   function Constructor return CachedFileUpdaterTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.CachedFileUpdaterTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ICachedFileUpdaterTrigger;
   begin
      return RetVal : CachedFileUpdaterTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICachedFileUpdaterTrigger := new Windows.ApplicationModel.Background.ICachedFileUpdaterTrigger;
            Retval.m_ICachedFileUpdaterTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CachedFileUpdaterTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CachedFileUpdaterTriggerDetails

   procedure Initialize (this : in out CachedFileUpdaterTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out CachedFileUpdaterTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICachedFileUpdaterTriggerDetails, ICachedFileUpdaterTriggerDetails_Ptr);
   begin
      if this.m_ICachedFileUpdaterTriggerDetails /= null then
         if this.m_ICachedFileUpdaterTriggerDetails.all /= null then
            RefCount := this.m_ICachedFileUpdaterTriggerDetails.all.Release;
            Free (this.m_ICachedFileUpdaterTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CachedFileUpdaterTriggerDetails

   function get_UpdateTarget
   (
      this : in out CachedFileUpdaterTriggerDetails
   )
   return WinRt.Windows.Storage.Provider.CachedFileTarget is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.CachedFileTarget;
   begin
      Hr := this.m_ICachedFileUpdaterTriggerDetails.all.get_UpdateTarget (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UpdateRequest
   (
      this : in out CachedFileUpdaterTriggerDetails
   )
   return WinRt.Windows.Storage.Provider.FileUpdateRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Provider.IFileUpdateRequest;
   begin
      return RetVal : WinRt.Windows.Storage.Provider.FileUpdateRequest do
         Hr := this.m_ICachedFileUpdaterTriggerDetails.all.get_UpdateRequest (m_ComRetVal'Access);
         Retval.m_IFileUpdateRequest := new Windows.Storage.Provider.IFileUpdateRequest;
         Retval.m_IFileUpdateRequest.all := m_ComRetVal;
      end return;
   end;

   function get_CanRequestUserInput
   (
      this : in out CachedFileUpdaterTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICachedFileUpdaterTriggerDetails.all.get_CanRequestUserInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageNotificationTrigger

   procedure Initialize (this : in out ChatMessageNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageNotificationTrigger, IChatMessageNotificationTrigger_Ptr);
   begin
      if this.m_IChatMessageNotificationTrigger /= null then
         if this.m_IChatMessageNotificationTrigger.all /= null then
            RefCount := this.m_IChatMessageNotificationTrigger.all.Release;
            Free (this.m_IChatMessageNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatMessageNotificationTrigger

   function Constructor return ChatMessageNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ChatMessageNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IChatMessageNotificationTrigger;
   begin
      return RetVal : ChatMessageNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatMessageNotificationTrigger := new Windows.ApplicationModel.Background.IChatMessageNotificationTrigger;
            Retval.m_IChatMessageNotificationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ChatMessageReceivedNotificationTrigger

   procedure Initialize (this : in out ChatMessageReceivedNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ChatMessageReceivedNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IChatMessageReceivedNotificationTrigger, IChatMessageReceivedNotificationTrigger_Ptr);
   begin
      if this.m_IChatMessageReceivedNotificationTrigger /= null then
         if this.m_IChatMessageReceivedNotificationTrigger.all /= null then
            RefCount := this.m_IChatMessageReceivedNotificationTrigger.all.Release;
            Free (this.m_IChatMessageReceivedNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ChatMessageReceivedNotificationTrigger

   function Constructor return ChatMessageReceivedNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ChatMessageReceivedNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IChatMessageReceivedNotificationTrigger;
   begin
      return RetVal : ChatMessageReceivedNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IChatMessageReceivedNotificationTrigger := new Windows.ApplicationModel.Background.IChatMessageReceivedNotificationTrigger;
            Retval.m_IChatMessageReceivedNotificationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ChatMessageReceivedNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CommunicationBlockingAppSetAsActiveTrigger

   procedure Initialize (this : in out CommunicationBlockingAppSetAsActiveTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out CommunicationBlockingAppSetAsActiveTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICommunicationBlockingAppSetAsActiveTrigger, ICommunicationBlockingAppSetAsActiveTrigger_Ptr);
   begin
      if this.m_ICommunicationBlockingAppSetAsActiveTrigger /= null then
         if this.m_ICommunicationBlockingAppSetAsActiveTrigger.all /= null then
            RefCount := this.m_ICommunicationBlockingAppSetAsActiveTrigger.all.Release;
            Free (this.m_ICommunicationBlockingAppSetAsActiveTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CommunicationBlockingAppSetAsActiveTrigger

   function Constructor return CommunicationBlockingAppSetAsActiveTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.CommunicationBlockingAppSetAsActiveTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ICommunicationBlockingAppSetAsActiveTrigger;
   begin
      return RetVal : CommunicationBlockingAppSetAsActiveTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICommunicationBlockingAppSetAsActiveTrigger := new Windows.ApplicationModel.Background.ICommunicationBlockingAppSetAsActiveTrigger;
            Retval.m_ICommunicationBlockingAppSetAsActiveTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CommunicationBlockingAppSetAsActiveTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactStoreNotificationTrigger

   procedure Initialize (this : in out ContactStoreNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactStoreNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactStoreNotificationTrigger, IContactStoreNotificationTrigger_Ptr);
   begin
      if this.m_IContactStoreNotificationTrigger /= null then
         if this.m_IContactStoreNotificationTrigger.all /= null then
            RefCount := this.m_IContactStoreNotificationTrigger.all.Release;
            Free (this.m_IContactStoreNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContactStoreNotificationTrigger

   function Constructor return ContactStoreNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ContactStoreNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IContactStoreNotificationTrigger;
   begin
      return RetVal : ContactStoreNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContactStoreNotificationTrigger := new Windows.ApplicationModel.Background.IContactStoreNotificationTrigger;
            Retval.m_IContactStoreNotificationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactStoreNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentPrefetchTrigger

   procedure Initialize (this : in out ContentPrefetchTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentPrefetchTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentPrefetchTrigger, IContentPrefetchTrigger_Ptr);
   begin
      if this.m_IContentPrefetchTrigger /= null then
         if this.m_IContentPrefetchTrigger.all /= null then
            RefCount := this.m_IContentPrefetchTrigger.all.Release;
            Free (this.m_IContentPrefetchTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContentPrefetchTrigger

   function Constructor
   (
      waitInterval : Windows.Foundation.TimeSpan
   )
   return ContentPrefetchTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ContentPrefetchTrigger");
      m_Factory    : access IContentPrefetchTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IContentPrefetchTrigger;
   begin
      return RetVal : ContentPrefetchTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IContentPrefetchTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (waitInterval, m_ComRetVal'Access);
            Retval.m_IContentPrefetchTrigger := new Windows.ApplicationModel.Background.IContentPrefetchTrigger;
            Retval.m_IContentPrefetchTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return ContentPrefetchTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ContentPrefetchTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IContentPrefetchTrigger;
   begin
      return RetVal : ContentPrefetchTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContentPrefetchTrigger := new Windows.ApplicationModel.Background.IContentPrefetchTrigger;
            Retval.m_IContentPrefetchTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentPrefetchTrigger

   function get_WaitInterval
   (
      this : in out ContentPrefetchTrigger
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IContentPrefetchTrigger.all.get_WaitInterval (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConversationalAgentTrigger

   procedure Initialize (this : in out ConversationalAgentTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConversationalAgentTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConversationalAgentTrigger

   function Constructor return ConversationalAgentTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ConversationalAgentTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : ConversationalAgentTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConversationalAgentTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CustomSystemEventTrigger

   procedure Initialize (this : in out CustomSystemEventTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out CustomSystemEventTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICustomSystemEventTrigger, ICustomSystemEventTrigger_Ptr);
   begin
      if this.m_ICustomSystemEventTrigger /= null then
         if this.m_ICustomSystemEventTrigger.all /= null then
            RefCount := this.m_ICustomSystemEventTrigger.all.Release;
            Free (this.m_ICustomSystemEventTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CustomSystemEventTrigger

   function Constructor
   (
      triggerId : WinRt.WString;
      recurrence : Windows.ApplicationModel.Background.CustomSystemEventTriggerRecurrence
   )
   return CustomSystemEventTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.CustomSystemEventTrigger");
      m_Factory    : access ICustomSystemEventTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ICustomSystemEventTrigger;
      HStr_triggerId : WinRt.HString := To_HString (triggerId);
   begin
      return RetVal : CustomSystemEventTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ICustomSystemEventTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_triggerId, recurrence, m_ComRetVal'Access);
            Retval.m_ICustomSystemEventTrigger := new Windows.ApplicationModel.Background.ICustomSystemEventTrigger;
            Retval.m_ICustomSystemEventTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_triggerId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CustomSystemEventTrigger

   function get_TriggerId
   (
      this : in out CustomSystemEventTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ICustomSystemEventTrigger.all.get_TriggerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Recurrence
   (
      this : in out CustomSystemEventTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.CustomSystemEventTriggerRecurrence is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.CustomSystemEventTriggerRecurrence;
   begin
      Hr := this.m_ICustomSystemEventTrigger.all.get_Recurrence (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceConnectionChangeTrigger

   procedure Initialize (this : in out DeviceConnectionChangeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceConnectionChangeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceConnectionChangeTrigger, IDeviceConnectionChangeTrigger_Ptr);
   begin
      if this.m_IDeviceConnectionChangeTrigger /= null then
         if this.m_IDeviceConnectionChangeTrigger.all /= null then
            RefCount := this.m_IDeviceConnectionChangeTrigger.all.Release;
            Free (this.m_IDeviceConnectionChangeTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DeviceConnectionChangeTrigger

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IDeviceConnectionChangeTriggerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceConnectionChangeTrigger.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceConnectionChangeTrigger.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.IDeviceConnectionChangeTrigger;
      m_IID            : aliased WinRt.IID := (2634105421, 22099, 23032, (186, 107, 208, 192, 119, 52, 109, 45 )); -- Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger;
      m_HandlerIID     : aliased WinRt.IID := (1070966142, 18404, 22817, (177, 72, 92, 181, 134, 22, 108, 168 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger.Kind := new AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceConnectionChangeTrigger.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger.Kind_Delegate, AsyncOperationCompletedHandler_DeviceConnectionChangeTrigger.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceConnectionChangeTriggerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDeviceConnectionChangeTrigger := new Windows.ApplicationModel.Background.IDeviceConnectionChangeTrigger;
                     Retval.m_IDeviceConnectionChangeTrigger.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceConnectionChangeTrigger

   function get_DeviceId
   (
      this : in out DeviceConnectionChangeTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceConnectionChangeTrigger.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanMaintainConnection
   (
      this : in out DeviceConnectionChangeTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceConnectionChangeTrigger.all.get_CanMaintainConnection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaintainConnection
   (
      this : in out DeviceConnectionChangeTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceConnectionChangeTrigger.all.get_MaintainConnection (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaintainConnection
   (
      this : in out DeviceConnectionChangeTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDeviceConnectionChangeTrigger.all.put_MaintainConnection (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceManufacturerNotificationTrigger

   procedure Initialize (this : in out DeviceManufacturerNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceManufacturerNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceManufacturerNotificationTrigger, IDeviceManufacturerNotificationTrigger_Ptr);
   begin
      if this.m_IDeviceManufacturerNotificationTrigger /= null then
         if this.m_IDeviceManufacturerNotificationTrigger.all /= null then
            RefCount := this.m_IDeviceManufacturerNotificationTrigger.all.Release;
            Free (this.m_IDeviceManufacturerNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DeviceManufacturerNotificationTrigger

   function Constructor
   (
      triggerQualifier : WinRt.WString;
      oneShot : WinRt.Boolean
   )
   return DeviceManufacturerNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.DeviceManufacturerNotificationTrigger");
      m_Factory    : access IDeviceManufacturerNotificationTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IDeviceManufacturerNotificationTrigger;
      HStr_triggerQualifier : WinRt.HString := To_HString (triggerQualifier);
   begin
      return RetVal : DeviceManufacturerNotificationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IDeviceManufacturerNotificationTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_triggerQualifier, oneShot, m_ComRetVal'Access);
            Retval.m_IDeviceManufacturerNotificationTrigger := new Windows.ApplicationModel.Background.IDeviceManufacturerNotificationTrigger;
            Retval.m_IDeviceManufacturerNotificationTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_triggerQualifier);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceManufacturerNotificationTrigger

   function get_TriggerQualifier
   (
      this : in out DeviceManufacturerNotificationTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDeviceManufacturerNotificationTrigger.all.get_TriggerQualifier (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_OneShot
   (
      this : in out DeviceManufacturerNotificationTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDeviceManufacturerNotificationTrigger.all.get_OneShot (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceServicingTrigger

   procedure Initialize (this : in out DeviceServicingTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceServicingTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceServicingTrigger, IDeviceServicingTrigger_Ptr);
   begin
      if this.m_IDeviceServicingTrigger /= null then
         if this.m_IDeviceServicingTrigger.all /= null then
            RefCount := this.m_IDeviceServicingTrigger.all.Release;
            Free (this.m_IDeviceServicingTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DeviceServicingTrigger

   function Constructor return DeviceServicingTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.DeviceServicingTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IDeviceServicingTrigger;
   begin
      return RetVal : DeviceServicingTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDeviceServicingTrigger := new Windows.ApplicationModel.Background.IDeviceServicingTrigger;
            Retval.m_IDeviceServicingTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceServicingTrigger

   function RequestAsync
   (
      this : in out DeviceServicingTrigger;
      deviceId : WinRt.WString;
      expectedDuration : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_IID            : aliased WinRt.IID := (3037948998, 12078, 20765, (158, 142, 94, 244, 222, 203, 29, 167 )); -- Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3584726278, 5220, 22484, (133, 157, 126, 233, 178, 108, 177, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceTriggerResult.Kind := new AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_DeviceTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDeviceServicingTrigger.all.RequestAsync (HStr_deviceId, expectedDuration, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_deviceId);
      return m_RetVal;
   end;

   function RequestAsync
   (
      this : in out DeviceServicingTrigger;
      deviceId : WinRt.WString;
      expectedDuration : Windows.Foundation.TimeSpan;
      arguments : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_IID            : aliased WinRt.IID := (3037948998, 12078, 20765, (158, 142, 94, 244, 222, 203, 29, 167 )); -- Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3584726278, 5220, 22484, (133, 157, 126, 233, 178, 108, 177, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceTriggerResult.Kind := new AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_DeviceTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDeviceServicingTrigger.all.RequestAsync (HStr_deviceId, expectedDuration, HStr_arguments, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_deviceId);
      Hr := WindowsDeleteString (HStr_arguments);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceUseTrigger

   procedure Initialize (this : in out DeviceUseTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceUseTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceUseTrigger, IDeviceUseTrigger_Ptr);
   begin
      if this.m_IDeviceUseTrigger /= null then
         if this.m_IDeviceUseTrigger.all /= null then
            RefCount := this.m_IDeviceUseTrigger.all.Release;
            Free (this.m_IDeviceUseTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DeviceUseTrigger

   function Constructor return DeviceUseTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.DeviceUseTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IDeviceUseTrigger;
   begin
      return RetVal : DeviceUseTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDeviceUseTrigger := new Windows.ApplicationModel.Background.IDeviceUseTrigger;
            Retval.m_IDeviceUseTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceUseTrigger

   function RequestAsync
   (
      this : in out DeviceUseTrigger;
      deviceId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_IID            : aliased WinRt.IID := (3037948998, 12078, 20765, (158, 142, 94, 244, 222, 203, 29, 167 )); -- Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3584726278, 5220, 22484, (133, 157, 126, 233, 178, 108, 177, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceTriggerResult.Kind := new AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_DeviceTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDeviceUseTrigger.all.RequestAsync (HStr_deviceId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_deviceId);
      return m_RetVal;
   end;

   function RequestAsync
   (
      this : in out DeviceUseTrigger;
      deviceId : WinRt.WString;
      arguments : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      HStr_arguments : WinRt.HString := To_HString (arguments);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DeviceTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DeviceTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_IID            : aliased WinRt.IID := (3037948998, 12078, 20765, (158, 142, 94, 244, 222, 203, 29, 167 )); -- Windows.ApplicationModel.Background.DeviceTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (3584726278, 5220, 22484, (133, 157, 126, 233, 178, 108, 177, 249 ));
      m_Handler        : AsyncOperationCompletedHandler_DeviceTriggerResult.Kind := new AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DeviceTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DeviceTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_DeviceTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDeviceUseTrigger.all.RequestAsync (HStr_deviceId, HStr_arguments, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_deviceId);
      Hr := WindowsDeleteString (HStr_arguments);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DeviceWatcherTrigger

   procedure Initialize (this : in out DeviceWatcherTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out DeviceWatcherTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDeviceWatcherTrigger, IDeviceWatcherTrigger_Ptr);
   begin
      if this.m_IDeviceWatcherTrigger /= null then
         if this.m_IDeviceWatcherTrigger.all /= null then
            RefCount := this.m_IDeviceWatcherTrigger.all.Release;
            Free (this.m_IDeviceWatcherTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DeviceWatcherTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailStoreNotificationTrigger

   procedure Initialize (this : in out EmailStoreNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailStoreNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailStoreNotificationTrigger, IEmailStoreNotificationTrigger_Ptr);
   begin
      if this.m_IEmailStoreNotificationTrigger /= null then
         if this.m_IEmailStoreNotificationTrigger.all /= null then
            RefCount := this.m_IEmailStoreNotificationTrigger.all.Release;
            Free (this.m_IEmailStoreNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EmailStoreNotificationTrigger

   function Constructor return EmailStoreNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.EmailStoreNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IEmailStoreNotificationTrigger;
   begin
      return RetVal : EmailStoreNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IEmailStoreNotificationTrigger := new Windows.ApplicationModel.Background.IEmailStoreNotificationTrigger;
            Retval.m_IEmailStoreNotificationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailStoreNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattCharacteristicNotificationTrigger

   procedure Initialize (this : in out GattCharacteristicNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattCharacteristicNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattCharacteristicNotificationTrigger, IGattCharacteristicNotificationTrigger_Ptr);
   begin
      if this.m_IGattCharacteristicNotificationTrigger /= null then
         if this.m_IGattCharacteristicNotificationTrigger.all /= null then
            RefCount := this.m_IGattCharacteristicNotificationTrigger.all.Release;
            Free (this.m_IGattCharacteristicNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GattCharacteristicNotificationTrigger

   function Constructor
   (
      characteristic : Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic'Class;
      eventTriggeringMode : Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode
   )
   return GattCharacteristicNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.GattCharacteristicNotificationTrigger");
      m_Factory    : access IGattCharacteristicNotificationTriggerFactory2_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger;
   begin
      return RetVal : GattCharacteristicNotificationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicNotificationTriggerFactory2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (characteristic.m_IGattCharacteristic.all, eventTriggeringMode, m_ComRetVal'Access);
            Retval.m_IGattCharacteristicNotificationTrigger := new Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger;
            Retval.m_IGattCharacteristicNotificationTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      characteristic : Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic'Class
   )
   return GattCharacteristicNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.GattCharacteristicNotificationTrigger");
      m_Factory    : access IGattCharacteristicNotificationTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger;
   begin
      return RetVal : GattCharacteristicNotificationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IGattCharacteristicNotificationTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (characteristic.m_IGattCharacteristic.all, m_ComRetVal'Access);
            Retval.m_IGattCharacteristicNotificationTrigger := new Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger;
            Retval.m_IGattCharacteristicNotificationTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattCharacteristicNotificationTrigger

   function get_Characteristic
   (
      this : in out GattCharacteristicNotificationTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic do
         Hr := this.m_IGattCharacteristicNotificationTrigger.all.get_Characteristic (m_ComRetVal'Access);
         Retval.m_IGattCharacteristic := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic;
         Retval.m_IGattCharacteristic.all := m_ComRetVal;
      end return;
   end;

   function get_EventTriggeringMode
   (
      this : in out GattCharacteristicNotificationTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger_Interface, WinRt.Windows.ApplicationModel.Background.IGattCharacteristicNotificationTrigger2, WinRt.Windows.ApplicationModel.Background.IID_IGattCharacteristicNotificationTrigger2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattCharacteristicNotificationTrigger.all);
      Hr := m_Interface.get_EventTriggeringMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderTrigger

   procedure Initialize (this : in out GattServiceProviderTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderTrigger, IGattServiceProviderTrigger_Ptr);
   begin
      if this.m_IGattServiceProviderTrigger /= null then
         if this.m_IGattServiceProviderTrigger.all /= null then
            RefCount := this.m_IGattServiceProviderTrigger.all.Release;
            Free (this.m_IGattServiceProviderTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattServiceProviderTrigger

   function CreateAsync
   (
      triggerId : WinRt.WString;
      serviceUuid : WinRt.Guid
   )
   return WinRt.Windows.ApplicationModel.Background.GattServiceProviderTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.GattServiceProviderTrigger");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IGattServiceProviderTriggerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_triggerId : WinRt.HString := To_HString (triggerId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GattServiceProviderTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GattServiceProviderTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.IGattServiceProviderTriggerResult;
      m_IID            : aliased WinRt.IID := (4093832351, 33970, 22467, (149, 67, 1, 251, 218, 5, 33, 155 )); -- Windows.ApplicationModel.Background.GattServiceProviderTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (970461279, 42245, 24456, (145, 169, 176, 252, 109, 98, 134, 153 ));
      m_Handler        : AsyncOperationCompletedHandler_GattServiceProviderTriggerResult.Kind := new AsyncOperationCompletedHandler_GattServiceProviderTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GattServiceProviderTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GattServiceProviderTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GattServiceProviderTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_GattServiceProviderTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.GattServiceProviderTriggerResult do
         Hr := RoGetActivationFactory (m_hString, IID_IGattServiceProviderTriggerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAsync (HStr_triggerId, serviceUuid, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IGattServiceProviderTriggerResult := new Windows.ApplicationModel.Background.IGattServiceProviderTriggerResult;
                     Retval.m_IGattServiceProviderTriggerResult.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_triggerId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderTrigger

   function get_TriggerId
   (
      this : in out GattServiceProviderTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattServiceProviderTrigger.all.get_TriggerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Service
   (
      this : in out GattServiceProviderTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService do
         Hr := this.m_IGattServiceProviderTrigger.all.get_Service (m_ComRetVal'Access);
         Retval.m_IGattLocalService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
         Retval.m_IGattLocalService.all := m_ComRetVal;
      end return;
   end;

   procedure put_AdvertisingParameters
   (
      this : in out GattServiceProviderTrigger;
      value : Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProviderTrigger.all.put_AdvertisingParameters (value.m_IGattServiceProviderAdvertisingParameters.all);
   end;

   function get_AdvertisingParameters
   (
      this : in out GattServiceProviderTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceProviderAdvertisingParameters do
         Hr := this.m_IGattServiceProviderTrigger.all.get_AdvertisingParameters (m_ComRetVal'Access);
         Retval.m_IGattServiceProviderAdvertisingParameters := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattServiceProviderAdvertisingParameters;
         Retval.m_IGattServiceProviderAdvertisingParameters.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderTriggerResult

   procedure Initialize (this : in out GattServiceProviderTriggerResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderTriggerResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderTriggerResult, IGattServiceProviderTriggerResult_Ptr);
   begin
      if this.m_IGattServiceProviderTriggerResult /= null then
         if this.m_IGattServiceProviderTriggerResult.all /= null then
            RefCount := this.m_IGattServiceProviderTriggerResult.all.Release;
            Free (this.m_IGattServiceProviderTriggerResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderTriggerResult

   function get_Trigger
   (
      this : in out GattServiceProviderTriggerResult
   )
   return WinRt.Windows.ApplicationModel.Background.GattServiceProviderTrigger'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IGattServiceProviderTrigger;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.GattServiceProviderTrigger do
         Hr := this.m_IGattServiceProviderTriggerResult.all.get_Trigger (m_ComRetVal'Access);
         Retval.m_IGattServiceProviderTrigger := new Windows.ApplicationModel.Background.IGattServiceProviderTrigger;
         Retval.m_IGattServiceProviderTrigger.all := m_ComRetVal;
      end return;
   end;

   function get_Error
   (
      this : in out GattServiceProviderTriggerResult
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IGattServiceProviderTriggerResult.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GeovisitTrigger

   procedure Initialize (this : in out GeovisitTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out GeovisitTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGeovisitTrigger, IGeovisitTrigger_Ptr);
   begin
      if this.m_IGeovisitTrigger /= null then
         if this.m_IGeovisitTrigger.all /= null then
            RefCount := this.m_IGeovisitTrigger.all.Release;
            Free (this.m_IGeovisitTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GeovisitTrigger

   function Constructor return GeovisitTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.GeovisitTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IGeovisitTrigger;
   begin
      return RetVal : GeovisitTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGeovisitTrigger := new Windows.ApplicationModel.Background.IGeovisitTrigger;
            Retval.m_IGeovisitTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GeovisitTrigger

   function get_MonitoringScope
   (
      this : in out GeovisitTrigger
   )
   return WinRt.Windows.Devices.Geolocation.VisitMonitoringScope is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Geolocation.VisitMonitoringScope;
   begin
      Hr := this.m_IGeovisitTrigger.all.get_MonitoringScope (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MonitoringScope
   (
      this : in out GeovisitTrigger;
      value : Windows.Devices.Geolocation.VisitMonitoringScope
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGeovisitTrigger.all.put_MonitoringScope (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LocationTrigger

   procedure Initialize (this : in out LocationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out LocationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILocationTrigger, ILocationTrigger_Ptr);
   begin
      if this.m_ILocationTrigger /= null then
         if this.m_ILocationTrigger.all /= null then
            RefCount := this.m_ILocationTrigger.all.Release;
            Free (this.m_ILocationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for LocationTrigger

   function Constructor
   (
      triggerType : Windows.ApplicationModel.Background.LocationTriggerType
   )
   return LocationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.LocationTrigger");
      m_Factory    : access ILocationTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ILocationTrigger;
   begin
      return RetVal : LocationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ILocationTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (triggerType, m_ComRetVal'Access);
            Retval.m_ILocationTrigger := new Windows.ApplicationModel.Background.ILocationTrigger;
            Retval.m_ILocationTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LocationTrigger

   function get_TriggerType
   (
      this : in out LocationTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.LocationTriggerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.LocationTriggerType;
   begin
      Hr := this.m_ILocationTrigger.all.get_TriggerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MaintenanceTrigger

   procedure Initialize (this : in out MaintenanceTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MaintenanceTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMaintenanceTrigger, IMaintenanceTrigger_Ptr);
   begin
      if this.m_IMaintenanceTrigger /= null then
         if this.m_IMaintenanceTrigger.all /= null then
            RefCount := this.m_IMaintenanceTrigger.all.Release;
            Free (this.m_IMaintenanceTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MaintenanceTrigger

   function Constructor
   (
      freshnessTime : WinRt.UInt32;
      oneShot : WinRt.Boolean
   )
   return MaintenanceTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MaintenanceTrigger");
      m_Factory    : access IMaintenanceTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IMaintenanceTrigger;
   begin
      return RetVal : MaintenanceTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IMaintenanceTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (freshnessTime, oneShot, m_ComRetVal'Access);
            Retval.m_IMaintenanceTrigger := new Windows.ApplicationModel.Background.IMaintenanceTrigger;
            Retval.m_IMaintenanceTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MaintenanceTrigger

   function get_FreshnessTime
   (
      this : in out MaintenanceTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMaintenanceTrigger.all.get_FreshnessTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OneShot
   (
      this : in out MaintenanceTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMaintenanceTrigger.all.get_OneShot (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaProcessingTrigger

   procedure Initialize (this : in out MediaProcessingTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaProcessingTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaProcessingTrigger, IMediaProcessingTrigger_Ptr);
   begin
      if this.m_IMediaProcessingTrigger /= null then
         if this.m_IMediaProcessingTrigger.all /= null then
            RefCount := this.m_IMediaProcessingTrigger.all.Release;
            Free (this.m_IMediaProcessingTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaProcessingTrigger

   function Constructor return MediaProcessingTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MediaProcessingTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IMediaProcessingTrigger;
   begin
      return RetVal : MediaProcessingTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaProcessingTrigger := new Windows.ApplicationModel.Background.IMediaProcessingTrigger;
            Retval.m_IMediaProcessingTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaProcessingTrigger

   function RequestAsync
   (
      this : in out MediaProcessingTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaProcessingTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaProcessingTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult;
      m_IID            : aliased WinRt.IID := (630540332, 7359, 22161, (163, 13, 33, 100, 144, 156, 103, 18 )); -- Windows.ApplicationModel.Background.MediaProcessingTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (940885669, 10961, 22645, (190, 213, 80, 49, 205, 31, 80, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind := new AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaProcessingTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaProcessingTrigger.all.RequestAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestAsync
   (
      this : in out MediaProcessingTrigger;
      arguments : Windows.Foundation.Collections.ValueSet'Class
   )
   return WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaProcessingTriggerResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaProcessingTriggerResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Background.MediaProcessingTriggerResult;
      m_IID            : aliased WinRt.IID := (630540332, 7359, 22161, (163, 13, 33, 100, 144, 156, 103, 18 )); -- Windows.ApplicationModel.Background.MediaProcessingTriggerResult;
      m_HandlerIID     : aliased WinRt.IID := (940885669, 10961, 22645, (190, 213, 80, 49, 205, 31, 80, 162 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind := new AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaProcessingTriggerResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaProcessingTriggerResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IMediaProcessingTrigger.all.RequestAsync (arguments.m_IPropertySet.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandDeviceServiceNotificationTrigger

   procedure Initialize (this : in out MobileBroadbandDeviceServiceNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandDeviceServiceNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandDeviceServiceNotificationTrigger

   function Constructor return MobileBroadbandDeviceServiceNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MobileBroadbandDeviceServiceNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : MobileBroadbandDeviceServiceNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandDeviceServiceNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPcoDataChangeTrigger

   procedure Initialize (this : in out MobileBroadbandPcoDataChangeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPcoDataChangeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandPcoDataChangeTrigger

   function Constructor return MobileBroadbandPcoDataChangeTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MobileBroadbandPcoDataChangeTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : MobileBroadbandPcoDataChangeTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPcoDataChangeTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandPinLockStateChangeTrigger

   procedure Initialize (this : in out MobileBroadbandPinLockStateChangeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandPinLockStateChangeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandPinLockStateChangeTrigger

   function Constructor return MobileBroadbandPinLockStateChangeTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MobileBroadbandPinLockStateChangeTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : MobileBroadbandPinLockStateChangeTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandPinLockStateChangeTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandRadioStateChangeTrigger

   procedure Initialize (this : in out MobileBroadbandRadioStateChangeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandRadioStateChangeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandRadioStateChangeTrigger

   function Constructor return MobileBroadbandRadioStateChangeTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MobileBroadbandRadioStateChangeTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : MobileBroadbandRadioStateChangeTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandRadioStateChangeTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MobileBroadbandRegistrationStateChangeTrigger

   procedure Initialize (this : in out MobileBroadbandRegistrationStateChangeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out MobileBroadbandRegistrationStateChangeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MobileBroadbandRegistrationStateChangeTrigger

   function Constructor return MobileBroadbandRegistrationStateChangeTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.MobileBroadbandRegistrationStateChangeTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : MobileBroadbandRegistrationStateChangeTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MobileBroadbandRegistrationStateChangeTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorDataUsageTrigger

   procedure Initialize (this : in out NetworkOperatorDataUsageTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorDataUsageTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NetworkOperatorDataUsageTrigger

   function Constructor return NetworkOperatorDataUsageTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.NetworkOperatorDataUsageTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : NetworkOperatorDataUsageTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorDataUsageTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorHotspotAuthenticationTrigger

   procedure Initialize (this : in out NetworkOperatorHotspotAuthenticationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorHotspotAuthenticationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorHotspotAuthenticationTrigger, INetworkOperatorHotspotAuthenticationTrigger_Ptr);
   begin
      if this.m_INetworkOperatorHotspotAuthenticationTrigger /= null then
         if this.m_INetworkOperatorHotspotAuthenticationTrigger.all /= null then
            RefCount := this.m_INetworkOperatorHotspotAuthenticationTrigger.all.Release;
            Free (this.m_INetworkOperatorHotspotAuthenticationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NetworkOperatorHotspotAuthenticationTrigger

   function Constructor return NetworkOperatorHotspotAuthenticationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.NetworkOperatorHotspotAuthenticationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.INetworkOperatorHotspotAuthenticationTrigger;
   begin
      return RetVal : NetworkOperatorHotspotAuthenticationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_INetworkOperatorHotspotAuthenticationTrigger := new Windows.ApplicationModel.Background.INetworkOperatorHotspotAuthenticationTrigger;
            Retval.m_INetworkOperatorHotspotAuthenticationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorHotspotAuthenticationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for NetworkOperatorNotificationTrigger

   procedure Initialize (this : in out NetworkOperatorNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out NetworkOperatorNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (INetworkOperatorNotificationTrigger, INetworkOperatorNotificationTrigger_Ptr);
   begin
      if this.m_INetworkOperatorNotificationTrigger /= null then
         if this.m_INetworkOperatorNotificationTrigger.all /= null then
            RefCount := this.m_INetworkOperatorNotificationTrigger.all.Release;
            Free (this.m_INetworkOperatorNotificationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for NetworkOperatorNotificationTrigger

   function Constructor
   (
      networkAccountId : WinRt.WString
   )
   return NetworkOperatorNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.NetworkOperatorNotificationTrigger");
      m_Factory    : access INetworkOperatorNotificationTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.INetworkOperatorNotificationTrigger;
      HStr_networkAccountId : WinRt.HString := To_HString (networkAccountId);
   begin
      return RetVal : NetworkOperatorNotificationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_INetworkOperatorNotificationTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_networkAccountId, m_ComRetVal'Access);
            Retval.m_INetworkOperatorNotificationTrigger := new Windows.ApplicationModel.Background.INetworkOperatorNotificationTrigger;
            Retval.m_INetworkOperatorNotificationTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_networkAccountId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for NetworkOperatorNotificationTrigger

   function get_NetworkAccountId
   (
      this : in out NetworkOperatorNotificationTrigger
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_INetworkOperatorNotificationTrigger.all.get_NetworkAccountId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaymentAppCanMakePaymentTrigger

   procedure Initialize (this : in out PaymentAppCanMakePaymentTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaymentAppCanMakePaymentTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaymentAppCanMakePaymentTrigger

   function Constructor return PaymentAppCanMakePaymentTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.PaymentAppCanMakePaymentTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : PaymentAppCanMakePaymentTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaymentAppCanMakePaymentTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhoneTrigger

   procedure Initialize (this : in out PhoneTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhoneTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhoneTrigger, IPhoneTrigger_Ptr);
   begin
      if this.m_IPhoneTrigger /= null then
         if this.m_IPhoneTrigger.all /= null then
            RefCount := this.m_IPhoneTrigger.all.Release;
            Free (this.m_IPhoneTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PhoneTrigger

   function Constructor
   (
      type_x : Windows.ApplicationModel.Calls.Background.PhoneTriggerType;
      oneShot : WinRt.Boolean
   )
   return PhoneTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.PhoneTrigger");
      m_Factory    : access IPhoneTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IPhoneTrigger;
   begin
      return RetVal : PhoneTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IPhoneTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (type_x, oneShot, m_ComRetVal'Access);
            Retval.m_IPhoneTrigger := new Windows.ApplicationModel.Background.IPhoneTrigger;
            Retval.m_IPhoneTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhoneTrigger

   function get_OneShot
   (
      this : in out PhoneTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IPhoneTrigger.all.get_OneShot (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TriggerType
   (
      this : in out PhoneTrigger
   )
   return WinRt.Windows.ApplicationModel.Calls.Background.PhoneTriggerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Calls.Background.PhoneTriggerType;
   begin
      Hr := this.m_IPhoneTrigger.all.get_TriggerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PushNotificationTrigger

   procedure Initialize (this : in out PushNotificationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out PushNotificationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PushNotificationTrigger

   function Constructor
   (
      applicationId : WinRt.WString
   )
   return PushNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.PushNotificationTrigger");
      m_Factory    : access IPushNotificationTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : PushNotificationTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IPushNotificationTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_applicationId, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function Constructor return PushNotificationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.PushNotificationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : PushNotificationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PushNotificationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RcsEndUserMessageAvailableTrigger

   procedure Initialize (this : in out RcsEndUserMessageAvailableTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out RcsEndUserMessageAvailableTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRcsEndUserMessageAvailableTrigger, IRcsEndUserMessageAvailableTrigger_Ptr);
   begin
      if this.m_IRcsEndUserMessageAvailableTrigger /= null then
         if this.m_IRcsEndUserMessageAvailableTrigger.all /= null then
            RefCount := this.m_IRcsEndUserMessageAvailableTrigger.all.Release;
            Free (this.m_IRcsEndUserMessageAvailableTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RcsEndUserMessageAvailableTrigger

   function Constructor return RcsEndUserMessageAvailableTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.RcsEndUserMessageAvailableTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IRcsEndUserMessageAvailableTrigger;
   begin
      return RetVal : RcsEndUserMessageAvailableTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRcsEndUserMessageAvailableTrigger := new Windows.ApplicationModel.Background.IRcsEndUserMessageAvailableTrigger;
            Retval.m_IRcsEndUserMessageAvailableTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RcsEndUserMessageAvailableTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommConnectionTrigger

   procedure Initialize (this : in out RfcommConnectionTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommConnectionTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommConnectionTrigger, IRfcommConnectionTrigger_Ptr);
   begin
      if this.m_IRfcommConnectionTrigger /= null then
         if this.m_IRfcommConnectionTrigger.all /= null then
            RefCount := this.m_IRfcommConnectionTrigger.all.Release;
            Free (this.m_IRfcommConnectionTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RfcommConnectionTrigger

   function Constructor return RfcommConnectionTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.RfcommConnectionTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IRfcommConnectionTrigger;
   begin
      return RetVal : RfcommConnectionTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRfcommConnectionTrigger := new Windows.ApplicationModel.Background.IRfcommConnectionTrigger;
            Retval.m_IRfcommConnectionTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommConnectionTrigger

   function get_InboundConnection
   (
      this : in out RfcommConnectionTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.Background.RfcommInboundConnectionInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Background.IRfcommInboundConnectionInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Background.RfcommInboundConnectionInformation do
         Hr := this.m_IRfcommConnectionTrigger.all.get_InboundConnection (m_ComRetVal'Access);
         Retval.m_IRfcommInboundConnectionInformation := new Windows.Devices.Bluetooth.Background.IRfcommInboundConnectionInformation;
         Retval.m_IRfcommInboundConnectionInformation.all := m_ComRetVal;
      end return;
   end;

   function get_OutboundConnection
   (
      this : in out RfcommConnectionTrigger
   )
   return WinRt.Windows.Devices.Bluetooth.Background.RfcommOutboundConnectionInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Background.IRfcommOutboundConnectionInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Background.RfcommOutboundConnectionInformation do
         Hr := this.m_IRfcommConnectionTrigger.all.get_OutboundConnection (m_ComRetVal'Access);
         Retval.m_IRfcommOutboundConnectionInformation := new Windows.Devices.Bluetooth.Background.IRfcommOutboundConnectionInformation;
         Retval.m_IRfcommOutboundConnectionInformation.all := m_ComRetVal;
      end return;
   end;

   function get_AllowMultipleConnections
   (
      this : in out RfcommConnectionTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRfcommConnectionTrigger.all.get_AllowMultipleConnections (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowMultipleConnections
   (
      this : in out RfcommConnectionTrigger;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommConnectionTrigger.all.put_AllowMultipleConnections (value);
   end;

   function get_ProtectionLevel
   (
      this : in out RfcommConnectionTrigger
   )
   return WinRt.Windows.Networking.Sockets.SocketProtectionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketProtectionLevel;
   begin
      Hr := this.m_IRfcommConnectionTrigger.all.get_ProtectionLevel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ProtectionLevel
   (
      this : in out RfcommConnectionTrigger;
      value : Windows.Networking.Sockets.SocketProtectionLevel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommConnectionTrigger.all.put_ProtectionLevel (value);
   end;

   function get_RemoteHostName
   (
      this : in out RfcommConnectionTrigger
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IRfcommConnectionTrigger.all.get_RemoteHostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_RemoteHostName
   (
      this : in out RfcommConnectionTrigger;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommConnectionTrigger.all.put_RemoteHostName (value.m_IHostName.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SecondaryAuthenticationFactorAuthenticationTrigger

   procedure Initialize (this : in out SecondaryAuthenticationFactorAuthenticationTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SecondaryAuthenticationFactorAuthenticationTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISecondaryAuthenticationFactorAuthenticationTrigger, ISecondaryAuthenticationFactorAuthenticationTrigger_Ptr);
   begin
      if this.m_ISecondaryAuthenticationFactorAuthenticationTrigger /= null then
         if this.m_ISecondaryAuthenticationFactorAuthenticationTrigger.all /= null then
            RefCount := this.m_ISecondaryAuthenticationFactorAuthenticationTrigger.all.Release;
            Free (this.m_ISecondaryAuthenticationFactorAuthenticationTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SecondaryAuthenticationFactorAuthenticationTrigger

   function Constructor return SecondaryAuthenticationFactorAuthenticationTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SecondaryAuthenticationFactorAuthenticationTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ISecondaryAuthenticationFactorAuthenticationTrigger;
   begin
      return RetVal : SecondaryAuthenticationFactorAuthenticationTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ISecondaryAuthenticationFactorAuthenticationTrigger := new Windows.ApplicationModel.Background.ISecondaryAuthenticationFactorAuthenticationTrigger;
            Retval.m_ISecondaryAuthenticationFactorAuthenticationTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SecondaryAuthenticationFactorAuthenticationTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SensorDataThresholdTrigger

   procedure Initialize (this : in out SensorDataThresholdTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SensorDataThresholdTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISensorDataThresholdTrigger, ISensorDataThresholdTrigger_Ptr);
   begin
      if this.m_ISensorDataThresholdTrigger /= null then
         if this.m_ISensorDataThresholdTrigger.all /= null then
            RefCount := this.m_ISensorDataThresholdTrigger.all.Release;
            Free (this.m_ISensorDataThresholdTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SensorDataThresholdTrigger

   function Constructor
   (
      threshold : Windows.Devices.Sensors.ISensorDataThreshold
   )
   return SensorDataThresholdTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SensorDataThresholdTrigger");
      m_Factory    : access ISensorDataThresholdTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ISensorDataThresholdTrigger;
   begin
      return RetVal : SensorDataThresholdTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ISensorDataThresholdTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (threshold, m_ComRetVal'Access);
            Retval.m_ISensorDataThresholdTrigger := new Windows.ApplicationModel.Background.ISensorDataThresholdTrigger;
            Retval.m_ISensorDataThresholdTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SensorDataThresholdTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmartCardTrigger

   procedure Initialize (this : in out SmartCardTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmartCardTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISmartCardTrigger, ISmartCardTrigger_Ptr);
   begin
      if this.m_ISmartCardTrigger /= null then
         if this.m_ISmartCardTrigger.all /= null then
            RefCount := this.m_ISmartCardTrigger.all.Release;
            Free (this.m_ISmartCardTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmartCardTrigger

   function Constructor
   (
      triggerType : Windows.Devices.SmartCards.SmartCardTriggerType
   )
   return SmartCardTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SmartCardTrigger");
      m_Factory    : access ISmartCardTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ISmartCardTrigger;
   begin
      return RetVal : SmartCardTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ISmartCardTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (triggerType, m_ComRetVal'Access);
            Retval.m_ISmartCardTrigger := new Windows.ApplicationModel.Background.ISmartCardTrigger;
            Retval.m_ISmartCardTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmartCardTrigger

   function get_TriggerType
   (
      this : in out SmartCardTrigger
   )
   return WinRt.Windows.Devices.SmartCards.SmartCardTriggerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.SmartCards.SmartCardTriggerType;
   begin
      Hr := this.m_ISmartCardTrigger.all.get_TriggerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SmsMessageReceivedTrigger

   procedure Initialize (this : in out SmsMessageReceivedTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SmsMessageReceivedTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SmsMessageReceivedTrigger

   function Constructor
   (
      filterRules : Windows.Devices.Sms.SmsFilterRules'Class
   )
   return SmsMessageReceivedTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SmsMessageReceivedTrigger");
      m_Factory    : access ISmsMessageReceivedTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : SmsMessageReceivedTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ISmsMessageReceivedTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (filterRules.m_ISmsFilterRules.all, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SmsMessageReceivedTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SocketActivityTrigger

   procedure Initialize (this : in out SocketActivityTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SocketActivityTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SocketActivityTrigger

   function Constructor return SocketActivityTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SocketActivityTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : SocketActivityTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SocketActivityTrigger

   function get_IsWakeFromLowPowerSupported
   (
      this : in out SocketActivityTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Background.ISocketActivityTrigger := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Background.IBackgroundTrigger_Interface, WinRt.Windows.ApplicationModel.Background.ISocketActivityTrigger, WinRt.Windows.ApplicationModel.Background.IID_ISocketActivityTrigger'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBackgroundTrigger.all);
      Hr := m_Interface.get_IsWakeFromLowPowerSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageLibraryChangeTrackerTrigger

   procedure Initialize (this : in out StorageLibraryChangeTrackerTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageLibraryChangeTrackerTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for StorageLibraryChangeTrackerTrigger

   function Constructor
   (
      tracker : Windows.Storage.StorageLibraryChangeTracker'Class
   )
   return StorageLibraryChangeTrackerTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.StorageLibraryChangeTrackerTrigger");
      m_Factory    : access IStorageLibraryChangeTrackerTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : StorageLibraryChangeTrackerTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IStorageLibraryChangeTrackerTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (tracker.m_IStorageLibraryChangeTracker.all, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageLibraryChangeTrackerTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for StorageLibraryContentChangedTrigger

   procedure Initialize (this : in out StorageLibraryContentChangedTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out StorageLibraryContentChangedTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IStorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTrigger_Ptr);
   begin
      if this.m_IStorageLibraryContentChangedTrigger /= null then
         if this.m_IStorageLibraryContentChangedTrigger.all /= null then
            RefCount := this.m_IStorageLibraryContentChangedTrigger.all.Release;
            Free (this.m_IStorageLibraryContentChangedTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for StorageLibraryContentChangedTrigger

   function Create
   (
      storageLibrary : Windows.Storage.StorageLibrary'Class
   )
   return WinRt.Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IStorageLibraryContentChangedTriggerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IStorageLibraryContentChangedTrigger;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IStorageLibraryContentChangedTriggerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (storageLibrary.m_IStorageLibrary.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IStorageLibraryContentChangedTrigger := new Windows.ApplicationModel.Background.IStorageLibraryContentChangedTrigger;
            Retval.m_IStorageLibraryContentChangedTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromLibraries
   (
      storageLibraries : GenericObject
   )
   return WinRt.Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger");
      m_Factory        : access WinRt.Windows.ApplicationModel.Background.IStorageLibraryContentChangedTriggerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.IStorageLibraryContentChangedTrigger;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IStorageLibraryContentChangedTriggerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromLibraries (storageLibraries, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IStorageLibraryContentChangedTrigger := new Windows.ApplicationModel.Background.IStorageLibraryContentChangedTrigger;
            Retval.m_IStorageLibraryContentChangedTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for StorageLibraryContentChangedTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemCondition

   procedure Initialize (this : in out SystemCondition) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemCondition) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemCondition, ISystemCondition_Ptr);
   begin
      if this.m_ISystemCondition /= null then
         if this.m_ISystemCondition.all /= null then
            RefCount := this.m_ISystemCondition.all.Release;
            Free (this.m_ISystemCondition);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SystemCondition

   function Constructor
   (
      conditionType : Windows.ApplicationModel.Background.SystemConditionType
   )
   return SystemCondition is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SystemCondition");
      m_Factory    : access ISystemConditionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ISystemCondition;
   begin
      return RetVal : SystemCondition do
         Hr := RoGetActivationFactory (m_hString, IID_ISystemConditionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (conditionType, m_ComRetVal'Access);
            Retval.m_ISystemCondition := new Windows.ApplicationModel.Background.ISystemCondition;
            Retval.m_ISystemCondition.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemCondition

   function get_ConditionType
   (
      this : in out SystemCondition
   )
   return WinRt.Windows.ApplicationModel.Background.SystemConditionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.SystemConditionType;
   begin
      Hr := this.m_ISystemCondition.all.get_ConditionType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SystemTrigger

   procedure Initialize (this : in out SystemTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out SystemTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISystemTrigger, ISystemTrigger_Ptr);
   begin
      if this.m_ISystemTrigger /= null then
         if this.m_ISystemTrigger.all /= null then
            RefCount := this.m_ISystemTrigger.all.Release;
            Free (this.m_ISystemTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for SystemTrigger

   function Constructor
   (
      triggerType : Windows.ApplicationModel.Background.SystemTriggerType;
      oneShot : WinRt.Boolean
   )
   return SystemTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.SystemTrigger");
      m_Factory    : access ISystemTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ISystemTrigger;
   begin
      return RetVal : SystemTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ISystemTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (triggerType, oneShot, m_ComRetVal'Access);
            Retval.m_ISystemTrigger := new Windows.ApplicationModel.Background.ISystemTrigger;
            Retval.m_ISystemTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SystemTrigger

   function get_OneShot
   (
      this : in out SystemTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISystemTrigger.all.get_OneShot (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TriggerType
   (
      this : in out SystemTrigger
   )
   return WinRt.Windows.ApplicationModel.Background.SystemTriggerType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Background.SystemTriggerType;
   begin
      Hr := this.m_ISystemTrigger.all.get_TriggerType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TetheringEntitlementCheckTrigger

   procedure Initialize (this : in out TetheringEntitlementCheckTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out TetheringEntitlementCheckTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TetheringEntitlementCheckTrigger

   function Constructor return TetheringEntitlementCheckTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.TetheringEntitlementCheckTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : TetheringEntitlementCheckTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TetheringEntitlementCheckTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimeTrigger

   procedure Initialize (this : in out TimeTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimeTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITimeTrigger, ITimeTrigger_Ptr);
   begin
      if this.m_ITimeTrigger /= null then
         if this.m_ITimeTrigger.all /= null then
            RefCount := this.m_ITimeTrigger.all.Release;
            Free (this.m_ITimeTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimeTrigger

   function Constructor
   (
      freshnessTime : WinRt.UInt32;
      oneShot : WinRt.Boolean
   )
   return TimeTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.TimeTrigger");
      m_Factory    : access ITimeTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.ITimeTrigger;
   begin
      return RetVal : TimeTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_ITimeTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (freshnessTime, oneShot, m_ComRetVal'Access);
            Retval.m_ITimeTrigger := new Windows.ApplicationModel.Background.ITimeTrigger;
            Retval.m_ITimeTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimeTrigger

   function get_FreshnessTime
   (
      this : in out TimeTrigger
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITimeTrigger.all.get_FreshnessTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OneShot
   (
      this : in out TimeTrigger
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITimeTrigger.all.get_OneShot (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationActionTrigger

   procedure Initialize (this : in out ToastNotificationActionTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationActionTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToastNotificationActionTrigger

   function Constructor return ToastNotificationActionTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ToastNotificationActionTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : ToastNotificationActionTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      applicationId : WinRt.WString
   )
   return ToastNotificationActionTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ToastNotificationActionTrigger");
      m_Factory    : access IToastNotificationActionTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : ToastNotificationActionTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationActionTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_applicationId, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationActionTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ToastNotificationHistoryChangedTrigger

   procedure Initialize (this : in out ToastNotificationHistoryChangedTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out ToastNotificationHistoryChangedTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ToastNotificationHistoryChangedTrigger

   function Constructor
   (
      applicationId : WinRt.WString
   )
   return ToastNotificationHistoryChangedTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ToastNotificationHistoryChangedTrigger");
      m_Factory    : access IToastNotificationHistoryChangedTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
      HStr_applicationId : WinRt.HString := To_HString (applicationId);
   begin
      return RetVal : ToastNotificationHistoryChangedTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IToastNotificationHistoryChangedTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_applicationId, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_applicationId);
      end return;
   end;

   function Constructor return ToastNotificationHistoryChangedTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.ToastNotificationHistoryChangedTrigger");
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : ToastNotificationHistoryChangedTrigger do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ToastNotificationHistoryChangedTrigger

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserNotificationChangedTrigger

   procedure Initialize (this : in out UserNotificationChangedTrigger) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserNotificationChangedTrigger) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackgroundTrigger, IBackgroundTrigger_Ptr);
   begin
      if this.m_IBackgroundTrigger /= null then
         if this.m_IBackgroundTrigger.all /= null then
            RefCount := this.m_IBackgroundTrigger.all.Release;
            Free (this.m_IBackgroundTrigger);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserNotificationChangedTrigger

   function Constructor
   (
      notificationKinds : Windows.UI.Notifications.NotificationKinds
   )
   return UserNotificationChangedTrigger is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Background.UserNotificationChangedTrigger");
      m_Factory    : access IUserNotificationChangedTriggerFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.Background.IBackgroundTrigger;
   begin
      return RetVal : UserNotificationChangedTrigger do
         Hr := RoGetActivationFactory (m_hString, IID_IUserNotificationChangedTriggerFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (notificationKinds, m_ComRetVal'Access);
            Retval.m_IBackgroundTrigger := new Windows.ApplicationModel.Background.IBackgroundTrigger;
            Retval.m_IBackgroundTrigger.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserNotificationChangedTrigger

end;

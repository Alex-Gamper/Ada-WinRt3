--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Storage.Streams is

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt32, GenericObject);

   package IAsyncOperation_IRandomAccessStream is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStream);
   package AsyncOperationCompletedHandler_IRandomAccessStream is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStream);

   package IAsyncOperation_StorageStreamTransaction is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageStreamTransaction);
   package AsyncOperationCompletedHandler_StorageStreamTransaction is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageStreamTransaction);

   package IAsyncOperation_UInt64 is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.UInt64, GenericObject);
   package AsyncOperationCompletedHandler_UInt64 is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.UInt64, GenericObject);

   package IAsyncOperation_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Buffer

   procedure Initialize (this : in out Buffer) is
   begin
      null;
   end;

   procedure Finalize (this : in out Buffer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBuffer, IBuffer_Ptr);
   begin
      if this.m_IBuffer /= null then
         if this.m_IBuffer.all /= null then
            RefCount := this.m_IBuffer.all.Release;
            Free (this.m_IBuffer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Buffer

   function Constructor
   (
      capacity : WinRt.UInt32
   )
   return Buffer is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Streams.Buffer");
      m_Factory    : access IBufferFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.Streams.IBuffer;
   begin
      return RetVal : Buffer do
         Hr := RoGetActivationFactory (m_hString, IID_IBufferFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (capacity, m_ComRetVal'Access);
            Retval.m_IBuffer := new Windows.Storage.Streams.IBuffer;
            Retval.m_IBuffer.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for Buffer

   function CreateCopyFromMemoryBuffer
   (
      input : Windows.Foundation.IMemoryBuffer
   )
   return WinRt.Windows.Storage.Streams.Buffer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.Buffer");
      m_Factory        : access WinRt.Windows.Storage.Streams.IBufferStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.Buffer do
         Hr := RoGetActivationFactory (m_hString, IID_IBufferStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateCopyFromMemoryBuffer (input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IBuffer := new Windows.Storage.Streams.IBuffer;
            Retval.m_IBuffer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateMemoryBufferOverIBuffer
   (
      input : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Foundation.MemoryBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.Buffer");
      m_Factory        : access WinRt.Windows.Storage.Streams.IBufferStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IMemoryBuffer;
   begin
      return RetVal : WinRt.Windows.Foundation.MemoryBuffer do
         Hr := RoGetActivationFactory (m_hString, IID_IBufferStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMemoryBufferOverIBuffer (input, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMemoryBuffer := new Windows.Foundation.IMemoryBuffer;
            Retval.m_IMemoryBuffer.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Buffer

   function get_Capacity
   (
      this : in out Buffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBuffer.all.get_Capacity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Length
   (
      this : in out Buffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IBuffer.all.get_Length (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Length
   (
      this : in out Buffer;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBuffer.all.put_Length (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataReader

   procedure Initialize (this : in out DataReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataReader, IDataReader_Ptr);
   begin
      if this.m_IDataReader /= null then
         if this.m_IDataReader.all /= null then
            RefCount := this.m_IDataReader.all.Release;
            Free (this.m_IDataReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DataReader

   function Constructor
   (
      inputStream : Windows.Storage.Streams.IInputStream
   )
   return DataReader is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Streams.DataReader");
      m_Factory    : access IDataReaderFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.Streams.IDataReader;
   begin
      return RetVal : DataReader do
         Hr := RoGetActivationFactory (m_hString, IID_IDataReaderFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDataReader (inputStream, m_ComRetVal'Access);
            Retval.m_IDataReader := new Windows.Storage.Streams.IDataReader;
            Retval.m_IDataReader.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DataReader

   function FromBuffer
   (
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.Windows.Storage.Streams.DataReader is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.DataReader");
      m_Factory        : access WinRt.Windows.Storage.Streams.IDataReaderStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IDataReader;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.DataReader do
         Hr := RoGetActivationFactory (m_hString, IID_IDataReaderStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromBuffer (buffer_p, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDataReader := new Windows.Storage.Streams.IDataReader;
            Retval.m_IDataReader.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataReader

   function get_UnconsumedBufferLength
   (
      this : in out DataReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDataReader.all.get_UnconsumedBufferLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UnicodeEncoding
   (
      this : in out DataReader
   )
   return WinRt.Windows.Storage.Streams.UnicodeEncoding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.UnicodeEncoding;
   begin
      Hr := this.m_IDataReader.all.get_UnicodeEncoding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UnicodeEncoding
   (
      this : in out DataReader;
      value : Windows.Storage.Streams.UnicodeEncoding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataReader.all.put_UnicodeEncoding (value);
   end;

   function get_ByteOrder
   (
      this : in out DataReader
   )
   return WinRt.Windows.Storage.Streams.ByteOrder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.ByteOrder;
   begin
      Hr := this.m_IDataReader.all.get_ByteOrder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ByteOrder
   (
      this : in out DataReader;
      value : Windows.Storage.Streams.ByteOrder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataReader.all.put_ByteOrder (value);
   end;

   function get_InputStreamOptions
   (
      this : in out DataReader
   )
   return WinRt.Windows.Storage.Streams.InputStreamOptions is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.InputStreamOptions;
   begin
      Hr := this.m_IDataReader.all.get_InputStreamOptions (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_InputStreamOptions
   (
      this : in out DataReader;
      value : Windows.Storage.Streams.InputStreamOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataReader.all.put_InputStreamOptions (value);
   end;

   function ReadByte
   (
      this : in out DataReader
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IDataReader.all.ReadByte (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReadBytes
   (
      this : in out DataReader;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IDataReader.all.ReadBytes (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   function ReadBuffer
   (
      this : in out DataReader;
      length : WinRt.UInt32
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IDataReader.all.ReadBuffer (length, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadBoolean
   (
      this : in out DataReader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDataReader.all.ReadBoolean (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadGuid
   (
      this : in out DataReader
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IDataReader.all.ReadGuid (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadInt16
   (
      this : in out DataReader
   )
   return WinRt.Int16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int16;
   begin
      Hr := this.m_IDataReader.all.ReadInt16 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadInt32
   (
      this : in out DataReader
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IDataReader.all.ReadInt32 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadInt64
   (
      this : in out DataReader
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IDataReader.all.ReadInt64 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadUInt16
   (
      this : in out DataReader
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IDataReader.all.ReadUInt16 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadUInt32
   (
      this : in out DataReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDataReader.all.ReadUInt32 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadUInt64
   (
      this : in out DataReader
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IDataReader.all.ReadUInt64 (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadSingle
   (
      this : in out DataReader
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IDataReader.all.ReadSingle (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadDouble
   (
      this : in out DataReader
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IDataReader.all.ReadDouble (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadString
   (
      this : in out DataReader;
      codeUnitCount : WinRt.UInt32
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDataReader.all.ReadString (codeUnitCount, m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function ReadDateTime
   (
      this : in out DataReader
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IDataReader.all.ReadDateTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ReadTimeSpan
   (
      this : in out DataReader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IDataReader.all.ReadTimeSpan (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function LoadAsync
   (
      this : in out DataReader;
      count : WinRt.UInt32
   )
   return WinRt.Windows.Storage.Streams.DataReaderLoadOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.DataReaderLoadOperation do
         Hr := this.m_IDataReader.all.LoadAsync (count, m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function DetachBuffer
   (
      this : in out DataReader
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IDataReader.all.DetachBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DetachStream
   (
      this : in out DataReader
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IDataReader.all.DetachStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out DataReader
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IDataReader_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataReader.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataReaderLoadOperation

   procedure Initialize (this : in out DataReaderLoadOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataReaderLoadOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataReaderLoadOperation

   -- Generic Interface Windows.Foundation.IAsyncOperation`1<System.UInt32>
   procedure put_Completed
   (
      this : in out DataReaderLoadOperation;
      handler : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_Completed (handler);
      m_RefCount := m_Interface.Release;
   end;

   function get_Completed
   (
      this : in out DataReaderLoadOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Completed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResults
   (
      this : in out DataReaderLoadOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased UInt32;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetResults (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out DataReaderLoadOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out DataReaderLoadOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out DataReaderLoadOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out DataReaderLoadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out DataReaderLoadOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataWriter

   procedure Initialize (this : in out DataWriter) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataWriter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDataWriter, IDataWriter_Ptr);
   begin
      if this.m_IDataWriter /= null then
         if this.m_IDataWriter.all /= null then
            RefCount := this.m_IDataWriter.all.Release;
            Free (this.m_IDataWriter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DataWriter

   function Constructor return DataWriter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Streams.DataWriter");
      m_ComRetVal  : aliased Windows.Storage.Streams.IDataWriter;
   begin
      return RetVal : DataWriter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDataWriter := new Windows.Storage.Streams.IDataWriter;
            Retval.m_IDataWriter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      outputStream : Windows.Storage.Streams.IOutputStream
   )
   return DataWriter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Streams.DataWriter");
      m_Factory    : access IDataWriterFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Storage.Streams.IDataWriter;
   begin
      return RetVal : DataWriter do
         Hr := RoGetActivationFactory (m_hString, IID_IDataWriterFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateDataWriter (outputStream, m_ComRetVal'Access);
            Retval.m_IDataWriter := new Windows.Storage.Streams.IDataWriter;
            Retval.m_IDataWriter.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataWriter

   function get_UnstoredBufferLength
   (
      this : in out DataWriter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IDataWriter.all.get_UnstoredBufferLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UnicodeEncoding
   (
      this : in out DataWriter
   )
   return WinRt.Windows.Storage.Streams.UnicodeEncoding is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.UnicodeEncoding;
   begin
      Hr := this.m_IDataWriter.all.get_UnicodeEncoding (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UnicodeEncoding
   (
      this : in out DataWriter;
      value : Windows.Storage.Streams.UnicodeEncoding
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.put_UnicodeEncoding (value);
   end;

   function get_ByteOrder
   (
      this : in out DataWriter
   )
   return WinRt.Windows.Storage.Streams.ByteOrder is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.ByteOrder;
   begin
      Hr := this.m_IDataWriter.all.get_ByteOrder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ByteOrder
   (
      this : in out DataWriter;
      value : Windows.Storage.Streams.ByteOrder
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.put_ByteOrder (value);
   end;

   procedure WriteByte
   (
      this : in out DataWriter;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteByte (value);
   end;

   procedure WriteBytes
   (
      this : in out DataWriter;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      Hr := this.m_IDataWriter.all.WriteBytes (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
   end;

   procedure WriteBuffer
   (
      this : in out DataWriter;
      buffer_p : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteBuffer (buffer_p);
   end;

   procedure WriteBuffer
   (
      this : in out DataWriter;
      buffer_p : Windows.Storage.Streams.IBuffer;
      start : WinRt.UInt32;
      count : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteBuffer (buffer_p, start, count);
   end;

   procedure WriteBoolean
   (
      this : in out DataWriter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteBoolean (value);
   end;

   procedure WriteGuid
   (
      this : in out DataWriter;
      value : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteGuid (value);
   end;

   procedure WriteInt16
   (
      this : in out DataWriter;
      value : WinRt.Int16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteInt16 (value);
   end;

   procedure WriteInt32
   (
      this : in out DataWriter;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteInt32 (value);
   end;

   procedure WriteInt64
   (
      this : in out DataWriter;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteInt64 (value);
   end;

   procedure WriteUInt16
   (
      this : in out DataWriter;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteUInt16 (value);
   end;

   procedure WriteUInt32
   (
      this : in out DataWriter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteUInt32 (value);
   end;

   procedure WriteUInt64
   (
      this : in out DataWriter;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteUInt64 (value);
   end;

   procedure WriteSingle
   (
      this : in out DataWriter;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteSingle (value);
   end;

   procedure WriteDouble
   (
      this : in out DataWriter;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteDouble (value);
   end;

   procedure WriteDateTime
   (
      this : in out DataWriter;
      value : Windows.Foundation.DateTime
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteDateTime (value);
   end;

   procedure WriteTimeSpan
   (
      this : in out DataWriter;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDataWriter.all.WriteTimeSpan (value);
   end;

   function WriteString
   (
      this : in out DataWriter;
      value : WinRt.WString
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataWriter.all.WriteString (HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   function MeasureString
   (
      this : in out DataWriter;
      value : WinRt.WString
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDataWriter.all.MeasureString (HStr_value, m_ComRetVal'Access);
      Hr := WindowsDeleteString (HStr_value);
      return m_ComRetVal;
   end;

   function StoreAsync
   (
      this : in out DataWriter
   )
   return WinRt.Windows.Storage.Streams.DataWriterStoreOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.DataWriterStoreOperation do
         Hr := this.m_IDataWriter.all.StoreAsync (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function FlushAsync
   (
      this : in out DataWriter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDataWriter.all.FlushAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function DetachBuffer
   (
      this : in out DataWriter
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IDataWriter.all.DetachBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function DetachStream
   (
      this : in out DataWriter
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IDataWriter.all.DetachStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out DataWriter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IDataWriter_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDataWriter.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DataWriterStoreOperation

   procedure Initialize (this : in out DataWriterStoreOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out DataWriterStoreOperation) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DataWriterStoreOperation

   -- Generic Interface Windows.Foundation.IAsyncOperation`1<System.UInt32>
   procedure put_Completed
   (
      this : in out DataWriterStoreOperation;
      handler : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.put_Completed (handler);
      m_RefCount := m_Interface.Release;
   end;

   function get_Completed
   (
      this : in out DataWriterStoreOperation
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Completed (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetResults
   (
      this : in out DataWriterStoreOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IAsyncOperation_UInt32.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased UInt32;
      m_GenericIID     : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetResults (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out DataWriterStoreOperation
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Id (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out DataWriterStoreOperation
   )
   return WinRt.Windows.Foundation.AsyncStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.AsyncStatus;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Status (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out DataWriterStoreOperation
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_ErrorCode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Cancel
   (
      this : in out DataWriterStoreOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Cancel;
      m_RefCount := m_Interface.Release;
   end;

   procedure Close
   (
      this : in out DataWriterStoreOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IAsyncInfo := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, WinRt.Windows.Foundation.IAsyncInfo, WinRt.Windows.Foundation.IID_IAsyncInfo'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileInputStream

   procedure Initialize (this : in out FileInputStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileInputStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInputStream, IInputStream_Ptr);
   begin
      if this.m_IInputStream /= null then
         if this.m_IInputStream.all /= null then
            RefCount := this.m_IInputStream.all.Release;
            Free (this.m_IInputStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileInputStream

   function ReadAsync
   (
      this : in out FileInputStream;
      buffer_p : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IInputStream.all.ReadAsync (buffer_p, count, options, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out FileInputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IInputStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileOutputStream

   procedure Initialize (this : in out FileOutputStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileOutputStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOutputStream, IOutputStream_Ptr);
   begin
      if this.m_IOutputStream /= null then
         if this.m_IOutputStream.all /= null then
            RefCount := this.m_IOutputStream.all.Release;
            Free (this.m_IOutputStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileOutputStream

   function WriteAsync
   (
      this : in out FileOutputStream;
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IOutputStream.all.WriteAsync (buffer_p, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out FileOutputStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IOutputStream.all.FlushAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out FileOutputStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IOutputStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOutputStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FileRandomAccessStream

   procedure Initialize (this : in out FileRandomAccessStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out FileRandomAccessStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRandomAccessStream, IRandomAccessStream_Ptr);
   begin
      if this.m_IRandomAccessStream /= null then
         if this.m_IRandomAccessStream.all /= null then
            RefCount := this.m_IRandomAccessStream.all.Release;
            Free (this.m_IRandomAccessStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for FileRandomAccessStream

   function OpenAsync
   (
      filePath : WinRt.WString;
      accessMode : Windows.Storage.FileAccessMode
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.OpenAsync (HStr_filePath, accessMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_filePath);
      return m_RetVal;
   end;

   function OpenAsync
   (
      filePath : WinRt.WString;
      accessMode : Windows.Storage.FileAccessMode;
      sharingOptions : Windows.Storage.StorageOpenOptions;
      openDisposition : Windows.Storage.Streams.FileOpenDisposition
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.OpenAsync (HStr_filePath, accessMode, sharingOptions, openDisposition, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_filePath);
      return m_RetVal;
   end;

   function OpenTransactedWriteAsync
   (
      filePath : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageStreamTransaction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenTransactedWriteAsync (HStr_filePath, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                     Retval.m_IStorageStreamTransaction.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function OpenTransactedWriteAsync
   (
      filePath : WinRt.WString;
      openOptions : Windows.Storage.StorageOpenOptions;
      openDisposition : Windows.Storage.Streams.FileOpenDisposition
   )
   return WinRt.Windows.Storage.StorageStreamTransaction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenTransactedWriteAsync (HStr_filePath, openOptions, openDisposition, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                     Retval.m_IStorageStreamTransaction.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function OpenForUserAsync
   (
      user : Windows.System.User'Class;
      filePath : WinRt.WString;
      accessMode : Windows.Storage.FileAccessMode
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.OpenForUserAsync (user.m_IUser.all, HStr_filePath, accessMode, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_filePath);
      return m_RetVal;
   end;

   function OpenForUserAsync
   (
      user : Windows.System.User'Class;
      filePath : WinRt.WString;
      accessMode : Windows.Storage.FileAccessMode;
      sharingOptions : Windows.Storage.StorageOpenOptions;
      openDisposition : Windows.Storage.Streams.FileOpenDisposition
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStream.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStream.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStream;
      m_IID            : aliased WinRt.IID := (1125043918, 5144, 23833, (129, 178, 93, 219, 56, 22, 3, 204 )); -- Windows.Storage.Streams.IRandomAccessStream;
      m_HandlerIID     : aliased WinRt.IID := (965493123, 31037, 23296, (129, 155, 74, 239, 146, 72, 94, 148 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStream.Kind := new AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStream.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStream.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStream.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStream.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.OpenForUserAsync (user.m_IUser.all, HStr_filePath, accessMode, sharingOptions, openDisposition, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_filePath);
      return m_RetVal;
   end;

   function OpenTransactedWriteForUserAsync
   (
      user : Windows.System.User'Class;
      filePath : WinRt.WString
   )
   return WinRt.Windows.Storage.StorageStreamTransaction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenTransactedWriteForUserAsync (user.m_IUser.all, HStr_filePath, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                     Retval.m_IStorageStreamTransaction.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   function OpenTransactedWriteForUserAsync
   (
      user : Windows.System.User'Class;
      filePath : WinRt.WString;
      openOptions : Windows.Storage.StorageOpenOptions;
      openDisposition : Windows.Storage.Streams.FileOpenDisposition
   )
   return WinRt.Windows.Storage.StorageStreamTransaction is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.FileRandomAccessStream");
      m_Factory        : access WinRt.Windows.Storage.Streams.IFileRandomAccessStreamStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_filePath : WinRt.HString := To_HString (filePath);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageStreamTransaction.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageStreamTransaction.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageStreamTransaction;
      m_IID            : aliased WinRt.IID := (226574426, 39891, 24199, (130, 244, 155, 65, 40, 168, 135, 235 )); -- Windows.Storage.StorageStreamTransaction;
      m_HandlerIID     : aliased WinRt.IID := (3507960294, 10645, 23859, (191, 255, 81, 182, 4, 31, 104, 193 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageStreamTransaction.Kind := new AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageStreamTransaction.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageStreamTransaction.Kind_Delegate, AsyncOperationCompletedHandler_StorageStreamTransaction.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageStreamTransaction do
         Hr := RoGetActivationFactory (m_hString, IID_IFileRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.OpenTransactedWriteForUserAsync (user.m_IUser.all, HStr_filePath, openOptions, openDisposition, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IStorageStreamTransaction := new Windows.Storage.IStorageStreamTransaction;
                     Retval.m_IStorageStreamTransaction.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_filePath);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FileRandomAccessStream

   function get_Size
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out FileRandomAccessStream;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.put_Size (value);
   end;

   function GetInputStreamAt
   (
      this : in out FileRandomAccessStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetInputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out FileRandomAccessStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetOutputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out FileRandomAccessStream;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.Seek (position);
   end;

   function CloneStream
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IRandomAccessStream.all.CloneStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanWrite (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out FileRandomAccessStream;
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.WriteAsync (buffer_p, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out FileRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out FileRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out FileRandomAccessStream;
      buffer_p : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.ReadAsync (buffer_p, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InMemoryRandomAccessStream

   procedure Initialize (this : in out InMemoryRandomAccessStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out InMemoryRandomAccessStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRandomAccessStream, IRandomAccessStream_Ptr);
   begin
      if this.m_IRandomAccessStream /= null then
         if this.m_IRandomAccessStream.all /= null then
            RefCount := this.m_IRandomAccessStream.all.Release;
            Free (this.m_IRandomAccessStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for InMemoryRandomAccessStream

   function Constructor return InMemoryRandomAccessStream is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Storage.Streams.InMemoryRandomAccessStream");
      m_ComRetVal  : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      return RetVal : InMemoryRandomAccessStream do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRandomAccessStream := new Windows.Storage.Streams.IRandomAccessStream;
            Retval.m_IRandomAccessStream.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InMemoryRandomAccessStream

   function get_Size
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out InMemoryRandomAccessStream;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.put_Size (value);
   end;

   function GetInputStreamAt
   (
      this : in out InMemoryRandomAccessStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetInputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out InMemoryRandomAccessStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetOutputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out InMemoryRandomAccessStream;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.Seek (position);
   end;

   function CloneStream
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IRandomAccessStream.all.CloneStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanWrite (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out InMemoryRandomAccessStream;
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.WriteAsync (buffer_p, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out InMemoryRandomAccessStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out InMemoryRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out InMemoryRandomAccessStream;
      buffer_p : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.ReadAsync (buffer_p, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for InputStreamOverStream

   procedure Initialize (this : in out InputStreamOverStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out InputStreamOverStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IInputStream, IInputStream_Ptr);
   begin
      if this.m_IInputStream /= null then
         if this.m_IInputStream.all /= null then
            RefCount := this.m_IInputStream.all.Release;
            Free (this.m_IInputStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for InputStreamOverStream

   function ReadAsync
   (
      this : in out InputStreamOverStream;
      buffer_p : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IInputStream.all.ReadAsync (buffer_p, count, options, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out InputStreamOverStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IInputStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IInputStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OutputStreamOverStream

   procedure Initialize (this : in out OutputStreamOverStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out OutputStreamOverStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOutputStream, IOutputStream_Ptr);
   begin
      if this.m_IOutputStream /= null then
         if this.m_IOutputStream.all /= null then
            RefCount := this.m_IOutputStream.all.Release;
            Free (this.m_IOutputStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OutputStreamOverStream

   function WriteAsync
   (
      this : in out OutputStreamOverStream;
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IOutputStream.all.WriteAsync (buffer_p, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out OutputStreamOverStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IOutputStream.all.FlushAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out OutputStreamOverStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IOutputStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IOutputStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body RandomAccessStream is

      function CopyAsync
      (
         source : Windows.Storage.Streams.IInputStream;
         destination : Windows.Storage.Streams.IOutputStream
      )
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStream");
         m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_UInt64.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.UInt64;
         m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
         m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
         m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CopyAsync (source, destination, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function CopyAsync
      (
         source : Windows.Storage.Streams.IInputStream;
         destination : Windows.Storage.Streams.IOutputStream;
         bytesToCopy : WinRt.UInt64
      )
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStream");
         m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_UInt64.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.UInt64;
         m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
         m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
         m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CopyAsync (source, destination, bytesToCopy, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

      function CopyAndCloseAsync
      (
         source : Windows.Storage.Streams.IInputStream;
         destination : Windows.Storage.Streams.IOutputStream
      )
      return WinRt.UInt64 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStream");
         m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_UInt64.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_UInt64.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.UInt64;
         m_IID            : aliased WinRt.IID := (2401089251, 25942, 21782, (130, 92, 16, 33, 238, 39, 205, 12 )); -- UInt64;
         m_HandlerIID     : aliased WinRt.IID := (3523366465, 21760, 23386, (186, 70, 203, 112, 9, 89, 106, 47 ));
         m_Handler        : AsyncOperationCompletedHandler_UInt64.Kind := new AsyncOperationCompletedHandler_UInt64.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt64.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt64.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt64.Kind_Delegate, AsyncOperationCompletedHandler_UInt64.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CopyAndCloseAsync (source, destination, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_RetVal;
      end;

   end RandomAccessStream;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RandomAccessStreamOverStream

   procedure Initialize (this : in out RandomAccessStreamOverStream) is
   begin
      null;
   end;

   procedure Finalize (this : in out RandomAccessStreamOverStream) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRandomAccessStream, IRandomAccessStream_Ptr);
   begin
      if this.m_IRandomAccessStream /= null then
         if this.m_IRandomAccessStream.all /= null then
            RefCount := this.m_IRandomAccessStream.all.Release;
            Free (this.m_IRandomAccessStream);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RandomAccessStreamOverStream

   function get_Size
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out RandomAccessStreamOverStream;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.put_Size (value);
   end;

   function GetInputStreamAt
   (
      this : in out RandomAccessStreamOverStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetInputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out RandomAccessStreamOverStream;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
   begin
      Hr := this.m_IRandomAccessStream.all.GetOutputStreamAt (position, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IRandomAccessStream.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out RandomAccessStreamOverStream;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRandomAccessStream.all.Seek (position);
   end;

   function CloneStream
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
   begin
      Hr := this.m_IRandomAccessStream.all.CloneStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanRead (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRandomAccessStream.all.get_CanWrite (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out RandomAccessStreamOverStream;
      buffer_p : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.WriteAsync (buffer_p, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out RandomAccessStreamOverStream
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out RandomAccessStreamOverStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out RandomAccessStreamOverStream;
      buffer_p : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Storage.Streams.IRandomAccessStream_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IRandomAccessStream.all);
      Hr := m_Interface.ReadAsync (buffer_p, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RandomAccessStreamReference

   procedure Initialize (this : in out RandomAccessStreamReference) is
   begin
      null;
   end;

   procedure Finalize (this : in out RandomAccessStreamReference) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRandomAccessStreamReference, IRandomAccessStreamReference_Ptr);
   begin
      if this.m_IRandomAccessStreamReference /= null then
         if this.m_IRandomAccessStreamReference.all /= null then
            RefCount := this.m_IRandomAccessStreamReference.all.Release;
            Free (this.m_IRandomAccessStreamReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for RandomAccessStreamReference

   function CreateFromFile
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStreamReference");
      m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamReferenceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromFile (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
            Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromUri
   (
      uri : Windows.Foundation.Uri'Class
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStreamReference");
      m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamReferenceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromUri (uri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
            Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStream
   (
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Storage.Streams.RandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Storage.Streams.RandomAccessStreamReference");
      m_Factory        : access WinRt.Windows.Storage.Streams.IRandomAccessStreamReferenceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Storage.Streams.RandomAccessStreamReference do
         Hr := RoGetActivationFactory (m_hString, IID_IRandomAccessStreamReferenceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStream (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
            Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RandomAccessStreamReference

   function OpenReadAsync
   (
      this : in out RandomAccessStreamReference
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRandomAccessStreamReference.all.OpenReadAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

end;

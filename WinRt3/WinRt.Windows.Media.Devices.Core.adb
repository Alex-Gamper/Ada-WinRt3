--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Foundation.Numerics;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Perception.Spatial;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Devices.Core is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraIntrinsics

   procedure Initialize (this : in out CameraIntrinsics) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraIntrinsics) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraIntrinsics, ICameraIntrinsics_Ptr);
   begin
      if this.m_ICameraIntrinsics /= null then
         if this.m_ICameraIntrinsics.all /= null then
            RefCount := this.m_ICameraIntrinsics.all.Release;
            Free (this.m_ICameraIntrinsics);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CameraIntrinsics

   function Constructor
   (
      focalLength : Windows.Foundation.Numerics.Vector2;
      principalPoint : Windows.Foundation.Numerics.Vector2;
      radialDistortion : Windows.Foundation.Numerics.Vector3;
      tangentialDistortion : Windows.Foundation.Numerics.Vector2;
      imageWidth : WinRt.UInt32;
      imageHeight : WinRt.UInt32
   )
   return CameraIntrinsics is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.Core.CameraIntrinsics");
      m_Factory    : access ICameraIntrinsicsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.Devices.Core.ICameraIntrinsics;
   begin
      return RetVal : CameraIntrinsics do
         Hr := RoGetActivationFactory (m_hString, IID_ICameraIntrinsicsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (focalLength, principalPoint, radialDistortion, tangentialDistortion, imageWidth, imageHeight, m_ComRetVal'Access);
            Retval.m_ICameraIntrinsics := new Windows.Media.Devices.Core.ICameraIntrinsics;
            Retval.m_ICameraIntrinsics.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraIntrinsics

   function get_FocalLength
   (
      this : in out CameraIntrinsics
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_FocalLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PrincipalPoint
   (
      this : in out CameraIntrinsics
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_PrincipalPoint (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RadialDistortion
   (
      this : in out CameraIntrinsics
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_RadialDistortion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TangentialDistortion
   (
      this : in out CameraIntrinsics
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_TangentialDistortion (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImageWidth
   (
      this : in out CameraIntrinsics
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_ImageWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImageHeight
   (
      this : in out CameraIntrinsics
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICameraIntrinsics.all.get_ImageHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ProjectOntoFrame
   (
      this : in out CameraIntrinsics;
      coordinate : Windows.Foundation.Numerics.Vector3
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_ICameraIntrinsics.all.ProjectOntoFrame (coordinate, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function UnprojectAtUnitDepth
   (
      this : in out CameraIntrinsics;
      pixelCoordinate : Windows.Foundation.Point
   )
   return WinRt.Windows.Foundation.Numerics.Vector2 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector2;
   begin
      Hr := this.m_ICameraIntrinsics.all.UnprojectAtUnitDepth (pixelCoordinate, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ProjectManyOntoFrame
   (
      this : in out CameraIntrinsics;
      coordinates : Windows.Foundation.Numerics.Vector3_Array;
      results : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_coordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector3_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_ICameraIntrinsics.all.ProjectManyOntoFrame (WinRt.UInt32(coordinates'Length), Convert_coordinates (coordinates (coordinates'First)'Address), WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   procedure UnprojectPixelsAtUnitDepth
   (
      this : in out CameraIntrinsics;
      pixelCoordinates : Windows.Foundation.Point_Array;
      results : Windows.Foundation.Numerics.Vector2_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_pixelCoordinates is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector2_Ptr);
   begin
      Hr := this.m_ICameraIntrinsics.all.UnprojectPixelsAtUnitDepth (WinRt.UInt32(pixelCoordinates'Length), Convert_pixelCoordinates (pixelCoordinates (pixelCoordinates'First)'Address), WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   function get_UndistortedProjectionTransform
   (
      this : in out CameraIntrinsics
   )
   return WinRt.Windows.Foundation.Numerics.Matrix4x4 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Matrix4x4;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.ICameraIntrinsics_Interface, WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2, WinRt.Windows.Media.Devices.Core.IID_ICameraIntrinsics2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraIntrinsics.all);
      Hr := m_Interface.get_UndistortedProjectionTransform (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function DistortPoint
   (
      this : in out CameraIntrinsics;
      input : Windows.Foundation.Point
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.ICameraIntrinsics_Interface, WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2, WinRt.Windows.Media.Devices.Core.IID_ICameraIntrinsics2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraIntrinsics.all);
      Hr := m_Interface.DistortPoint (input, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure DistortPoints
   (
      this : in out CameraIntrinsics;
      inputs : Windows.Foundation.Point_Array;
      results : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.ICameraIntrinsics_Interface, WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2, WinRt.Windows.Media.Devices.Core.IID_ICameraIntrinsics2'Unchecked_Access);
      function Convert_inputs is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      m_Interface := QInterface (this.m_ICameraIntrinsics.all);
      Hr := m_Interface.DistortPoints (WinRt.UInt32(inputs'Length), Convert_inputs (inputs (inputs'First)'Address), WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   function UndistortPoint
   (
      this : in out CameraIntrinsics;
      input : Windows.Foundation.Point
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.ICameraIntrinsics_Interface, WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2, WinRt.Windows.Media.Devices.Core.IID_ICameraIntrinsics2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICameraIntrinsics.all);
      Hr := m_Interface.UndistortPoint (input, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure UndistortPoints
   (
      this : in out CameraIntrinsics;
      inputs : Windows.Foundation.Point_Array;
      results : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.ICameraIntrinsics_Interface, WinRt.Windows.Media.Devices.Core.ICameraIntrinsics2, WinRt.Windows.Media.Devices.Core.IID_ICameraIntrinsics2'Unchecked_Access);
      function Convert_inputs is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      m_Interface := QInterface (this.m_ICameraIntrinsics.all);
      Hr := m_Interface.UndistortPoints (WinRt.UInt32(inputs'Length), Convert_inputs (inputs (inputs'First)'Address), WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DepthCorrelatedCoordinateMapper

   procedure Initialize (this : in out DepthCorrelatedCoordinateMapper) is
   begin
      null;
   end;

   procedure Finalize (this : in out DepthCorrelatedCoordinateMapper) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDepthCorrelatedCoordinateMapper, IDepthCorrelatedCoordinateMapper_Ptr);
   begin
      if this.m_IDepthCorrelatedCoordinateMapper /= null then
         if this.m_IDepthCorrelatedCoordinateMapper.all /= null then
            RefCount := this.m_IDepthCorrelatedCoordinateMapper.all.Release;
            Free (this.m_IDepthCorrelatedCoordinateMapper);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DepthCorrelatedCoordinateMapper

   function UnprojectPoint
   (
      this : in out DepthCorrelatedCoordinateMapper;
      sourcePoint : Windows.Foundation.Point;
      targetCoordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class
   )
   return WinRt.Windows.Foundation.Numerics.Vector3 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Numerics.Vector3;
   begin
      Hr := this.m_IDepthCorrelatedCoordinateMapper.all.UnprojectPoint (sourcePoint, targetCoordinateSystem.m_ISpatialCoordinateSystem.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure UnprojectPoints
   (
      this : in out DepthCorrelatedCoordinateMapper;
      sourcePoints : Windows.Foundation.Point_Array;
      targetCoordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      results : Windows.Foundation.Numerics.Vector3_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_sourcePoints is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Numerics.Vector3_Ptr);
   begin
      Hr := this.m_IDepthCorrelatedCoordinateMapper.all.UnprojectPoints (WinRt.UInt32(sourcePoints'Length), Convert_sourcePoints (sourcePoints (sourcePoints'First)'Address), targetCoordinateSystem.m_ISpatialCoordinateSystem.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   function MapPoint
   (
      this : in out DepthCorrelatedCoordinateMapper;
      sourcePoint : Windows.Foundation.Point;
      targetCoordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      targetCameraIntrinsics : Windows.Media.Devices.Core.CameraIntrinsics'Class
   )
   return WinRt.Windows.Foundation.Point is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Point;
   begin
      Hr := this.m_IDepthCorrelatedCoordinateMapper.all.MapPoint (sourcePoint, targetCoordinateSystem.m_ISpatialCoordinateSystem.all, targetCameraIntrinsics.m_ICameraIntrinsics.all, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure MapPoints
   (
      this : in out DepthCorrelatedCoordinateMapper;
      sourcePoints : Windows.Foundation.Point_Array;
      targetCoordinateSystem : Windows.Perception.Spatial.SpatialCoordinateSystem'Class;
      targetCameraIntrinsics : Windows.Media.Devices.Core.CameraIntrinsics'Class;
      results : Windows.Foundation.Point_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      function Convert_sourcePoints is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
      function Convert_results is new Ada.Unchecked_Conversion (Address, WinRt.Windows.Foundation.Point_Ptr);
   begin
      Hr := this.m_IDepthCorrelatedCoordinateMapper.all.MapPoints (WinRt.UInt32(sourcePoints'Length), Convert_sourcePoints (sourcePoints (sourcePoints'First)'Address), targetCoordinateSystem.m_ISpatialCoordinateSystem.all, targetCameraIntrinsics.m_ICameraIntrinsics.all, WinRt.UInt32(results'Length), Convert_results (results (results'First)'Address));
   end;

   procedure Close
   (
      this : in out DepthCorrelatedCoordinateMapper
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.IDepthCorrelatedCoordinateMapper_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDepthCorrelatedCoordinateMapper.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameControlCapabilities

   procedure Initialize (this : in out FrameControlCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameControlCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameControlCapabilities, IFrameControlCapabilities_Ptr);
   begin
      if this.m_IFrameControlCapabilities /= null then
         if this.m_IFrameControlCapabilities.all /= null then
            RefCount := this.m_IFrameControlCapabilities.all.Release;
            Free (this.m_IFrameControlCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameControlCapabilities

   function get_Exposure
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Windows.Media.Devices.Core.FrameExposureCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameExposureCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameExposureCapabilities do
         Hr := this.m_IFrameControlCapabilities.all.get_Exposure (m_ComRetVal'Access);
         Retval.m_IFrameExposureCapabilities := new Windows.Media.Devices.Core.IFrameExposureCapabilities;
         Retval.m_IFrameExposureCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_ExposureCompensation
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Windows.Media.Devices.Core.FrameExposureCompensationCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameExposureCompensationCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameExposureCompensationCapabilities do
         Hr := this.m_IFrameControlCapabilities.all.get_ExposureCompensation (m_ComRetVal'Access);
         Retval.m_IFrameExposureCompensationCapabilities := new Windows.Media.Devices.Core.IFrameExposureCompensationCapabilities;
         Retval.m_IFrameExposureCompensationCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_IsoSpeed
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Windows.Media.Devices.Core.FrameIsoSpeedCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameIsoSpeedCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameIsoSpeedCapabilities do
         Hr := this.m_IFrameControlCapabilities.all.get_IsoSpeed (m_ComRetVal'Access);
         Retval.m_IFrameIsoSpeedCapabilities := new Windows.Media.Devices.Core.IFrameIsoSpeedCapabilities;
         Retval.m_IFrameIsoSpeedCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_Focus
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Windows.Media.Devices.Core.FrameFocusCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameFocusCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameFocusCapabilities do
         Hr := this.m_IFrameControlCapabilities.all.get_Focus (m_ComRetVal'Access);
         Retval.m_IFrameFocusCapabilities := new Windows.Media.Devices.Core.IFrameFocusCapabilities;
         Retval.m_IFrameFocusCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_PhotoConfirmationSupported
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameControlCapabilities.all.get_PhotoConfirmationSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Flash
   (
      this : in out FrameControlCapabilities
   )
   return WinRt.Windows.Media.Devices.Core.FrameFlashCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.IFrameControlCapabilities2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameFlashCapabilities;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.IFrameControlCapabilities_Interface, WinRt.Windows.Media.Devices.Core.IFrameControlCapabilities2, WinRt.Windows.Media.Devices.Core.IID_IFrameControlCapabilities2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameFlashCapabilities do
         m_Interface := QInterface (this.m_IFrameControlCapabilities.all);
         Hr := m_Interface.get_Flash (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFrameFlashCapabilities := new Windows.Media.Devices.Core.IFrameFlashCapabilities;
         Retval.m_IFrameFlashCapabilities.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameController

   procedure Initialize (this : in out FrameController) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameController, IFrameController_Ptr);
   begin
      if this.m_IFrameController /= null then
         if this.m_IFrameController.all /= null then
            RefCount := this.m_IFrameController.all.Release;
            Free (this.m_IFrameController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for FrameController

   function Constructor return FrameController is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Devices.Core.FrameController");
      m_ComRetVal  : aliased Windows.Media.Devices.Core.IFrameController;
   begin
      return RetVal : FrameController do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IFrameController := new Windows.Media.Devices.Core.IFrameController;
            Retval.m_IFrameController.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameController

   function get_ExposureControl
   (
      this : in out FrameController
   )
   return WinRt.Windows.Media.Devices.Core.FrameExposureControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameExposureControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameExposureControl do
         Hr := this.m_IFrameController.all.get_ExposureControl (m_ComRetVal'Access);
         Retval.m_IFrameExposureControl := new Windows.Media.Devices.Core.IFrameExposureControl;
         Retval.m_IFrameExposureControl.all := m_ComRetVal;
      end return;
   end;

   function get_ExposureCompensationControl
   (
      this : in out FrameController
   )
   return WinRt.Windows.Media.Devices.Core.FrameExposureCompensationControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameExposureCompensationControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameExposureCompensationControl do
         Hr := this.m_IFrameController.all.get_ExposureCompensationControl (m_ComRetVal'Access);
         Retval.m_IFrameExposureCompensationControl := new Windows.Media.Devices.Core.IFrameExposureCompensationControl;
         Retval.m_IFrameExposureCompensationControl.all := m_ComRetVal;
      end return;
   end;

   function get_IsoSpeedControl
   (
      this : in out FrameController
   )
   return WinRt.Windows.Media.Devices.Core.FrameIsoSpeedControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameIsoSpeedControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameIsoSpeedControl do
         Hr := this.m_IFrameController.all.get_IsoSpeedControl (m_ComRetVal'Access);
         Retval.m_IFrameIsoSpeedControl := new Windows.Media.Devices.Core.IFrameIsoSpeedControl;
         Retval.m_IFrameIsoSpeedControl.all := m_ComRetVal;
      end return;
   end;

   function get_FocusControl
   (
      this : in out FrameController
   )
   return WinRt.Windows.Media.Devices.Core.FrameFocusControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameFocusControl;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameFocusControl do
         Hr := this.m_IFrameController.all.get_FocusControl (m_ComRetVal'Access);
         Retval.m_IFrameFocusControl := new Windows.Media.Devices.Core.IFrameFocusControl;
         Retval.m_IFrameFocusControl.all := m_ComRetVal;
      end return;
   end;

   function get_PhotoConfirmationEnabled
   (
      this : in out FrameController
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_IFrameController.all.get_PhotoConfirmationEnabled (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_PhotoConfirmationEnabled
   (
      this : in out FrameController;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameController.all.put_PhotoConfirmationEnabled (value);
   end;

   function get_FlashControl
   (
      this : in out FrameController
   )
   return WinRt.Windows.Media.Devices.Core.FrameFlashControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Devices.Core.IFrameController2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameFlashControl;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Devices.Core.IFrameController_Interface, WinRt.Windows.Media.Devices.Core.IFrameController2, WinRt.Windows.Media.Devices.Core.IID_IFrameController2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameFlashControl do
         m_Interface := QInterface (this.m_IFrameController.all);
         Hr := m_Interface.get_FlashControl (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IFrameFlashControl := new Windows.Media.Devices.Core.IFrameFlashControl;
         Retval.m_IFrameFlashControl.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameExposureCapabilities

   procedure Initialize (this : in out FrameExposureCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameExposureCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameExposureCapabilities, IFrameExposureCapabilities_Ptr);
   begin
      if this.m_IFrameExposureCapabilities /= null then
         if this.m_IFrameExposureCapabilities.all /= null then
            RefCount := this.m_IFrameExposureCapabilities.all.Release;
            Free (this.m_IFrameExposureCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameExposureCapabilities

   function get_Supported
   (
      this : in out FrameExposureCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameExposureCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out FrameExposureCapabilities
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IFrameExposureCapabilities.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out FrameExposureCapabilities
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IFrameExposureCapabilities.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out FrameExposureCapabilities
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IFrameExposureCapabilities.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameExposureCompensationCapabilities

   procedure Initialize (this : in out FrameExposureCompensationCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameExposureCompensationCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameExposureCompensationCapabilities, IFrameExposureCompensationCapabilities_Ptr);
   begin
      if this.m_IFrameExposureCompensationCapabilities /= null then
         if this.m_IFrameExposureCompensationCapabilities.all /= null then
            RefCount := this.m_IFrameExposureCompensationCapabilities.all.Release;
            Free (this.m_IFrameExposureCompensationCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameExposureCompensationCapabilities

   function get_Supported
   (
      this : in out FrameExposureCompensationCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameExposureCompensationCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out FrameExposureCompensationCapabilities
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IFrameExposureCompensationCapabilities.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out FrameExposureCompensationCapabilities
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IFrameExposureCompensationCapabilities.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out FrameExposureCompensationCapabilities
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IFrameExposureCompensationCapabilities.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameExposureCompensationControl

   procedure Initialize (this : in out FrameExposureCompensationControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameExposureCompensationControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameExposureCompensationControl, IFrameExposureCompensationControl_Ptr);
   begin
      if this.m_IFrameExposureCompensationControl /= null then
         if this.m_IFrameExposureCompensationControl.all /= null then
            RefCount := this.m_IFrameExposureCompensationControl.all.Release;
            Free (this.m_IFrameExposureCompensationControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameExposureCompensationControl

   function get_Value
   (
      this : in out FrameExposureCompensationControl
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_IFrameExposureCompensationControl.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Value
   (
      this : in out FrameExposureCompensationControl;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameExposureCompensationControl.all.put_Value (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameExposureControl

   procedure Initialize (this : in out FrameExposureControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameExposureControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameExposureControl, IFrameExposureControl_Ptr);
   begin
      if this.m_IFrameExposureControl /= null then
         if this.m_IFrameExposureControl.all /= null then
            RefCount := this.m_IFrameExposureControl.all.Release;
            Free (this.m_IFrameExposureControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameExposureControl

   function get_Auto
   (
      this : in out FrameExposureControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameExposureControl.all.get_Auto (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Auto
   (
      this : in out FrameExposureControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameExposureControl.all.put_Auto (value);
   end;

   function get_Value
   (
      this : in out FrameExposureControl
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IFrameExposureControl.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Value
   (
      this : in out FrameExposureControl;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameExposureControl.all.put_Value (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameFlashCapabilities

   procedure Initialize (this : in out FrameFlashCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameFlashCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameFlashCapabilities, IFrameFlashCapabilities_Ptr);
   begin
      if this.m_IFrameFlashCapabilities /= null then
         if this.m_IFrameFlashCapabilities.all /= null then
            RefCount := this.m_IFrameFlashCapabilities.all.Release;
            Free (this.m_IFrameFlashCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameFlashCapabilities

   function get_Supported
   (
      this : in out FrameFlashCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFlashCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RedEyeReductionSupported
   (
      this : in out FrameFlashCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFlashCapabilities.all.get_RedEyeReductionSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PowerSupported
   (
      this : in out FrameFlashCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFlashCapabilities.all.get_PowerSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameFlashControl

   procedure Initialize (this : in out FrameFlashControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameFlashControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameFlashControl, IFrameFlashControl_Ptr);
   begin
      if this.m_IFrameFlashControl /= null then
         if this.m_IFrameFlashControl.all /= null then
            RefCount := this.m_IFrameFlashControl.all.Release;
            Free (this.m_IFrameFlashControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameFlashControl

   function get_Mode
   (
      this : in out FrameFlashControl
   )
   return WinRt.Windows.Media.Devices.Core.FrameFlashMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.FrameFlashMode;
   begin
      Hr := this.m_IFrameFlashControl.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out FrameFlashControl;
      value : Windows.Media.Devices.Core.FrameFlashMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameFlashControl.all.put_Mode (value);
   end;

   function get_Auto
   (
      this : in out FrameFlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFlashControl.all.get_Auto (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Auto
   (
      this : in out FrameFlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameFlashControl.all.put_Auto (value);
   end;

   function get_RedEyeReduction
   (
      this : in out FrameFlashControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFlashControl.all.get_RedEyeReduction (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RedEyeReduction
   (
      this : in out FrameFlashControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameFlashControl.all.put_RedEyeReduction (value);
   end;

   function get_PowerPercent
   (
      this : in out FrameFlashControl
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IFrameFlashControl.all.get_PowerPercent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PowerPercent
   (
      this : in out FrameFlashControl;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameFlashControl.all.put_PowerPercent (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameFocusCapabilities

   procedure Initialize (this : in out FrameFocusCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameFocusCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameFocusCapabilities, IFrameFocusCapabilities_Ptr);
   begin
      if this.m_IFrameFocusCapabilities /= null then
         if this.m_IFrameFocusCapabilities.all /= null then
            RefCount := this.m_IFrameFocusCapabilities.all.Release;
            Free (this.m_IFrameFocusCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameFocusCapabilities

   function get_Supported
   (
      this : in out FrameFocusCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameFocusCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out FrameFocusCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameFocusCapabilities.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out FrameFocusCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameFocusCapabilities.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out FrameFocusCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameFocusCapabilities.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameFocusControl

   procedure Initialize (this : in out FrameFocusControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameFocusControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameFocusControl, IFrameFocusControl_Ptr);
   begin
      if this.m_IFrameFocusControl /= null then
         if this.m_IFrameFocusControl.all /= null then
            RefCount := this.m_IFrameFocusControl.all.Release;
            Free (this.m_IFrameFocusControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameFocusControl

   function get_Value
   (
      this : in out FrameFocusControl
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IFrameFocusControl.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Value
   (
      this : in out FrameFocusControl;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameFocusControl.all.put_Value (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameIsoSpeedCapabilities

   procedure Initialize (this : in out FrameIsoSpeedCapabilities) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameIsoSpeedCapabilities) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameIsoSpeedCapabilities, IFrameIsoSpeedCapabilities_Ptr);
   begin
      if this.m_IFrameIsoSpeedCapabilities /= null then
         if this.m_IFrameIsoSpeedCapabilities.all /= null then
            RefCount := this.m_IFrameIsoSpeedCapabilities.all.Release;
            Free (this.m_IFrameIsoSpeedCapabilities);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameIsoSpeedCapabilities

   function get_Supported
   (
      this : in out FrameIsoSpeedCapabilities
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameIsoSpeedCapabilities.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Min
   (
      this : in out FrameIsoSpeedCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameIsoSpeedCapabilities.all.get_Min (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Max
   (
      this : in out FrameIsoSpeedCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameIsoSpeedCapabilities.all.get_Max (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Step
   (
      this : in out FrameIsoSpeedCapabilities
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IFrameIsoSpeedCapabilities.all.get_Step (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FrameIsoSpeedControl

   procedure Initialize (this : in out FrameIsoSpeedControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out FrameIsoSpeedControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFrameIsoSpeedControl, IFrameIsoSpeedControl_Ptr);
   begin
      if this.m_IFrameIsoSpeedControl /= null then
         if this.m_IFrameIsoSpeedControl.all /= null then
            RefCount := this.m_IFrameIsoSpeedControl.all.Release;
            Free (this.m_IFrameIsoSpeedControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FrameIsoSpeedControl

   function get_Auto
   (
      this : in out FrameIsoSpeedControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IFrameIsoSpeedControl.all.get_Auto (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Auto
   (
      this : in out FrameIsoSpeedControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameIsoSpeedControl.all.put_Auto (value);
   end;

   function get_Value
   (
      this : in out FrameIsoSpeedControl
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IFrameIsoSpeedControl.all.get_Value (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Value
   (
      this : in out FrameIsoSpeedControl;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IFrameIsoSpeedControl.all.put_Value (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VariablePhotoSequenceController

   procedure Initialize (this : in out VariablePhotoSequenceController) is
   begin
      null;
   end;

   procedure Finalize (this : in out VariablePhotoSequenceController) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVariablePhotoSequenceController, IVariablePhotoSequenceController_Ptr);
   begin
      if this.m_IVariablePhotoSequenceController /= null then
         if this.m_IVariablePhotoSequenceController.all /= null then
            RefCount := this.m_IVariablePhotoSequenceController.all.Release;
            Free (this.m_IVariablePhotoSequenceController);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VariablePhotoSequenceController

   function get_Supported
   (
      this : in out VariablePhotoSequenceController
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IVariablePhotoSequenceController.all.get_Supported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPhotosPerSecond
   (
      this : in out VariablePhotoSequenceController
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IVariablePhotoSequenceController.all.get_MaxPhotosPerSecond (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhotosPerSecondLimit
   (
      this : in out VariablePhotoSequenceController
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_IVariablePhotoSequenceController.all.get_PhotosPerSecondLimit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PhotosPerSecondLimit
   (
      this : in out VariablePhotoSequenceController;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVariablePhotoSequenceController.all.put_PhotosPerSecondLimit (value);
   end;

   function GetHighestConcurrentFrameRate
   (
      this : in out VariablePhotoSequenceController;
      captureProperties : Windows.Media.MediaProperties.IMediaEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_IVariablePhotoSequenceController.all.GetHighestConcurrentFrameRate (captureProperties, m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function GetCurrentFrameRate
   (
      this : in out VariablePhotoSequenceController
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_IVariablePhotoSequenceController.all.GetCurrentFrameRate (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_FrameCapabilities
   (
      this : in out VariablePhotoSequenceController
   )
   return WinRt.Windows.Media.Devices.Core.FrameControlCapabilities'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.Core.IFrameControlCapabilities;
   begin
      return RetVal : WinRt.Windows.Media.Devices.Core.FrameControlCapabilities do
         Hr := this.m_IVariablePhotoSequenceController.all.get_FrameCapabilities (m_ComRetVal'Access);
         Retval.m_IFrameControlCapabilities := new Windows.Media.Devices.Core.IFrameControlCapabilities;
         Retval.m_IFrameControlCapabilities.all := m_ComRetVal;
      end return;
   end;

   function get_DesiredFrameControllers
   (
      this : in out VariablePhotoSequenceController
   )
   return IVector_IFrameController.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_IFrameController.Kind;
   begin
      Hr := this.m_IVariablePhotoSequenceController.all.get_DesiredFrameControllers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_IFrameController (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

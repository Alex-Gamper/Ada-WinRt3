--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.ExchangeActiveSyncProvisioning is

   package IAsyncOperation_EasComplianceResults is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults);
   package AsyncOperationCompletedHandler_EasComplianceResults is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasClientDeviceInformation

   procedure Initialize (this : in out EasClientDeviceInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out EasClientDeviceInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEasClientDeviceInformation, IEasClientDeviceInformation_Ptr);
   begin
      if this.m_IEasClientDeviceInformation /= null then
         if this.m_IEasClientDeviceInformation.all /= null then
            RefCount := this.m_IEasClientDeviceInformation.all.Release;
            Free (this.m_IEasClientDeviceInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EasClientDeviceInformation

   function Constructor return EasClientDeviceInformation is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation");
      m_ComRetVal  : aliased Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation;
   begin
      return RetVal : EasClientDeviceInformation do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IEasClientDeviceInformation := new Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation;
            Retval.m_IEasClientDeviceInformation.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasClientDeviceInformation

   function get_Id
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.Guid is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Guid;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OperatingSystem
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_OperatingSystem (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_FriendlyName
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SystemManufacturer
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_SystemManufacturer (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SystemProductName
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_SystemProductName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SystemSku
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEasClientDeviceInformation.all.get_SystemSku (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SystemHardwareVersion
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation_Interface, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation2, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IID_IEasClientDeviceInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEasClientDeviceInformation.all);
      Hr := m_Interface.get_SystemHardwareVersion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SystemFirmwareVersion
   (
      this : in out EasClientDeviceInformation
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation_Interface, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation2, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IID_IEasClientDeviceInformation2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEasClientDeviceInformation.all);
      Hr := m_Interface.get_SystemFirmwareVersion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasClientSecurityPolicy

   procedure Initialize (this : in out EasClientSecurityPolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out EasClientSecurityPolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEasClientSecurityPolicy, IEasClientSecurityPolicy_Ptr);
   begin
      if this.m_IEasClientSecurityPolicy /= null then
         if this.m_IEasClientSecurityPolicy.all /= null then
            RefCount := this.m_IEasClientSecurityPolicy.all.Release;
            Free (this.m_IEasClientSecurityPolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for EasClientSecurityPolicy

   function Constructor return EasClientSecurityPolicy is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy");
      m_ComRetVal  : aliased Windows.Security.ExchangeActiveSyncProvisioning.IEasClientSecurityPolicy;
   begin
      return RetVal : EasClientSecurityPolicy do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IEasClientSecurityPolicy := new Windows.Security.ExchangeActiveSyncProvisioning.IEasClientSecurityPolicy;
            Retval.m_IEasClientSecurityPolicy.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasClientSecurityPolicy

   function get_RequireEncryption
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_RequireEncryption (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequireEncryption
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_RequireEncryption (value);
   end;

   function get_MinPasswordLength
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_MinPasswordLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinPasswordLength
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_MinPasswordLength (value);
   end;

   function get_DisallowConvenienceLogon
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_DisallowConvenienceLogon (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DisallowConvenienceLogon
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_DisallowConvenienceLogon (value);
   end;

   function get_MinPasswordComplexCharacters
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_MinPasswordComplexCharacters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MinPasswordComplexCharacters
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_MinPasswordComplexCharacters (value);
   end;

   function get_PasswordExpiration
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_PasswordExpiration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PasswordExpiration
   (
      this : in out EasClientSecurityPolicy;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_PasswordExpiration (value);
   end;

   function get_PasswordHistory
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_PasswordHistory (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PasswordHistory
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_PasswordHistory (value);
   end;

   function get_MaxPasswordFailedAttempts
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Byte is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Byte;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_MaxPasswordFailedAttempts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxPasswordFailedAttempts
   (
      this : in out EasClientSecurityPolicy;
      value : WinRt.Byte
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_MaxPasswordFailedAttempts (value);
   end;

   function get_MaxInactivityTimeLock
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.get_MaxInactivityTimeLock (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxInactivityTimeLock
   (
      this : in out EasClientSecurityPolicy;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEasClientSecurityPolicy.all.put_MaxInactivityTimeLock (value);
   end;

   function CheckCompliance
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults;
   begin
      return RetVal : WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults do
         Hr := this.m_IEasClientSecurityPolicy.all.CheckCompliance (m_ComRetVal'Access);
         Retval.m_IEasComplianceResults := new Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults;
         Retval.m_IEasComplianceResults.all := m_ComRetVal;
      end return;
   end;

   function ApplyAsync
   (
      this : in out EasClientSecurityPolicy
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_EasComplianceResults.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_EasComplianceResults.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults;
      m_IID            : aliased WinRt.IID := (4231689018, 32237, 24210, (165, 105, 180, 51, 137, 238, 136, 39 )); -- Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults;
      m_HandlerIID     : aliased WinRt.IID := (614732570, 60721, 24319, (151, 46, 117, 11, 149, 100, 4, 208 ));
      m_Handler        : AsyncOperationCompletedHandler_EasComplianceResults.Kind := new AsyncOperationCompletedHandler_EasComplianceResults.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_EasComplianceResults.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_EasComplianceResults.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_EasComplianceResults.Kind_Delegate, AsyncOperationCompletedHandler_EasComplianceResults.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults do
         Hr := this.m_IEasClientSecurityPolicy.all.ApplyAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IEasComplianceResults := new Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults;
                  Retval.m_IEasComplianceResults.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EasComplianceResults

   procedure Initialize (this : in out EasComplianceResults) is
   begin
      null;
   end;

   procedure Finalize (this : in out EasComplianceResults) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEasComplianceResults, IEasComplianceResults_Ptr);
   begin
      if this.m_IEasComplianceResults /= null then
         if this.m_IEasComplianceResults.all /= null then
            RefCount := this.m_IEasComplianceResults.all.Release;
            Free (this.m_IEasComplianceResults);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EasComplianceResults

   function get_Compliant
   (
      this : in out EasComplianceResults
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEasComplianceResults.all.get_Compliant (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RequireEncryptionResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_RequireEncryptionResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinPasswordLengthResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_MinPasswordLengthResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisallowConvenienceLogonResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_DisallowConvenienceLogonResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinPasswordComplexCharactersResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_MinPasswordComplexCharactersResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PasswordExpirationResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_PasswordExpirationResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PasswordHistoryResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_PasswordHistoryResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxPasswordFailedAttemptsResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_MaxPasswordFailedAttemptsResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxInactivityTimeLockResult
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult;
   begin
      Hr := this.m_IEasComplianceResults.all.get_MaxInactivityTimeLockResult (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EncryptionProviderType
   (
      this : in out EasComplianceResults
   )
   return WinRt.Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults_Interface, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IEasComplianceResults2, WinRt.Windows.Security.ExchangeActiveSyncProvisioning.IID_IEasComplianceResults2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IEasComplianceResults.all);
      Hr := m_Interface.get_EncryptionProviderType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Globalization;
with WinRt.Windows.Graphics.Imaging;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Ocr is

   package IAsyncOperation_OcrResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Ocr.IOcrResult);
   package AsyncOperationCompletedHandler_OcrResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Ocr.IOcrResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OcrEngine

   procedure Initialize (this : in out OcrEngine) is
   begin
      null;
   end;

   procedure Finalize (this : in out OcrEngine) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOcrEngine, IOcrEngine_Ptr);
   begin
      if this.m_IOcrEngine /= null then
         if this.m_IOcrEngine.all /= null then
            RefCount := this.m_IOcrEngine.all.Release;
            Free (this.m_IOcrEngine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for OcrEngine

   function get_MaxImageDimension
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Ocr.OcrEngine");
      m_Factory        : access WinRt.Windows.Media.Ocr.IOcrEngineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IOcrEngineStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_MaxImageDimension (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function get_AvailableRecognizerLanguages
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Ocr.OcrEngine");
      m_Factory        : access WinRt.Windows.Media.Ocr.IOcrEngineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IOcrEngineStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AvailableRecognizerLanguages (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function IsLanguageSupported
   (
      language : Windows.Globalization.Language'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Ocr.OcrEngine");
      m_Factory        : access WinRt.Windows.Media.Ocr.IOcrEngineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IOcrEngineStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsLanguageSupported (language.m_ILanguage.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   function TryCreateFromLanguage
   (
      language : Windows.Globalization.Language'Class
   )
   return WinRt.Windows.Media.Ocr.OcrEngine is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Ocr.OcrEngine");
      m_Factory        : access WinRt.Windows.Media.Ocr.IOcrEngineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Ocr.IOcrEngine;
   begin
      return RetVal : WinRt.Windows.Media.Ocr.OcrEngine do
         Hr := RoGetActivationFactory (m_hString, IID_IOcrEngineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateFromLanguage (language.m_ILanguage.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IOcrEngine := new Windows.Media.Ocr.IOcrEngine;
            Retval.m_IOcrEngine.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function TryCreateFromUserProfileLanguages
   return WinRt.Windows.Media.Ocr.OcrEngine is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Ocr.OcrEngine");
      m_Factory        : access WinRt.Windows.Media.Ocr.IOcrEngineStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Ocr.IOcrEngine;
   begin
      return RetVal : WinRt.Windows.Media.Ocr.OcrEngine do
         Hr := RoGetActivationFactory (m_hString, IID_IOcrEngineStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryCreateFromUserProfileLanguages (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IOcrEngine := new Windows.Media.Ocr.IOcrEngine;
            Retval.m_IOcrEngine.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OcrEngine

   function RecognizeAsync
   (
      this : in out OcrEngine;
      bitmap : Windows.Graphics.Imaging.SoftwareBitmap'Class
   )
   return WinRt.Windows.Media.Ocr.OcrResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_OcrResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_OcrResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Ocr.IOcrResult;
      m_IID            : aliased WinRt.IID := (3352760718, 44598, 22976, (172, 118, 123, 173, 238, 113, 28, 139 )); -- Windows.Media.Ocr.OcrResult;
      m_HandlerIID     : aliased WinRt.IID := (2560365425, 17482, 24190, (177, 151, 158, 170, 249, 210, 130, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_OcrResult.Kind := new AsyncOperationCompletedHandler_OcrResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_OcrResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_OcrResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_OcrResult.Kind_Delegate, AsyncOperationCompletedHandler_OcrResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Ocr.OcrResult do
         Hr := this.m_IOcrEngine.all.RecognizeAsync (bitmap.m_ISoftwareBitmap.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IOcrResult := new Windows.Media.Ocr.IOcrResult;
                  Retval.m_IOcrResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_RecognizerLanguage
   (
      this : in out OcrEngine
   )
   return WinRt.Windows.Globalization.Language'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Globalization.ILanguage;
   begin
      return RetVal : WinRt.Windows.Globalization.Language do
         Hr := this.m_IOcrEngine.all.get_RecognizerLanguage (m_ComRetVal'Access);
         Retval.m_ILanguage := new Windows.Globalization.ILanguage;
         Retval.m_ILanguage.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OcrLine

   procedure Initialize (this : in out OcrLine) is
   begin
      null;
   end;

   procedure Finalize (this : in out OcrLine) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOcrLine, IOcrLine_Ptr);
   begin
      if this.m_IOcrLine /= null then
         if this.m_IOcrLine.all /= null then
            RefCount := this.m_IOcrLine.all.Release;
            Free (this.m_IOcrLine);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OcrLine

   function get_Words
   (
      this : in out OcrLine
   )
   return IVectorView_IOcrWord.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IOcrWord.Kind;
   begin
      Hr := this.m_IOcrLine.all.get_Words (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IOcrWord (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Text
   (
      this : in out OcrLine
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOcrLine.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OcrResult

   procedure Initialize (this : in out OcrResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out OcrResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOcrResult, IOcrResult_Ptr);
   begin
      if this.m_IOcrResult /= null then
         if this.m_IOcrResult.all /= null then
            RefCount := this.m_IOcrResult.all.Release;
            Free (this.m_IOcrResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OcrResult

   function get_Lines
   (
      this : in out OcrResult
   )
   return IVectorView_IOcrLine.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IOcrLine.Kind;
   begin
      Hr := this.m_IOcrResult.all.get_Lines (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IOcrLine (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TextAngle
   (
      this : in out OcrResult
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
   begin
      Hr := this.m_IOcrResult.all.get_TextAngle (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Text
   (
      this : in out OcrResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOcrResult.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OcrWord

   procedure Initialize (this : in out OcrWord) is
   begin
      null;
   end;

   procedure Finalize (this : in out OcrWord) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOcrWord, IOcrWord_Ptr);
   begin
      if this.m_IOcrWord /= null then
         if this.m_IOcrWord.all /= null then
            RefCount := this.m_IOcrWord.all.Release;
            Free (this.m_IOcrWord);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OcrWord

   function get_BoundingRect
   (
      this : in out OcrWord
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
   begin
      Hr := this.m_IOcrWord.all.get_BoundingRect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Text
   (
      this : in out OcrWord
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IOcrWord.all.get_Text (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

end;

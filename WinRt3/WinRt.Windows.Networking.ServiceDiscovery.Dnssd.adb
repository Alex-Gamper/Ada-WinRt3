--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Connectivity;
with WinRt.Windows.Networking.Sockets;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Networking.ServiceDiscovery.Dnssd is

   package IAsyncOperation_DnssdRegistrationResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult);
   package AsyncOperationCompletedHandler_DnssdRegistrationResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult);

   package IVectorView_IDnssdServiceInstance is new WinRt.Windows.Foundation.Collections.IVectorView (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance);
   package IIterable_IDnssdServiceInstance is new WinRt.Windows.Foundation.Collections.IIterable (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DnssdRegistrationResult

   procedure Initialize (this : in out DnssdRegistrationResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out DnssdRegistrationResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDnssdRegistrationResult, IDnssdRegistrationResult_Ptr);
   begin
      if this.m_IDnssdRegistrationResult /= null then
         if this.m_IDnssdRegistrationResult.all /= null then
            RefCount := this.m_IDnssdRegistrationResult.all.Release;
            Free (this.m_IDnssdRegistrationResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DnssdRegistrationResult

   function Constructor return DnssdRegistrationResult is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult");
      m_ComRetVal  : aliased Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
   begin
      return RetVal : DnssdRegistrationResult do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDnssdRegistrationResult := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
            Retval.m_IDnssdRegistrationResult.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DnssdRegistrationResult

   function get_Status
   (
      this : in out DnssdRegistrationResult
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus;
   begin
      Hr := this.m_IDnssdRegistrationResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IPAddress
   (
      this : in out DnssdRegistrationResult
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDnssdRegistrationResult.all.get_IPAddress (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   function get_HasInstanceNameChanged
   (
      this : in out DnssdRegistrationResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IDnssdRegistrationResult.all.get_HasInstanceNameChanged (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ToString
   (
      this : in out DnssdRegistrationResult
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDnssdRegistrationResult.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DnssdServiceInstance

   procedure Initialize (this : in out DnssdServiceInstance) is
   begin
      null;
   end;

   procedure Finalize (this : in out DnssdServiceInstance) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDnssdServiceInstance, IDnssdServiceInstance_Ptr);
   begin
      if this.m_IDnssdServiceInstance /= null then
         if this.m_IDnssdServiceInstance.all /= null then
            RefCount := this.m_IDnssdServiceInstance.all.Release;
            Free (this.m_IDnssdServiceInstance);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DnssdServiceInstance

   function Constructor
   (
      dnssdServiceInstanceName : WinRt.WString;
      hostName : Windows.Networking.HostName'Class;
      port : WinRt.UInt16
   )
   return DnssdServiceInstance is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance");
      m_Factory    : access IDnssdServiceInstanceFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance;
      HStr_dnssdServiceInstanceName : WinRt.HString := To_HString (dnssdServiceInstanceName);
   begin
      return RetVal : DnssdServiceInstance do
         Hr := RoGetActivationFactory (m_hString, IID_IDnssdServiceInstanceFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_dnssdServiceInstanceName, hostName.m_IHostName.all, port, m_ComRetVal'Access);
            Retval.m_IDnssdServiceInstance := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance;
            Retval.m_IDnssdServiceInstance.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_dnssdServiceInstanceName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DnssdServiceInstance

   function get_DnssdServiceInstanceName
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDnssdServiceInstance.all.get_DnssdServiceInstanceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DnssdServiceInstanceName
   (
      this : in out DnssdServiceInstance;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IDnssdServiceInstance.all.put_DnssdServiceInstanceName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_HostName
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.Windows.Networking.HostName'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.IHostName;
   begin
      return RetVal : WinRt.Windows.Networking.HostName do
         Hr := this.m_IDnssdServiceInstance.all.get_HostName (m_ComRetVal'Access);
         Retval.m_IHostName := new Windows.Networking.IHostName;
         Retval.m_IHostName.all := m_ComRetVal;
      end return;
   end;

   procedure put_HostName
   (
      this : in out DnssdServiceInstance;
      value : Windows.Networking.HostName'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceInstance.all.put_HostName (value.m_IHostName.all);
   end;

   function get_Port
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IDnssdServiceInstance.all.get_Port (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Port
   (
      this : in out DnssdServiceInstance;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceInstance.all.put_Port (value);
   end;

   function get_Priority
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IDnssdServiceInstance.all.get_Priority (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Priority
   (
      this : in out DnssdServiceInstance;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceInstance.all.put_Priority (value);
   end;

   function get_Weight
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IDnssdServiceInstance.all.get_Weight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Weight
   (
      this : in out DnssdServiceInstance;
      value : WinRt.UInt16
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceInstance.all.put_Weight (value);
   end;

   function get_TextAttributes
   (
      this : in out DnssdServiceInstance
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IDnssdServiceInstance.all.get_TextAttributes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function RegisterStreamSocketListenerAsync
   (
      this : in out DnssdServiceInstance;
      socket : Windows.Networking.Sockets.StreamSocketListener'Class
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DnssdRegistrationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DnssdRegistrationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
      m_IID            : aliased WinRt.IID := (203759219, 21193, 20518, (168, 117, 246, 133, 165, 12, 191, 253 )); -- Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult;
      m_HandlerIID     : aliased WinRt.IID := (4083363666, 35146, 21317, (155, 230, 131, 137, 117, 28, 81, 137 ));
      m_Handler        : AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind := new AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DnssdRegistrationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate, AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult do
         Hr := this.m_IDnssdServiceInstance.all.RegisterStreamSocketListenerAsync (socket.m_IStreamSocketListener.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDnssdRegistrationResult := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
                  Retval.m_IDnssdRegistrationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterStreamSocketListenerAsync
   (
      this : in out DnssdServiceInstance;
      socket : Windows.Networking.Sockets.StreamSocketListener'Class;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DnssdRegistrationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DnssdRegistrationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
      m_IID            : aliased WinRt.IID := (203759219, 21193, 20518, (168, 117, 246, 133, 165, 12, 191, 253 )); -- Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult;
      m_HandlerIID     : aliased WinRt.IID := (4083363666, 35146, 21317, (155, 230, 131, 137, 117, 28, 81, 137 ));
      m_Handler        : AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind := new AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DnssdRegistrationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate, AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult do
         Hr := this.m_IDnssdServiceInstance.all.RegisterStreamSocketListenerAsync (socket.m_IStreamSocketListener.all, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDnssdRegistrationResult := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
                  Retval.m_IDnssdRegistrationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterDatagramSocketAsync
   (
      this : in out DnssdServiceInstance;
      socket : Windows.Networking.Sockets.DatagramSocket'Class
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DnssdRegistrationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DnssdRegistrationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
      m_IID            : aliased WinRt.IID := (203759219, 21193, 20518, (168, 117, 246, 133, 165, 12, 191, 253 )); -- Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult;
      m_HandlerIID     : aliased WinRt.IID := (4083363666, 35146, 21317, (155, 230, 131, 137, 117, 28, 81, 137 ));
      m_Handler        : AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind := new AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DnssdRegistrationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate, AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult do
         Hr := this.m_IDnssdServiceInstance.all.RegisterDatagramSocketAsync (socket.m_IDatagramSocket.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDnssdRegistrationResult := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
                  Retval.m_IDnssdRegistrationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function RegisterDatagramSocketAsync
   (
      this : in out DnssdServiceInstance;
      socket : Windows.Networking.Sockets.DatagramSocket'Class;
      adapter : Windows.Networking.Connectivity.NetworkAdapter'Class
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DnssdRegistrationResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DnssdRegistrationResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
      m_IID            : aliased WinRt.IID := (203759219, 21193, 20518, (168, 117, 246, 133, 165, 12, 191, 253 )); -- Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult;
      m_HandlerIID     : aliased WinRt.IID := (4083363666, 35146, 21317, (155, 230, 131, 137, 117, 28, 81, 137 ));
      m_Handler        : AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind := new AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DnssdRegistrationResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind_Delegate, AsyncOperationCompletedHandler_DnssdRegistrationResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult do
         Hr := this.m_IDnssdServiceInstance.all.RegisterDatagramSocketAsync (socket.m_IDatagramSocket.all, adapter.m_INetworkAdapter.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDnssdRegistrationResult := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
                  Retval.m_IDnssdRegistrationResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ToString
   (
      this : in out DnssdServiceInstance
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IStringable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance_Interface, WinRt.Windows.Foundation.IStringable, WinRt.Windows.Foundation.IID_IStringable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDnssdServiceInstance.all);
      Hr := m_Interface.ToString (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DnssdServiceInstanceCollection

   procedure Initialize (this : in out DnssdServiceInstanceCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out DnssdServiceInstanceCollection) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DnssdServiceInstanceCollection

   -- Generic Interface Windows.Foundation.Collections.IVectorView`1<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>
   function GetAt
   (
      this : in out DnssdServiceInstanceCollection;
      index : WinRt.UInt32
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDnssdServiceInstance.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance;
      m_GenericIID     : aliased WinRt.IID := (4150261802, 32272, 23798, (128, 100, 106, 229, 133, 224, 189, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDnssdServiceInstance.Kind, m_GenericIID'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance do
         m_Interface := QInterface (this.m_GenericObject.all);
         Hr := m_Interface.GetAt (index, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IDnssdServiceInstance := new Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance;
         Retval.m_IDnssdServiceInstance.all := m_ComRetVal;
      end return;
   end;

   function get_Size
   (
      this : in out DnssdServiceInstanceCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDnssdServiceInstance.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4150261802, 32272, 23798, (128, 100, 106, 229, 133, 224, 189, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDnssdServiceInstance.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IndexOf
   (
      this : in out DnssdServiceInstanceCollection;
      value : Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance'Class;
      index : WinRt.UInt32_Ptr
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDnssdServiceInstance.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (4150261802, 32272, 23798, (128, 100, 106, 229, 133, 224, 189, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDnssdServiceInstance.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.IndexOf (value.m_IDnssdServiceInstance.all, index, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetMany
   (
      this : in out DnssdServiceInstanceCollection;
      startIndex : WinRt.UInt32;
      items : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance_Array
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IVectorView_IDnssdServiceInstance.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (4150261802, 32272, 23798, (128, 100, 106, 229, 133, 224, 189, 141 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IVectorView_IDnssdServiceInstance.Kind, m_GenericIID'Unchecked_Access);
      function Convert_items is new Ada.Unchecked_Conversion (Address, WinRt.GenericObject_Ptr);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetMany (startIndex, WinRt.UInt32(items'Length), Convert_items (items (items'First)'Address), m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -- Generic Interface Windows.Foundation.Collections.IIterable`1<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>
   function First
   (
      this : in out DnssdServiceInstanceCollection
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IIterable_IDnssdServiceInstance.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (501457893, 14462, 21288, (184, 100, 63, 14, 52, 117, 211, 67 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IIterable_IDnssdServiceInstance.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.First (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DnssdServiceWatcher

   procedure Initialize (this : in out DnssdServiceWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out DnssdServiceWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDnssdServiceWatcher, IDnssdServiceWatcher_Ptr);
   begin
      if this.m_IDnssdServiceWatcher /= null then
         if this.m_IDnssdServiceWatcher.all /= null then
            RefCount := this.m_IDnssdServiceWatcher.all.Release;
            Free (this.m_IDnssdServiceWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DnssdServiceWatcher

   function add_Added
   (
      this : in out DnssdServiceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.add_Added (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Added
   (
      this : in out DnssdServiceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.remove_Added (token);
   end;

   function add_EnumerationCompleted
   (
      this : in out DnssdServiceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.add_EnumerationCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EnumerationCompleted
   (
      this : in out DnssdServiceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.remove_EnumerationCompleted (token);
   end;

   function add_Stopped
   (
      this : in out DnssdServiceWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.add_Stopped (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Stopped
   (
      this : in out DnssdServiceWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.remove_Stopped (token);
   end;

   function get_Status
   (
      this : in out DnssdServiceWatcher
   )
   return WinRt.Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out DnssdServiceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out DnssdServiceWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDnssdServiceWatcher.all.Stop;
   end;

end;

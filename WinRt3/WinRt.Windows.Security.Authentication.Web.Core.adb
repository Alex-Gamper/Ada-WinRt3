--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Security.Authentication.Web.Core is

   package IAsyncOperation_FindAllAccountsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Web.Core.IFindAllAccountsResult);
   package AsyncOperationCompletedHandler_FindAllAccountsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Web.Core.IFindAllAccountsResult);

   package IAsyncOperation_WebAccountProvider is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IWebAccountProvider);
   package AsyncOperationCompletedHandler_WebAccountProvider is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IWebAccountProvider);

   package IAsyncOperation_WebTokenRequestResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult);
   package AsyncOperationCompletedHandler_WebTokenRequestResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult);

   package IAsyncOperation_WebAccount is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Security.Credentials.IWebAccount);
   package AsyncOperationCompletedHandler_WebAccount is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Security.Credentials.IWebAccount);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for FindAllAccountsResult

   procedure Initialize (this : in out FindAllAccountsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out FindAllAccountsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IFindAllAccountsResult, IFindAllAccountsResult_Ptr);
   begin
      if this.m_IFindAllAccountsResult /= null then
         if this.m_IFindAllAccountsResult.all /= null then
            RefCount := this.m_IFindAllAccountsResult.all.Release;
            Free (this.m_IFindAllAccountsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for FindAllAccountsResult

   function get_Accounts
   (
      this : in out FindAllAccountsResult
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IFindAllAccountsResult.all.get_Accounts (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Status
   (
      this : in out FindAllAccountsResult
   )
   return WinRt.Windows.Security.Authentication.Web.Core.FindAllWebAccountsStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.FindAllWebAccountsStatus;
   begin
      Hr := this.m_IFindAllAccountsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProviderError
   (
      this : in out FindAllAccountsResult
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebProviderError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebProviderError;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebProviderError do
         Hr := this.m_IFindAllAccountsResult.all.get_ProviderError (m_ComRetVal'Access);
         Retval.m_IWebProviderError := new Windows.Security.Authentication.Web.Core.IWebProviderError;
         Retval.m_IWebProviderError.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountEventArgs

   procedure Initialize (this : in out WebAccountEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountEventArgs, IWebAccountEventArgs_Ptr);
   begin
      if this.m_IWebAccountEventArgs /= null then
         if this.m_IWebAccountEventArgs.all /= null then
            RefCount := this.m_IWebAccountEventArgs.all.Release;
            Free (this.m_IWebAccountEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountEventArgs

   function get_Account
   (
      this : in out WebAccountEventArgs
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebAccountEventArgs.all.get_Account (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebAccountMonitor

   procedure Initialize (this : in out WebAccountMonitor) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebAccountMonitor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebAccountMonitor, IWebAccountMonitor_Ptr);
   begin
      if this.m_IWebAccountMonitor /= null then
         if this.m_IWebAccountMonitor.all /= null then
            RefCount := this.m_IWebAccountMonitor.all.Release;
            Free (this.m_IWebAccountMonitor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebAccountMonitor

   function add_Updated
   (
      this : in out WebAccountMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebAccountMonitor.all.add_Updated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Updated
   (
      this : in out WebAccountMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountMonitor.all.remove_Updated (token);
   end;

   function add_Removed
   (
      this : in out WebAccountMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebAccountMonitor.all.add_Removed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Removed
   (
      this : in out WebAccountMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountMonitor.all.remove_Removed (token);
   end;

   function add_DefaultSignInAccountChanged
   (
      this : in out WebAccountMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWebAccountMonitor.all.add_DefaultSignInAccountChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DefaultSignInAccountChanged
   (
      this : in out WebAccountMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWebAccountMonitor.all.remove_DefaultSignInAccountChanged (token);
   end;

   function add_AccountPictureUpdated
   (
      this : in out WebAccountMonitor;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor_Interface, WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor2, WinRt.Windows.Security.Authentication.Web.Core.IID_IWebAccountMonitor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountMonitor.all);
      Hr := m_Interface.add_AccountPictureUpdated (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_AccountPictureUpdated
   (
      this : in out WebAccountMonitor;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor_Interface, WinRt.Windows.Security.Authentication.Web.Core.IWebAccountMonitor2, WinRt.Windows.Security.Authentication.Web.Core.IID_IWebAccountMonitor2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebAccountMonitor.all);
      Hr := m_Interface.remove_AccountPictureUpdated (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body WebAuthenticationCoreManager is

      function FindAllAccountsAsync
      (
         provider : Windows.Security.Credentials.WebAccountProvider'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.FindAllAccountsResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FindAllAccountsResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FindAllAccountsResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IFindAllAccountsResult;
         m_IID            : aliased WinRt.IID := (2600449394, 22723, 23660, (147, 151, 43, 119, 4, 170, 53, 195 )); -- Windows.Security.Authentication.Web.Core.FindAllAccountsResult;
         m_HandlerIID     : aliased WinRt.IID := (1575598686, 2782, 21316, (159, 228, 152, 127, 29, 56, 126, 247 ));
         m_Handler        : AsyncOperationCompletedHandler_FindAllAccountsResult.Kind := new AsyncOperationCompletedHandler_FindAllAccountsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FindAllAccountsResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FindAllAccountsResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FindAllAccountsResult.Kind_Delegate, AsyncOperationCompletedHandler_FindAllAccountsResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.FindAllAccountsResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAllAccountsAsync (provider.m_IWebAccountProvider.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFindAllAccountsResult := new Windows.Security.Authentication.Web.Core.IFindAllAccountsResult;
                        Retval.m_IFindAllAccountsResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function FindAllAccountsAsync
      (
         provider : Windows.Security.Credentials.WebAccountProvider'Class;
         clientId : WinRt.WString
      )
      return WinRt.Windows.Security.Authentication.Web.Core.FindAllAccountsResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_clientId : WinRt.HString := To_HString (clientId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_FindAllAccountsResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_FindAllAccountsResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IFindAllAccountsResult;
         m_IID            : aliased WinRt.IID := (2600449394, 22723, 23660, (147, 151, 43, 119, 4, 170, 53, 195 )); -- Windows.Security.Authentication.Web.Core.FindAllAccountsResult;
         m_HandlerIID     : aliased WinRt.IID := (1575598686, 2782, 21316, (159, 228, 152, 127, 29, 56, 126, 247 ));
         m_Handler        : AsyncOperationCompletedHandler_FindAllAccountsResult.Kind := new AsyncOperationCompletedHandler_FindAllAccountsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_FindAllAccountsResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_FindAllAccountsResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_FindAllAccountsResult.Kind_Delegate, AsyncOperationCompletedHandler_FindAllAccountsResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.FindAllAccountsResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAllAccountsAsync (provider.m_IWebAccountProvider.all, HStr_clientId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IFindAllAccountsResult := new Windows.Security.Authentication.Web.Core.IFindAllAccountsResult;
                        Retval.m_IFindAllAccountsResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_clientId);
         end return;
      end;

      function FindSystemAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindSystemAccountProviderAsync (HStr_webAccountProviderId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
         end return;
      end;

      function FindSystemAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString;
         authority : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         HStr_authority : WinRt.HString := To_HString (authority);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindSystemAccountProviderAsync (HStr_webAccountProviderId, HStr_authority, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
            Hr := WindowsDeleteString (HStr_authority);
         end return;
      end;

      function FindSystemAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString;
         authority : WinRt.WString;
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         HStr_authority : WinRt.HString := To_HString (authority);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics4'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindSystemAccountProviderAsync (HStr_webAccountProviderId, HStr_authority, user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
            Hr := WindowsDeleteString (HStr_authority);
         end return;
      end;

      function GetTokenSilentlyAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTokenSilentlyAsync (request.m_IWebTokenRequest.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function GetTokenSilentlyAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class;
         webAccount : Windows.Security.Credentials.WebAccount'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetTokenSilentlyAsync (request.m_IWebTokenRequest.all, webAccount.m_IWebAccount.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestTokenAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestTokenAsync (request.m_IWebTokenRequest.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function RequestTokenAsync
      (
         request : Windows.Security.Authentication.Web.Core.WebTokenRequest'Class;
         webAccount : Windows.Security.Credentials.WebAccount'Class
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebTokenRequestResult.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebTokenRequestResult.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
         m_IID            : aliased WinRt.IID := (176248914, 31812, 22132, (179, 210, 250, 46, 76, 30, 70, 201 )); -- Windows.Security.Authentication.Web.Core.WebTokenRequestResult;
         m_HandlerIID     : aliased WinRt.IID := (3736423202, 28914, 21931, (151, 192, 108, 189, 197, 221, 182, 240 ));
         m_Handler        : AsyncOperationCompletedHandler_WebTokenRequestResult.Kind := new AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebTokenRequestResult.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebTokenRequestResult.Kind_Delegate, AsyncOperationCompletedHandler_WebTokenRequestResult.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestResult do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.RequestTokenAsync (request.m_IWebTokenRequest.all, webAccount.m_IWebAccount.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebTokenRequestResult := new Windows.Security.Authentication.Web.Core.IWebTokenRequestResult;
                        Retval.m_IWebTokenRequestResult.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function FindAccountAsync
      (
         provider : Windows.Security.Credentials.WebAccountProvider'Class;
         webAccountId : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccount is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountId : WinRt.HString := To_HString (webAccountId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccount.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccount.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccount;
         m_IID            : aliased WinRt.IID := (2899798868, 10623, 23064, (145, 67, 32, 163, 9, 226, 223, 211 )); -- Windows.Security.Credentials.WebAccount;
         m_HandlerIID     : aliased WinRt.IID := (1272377829, 51849, 21056, (143, 61, 127, 27, 84, 174, 144, 167 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccount.Kind := new AsyncOperationCompletedHandler_WebAccount.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccount.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccount.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccount.Kind_Delegate, AsyncOperationCompletedHandler_WebAccount.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAccountAsync (provider.m_IWebAccountProvider.all, HStr_webAccountId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
                        Retval.m_IWebAccount.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountId);
         end return;
      end;

      function FindAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAccountProviderAsync (HStr_webAccountProviderId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
         end return;
      end;

      function FindAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString;
         authority : WinRt.WString
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         HStr_authority : WinRt.HString := To_HString (authority);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAccountProviderAsync (HStr_webAccountProviderId, HStr_authority, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
            Hr := WindowsDeleteString (HStr_authority);
         end return;
      end;

      function CreateWebAccountMonitor
      (
         webAccounts : GenericObject
      )
      return WinRt.Windows.Security.Authentication.Web.Core.WebAccountMonitor is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebAccountMonitor;
      begin
         return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebAccountMonitor do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics3'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.CreateWebAccountMonitor (webAccounts, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IWebAccountMonitor := new Windows.Security.Authentication.Web.Core.IWebAccountMonitor;
               Retval.m_IWebAccountMonitor.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      function FindAccountProviderAsync
      (
         webAccountProviderId : WinRt.WString;
         authority : WinRt.WString;
         user : Windows.System.User'Class
      )
      return WinRt.Windows.Security.Credentials.WebAccountProvider is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager");
         m_Factory        : access WinRt.Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_webAccountProviderId : WinRt.HString := To_HString (webAccountProviderId);
         HStr_authority : WinRt.HString := To_HString (authority);
         m_Temp           : WinRt.Int32 := 0;
         m_Completed      : WinRt.UInt32 := 0;
         m_Captured       : WinRt.UInt32 := 0;
         m_Compare        : constant WinRt.UInt32 := 0;

         use type WinRt.Windows.Foundation.AsyncStatus;
         use type IAsyncOperation_WebAccountProvider.Kind;

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

         m_AsyncOperation : aliased IAsyncOperation_WebAccountProvider.Kind;
         m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
         m_ComRetVal      : aliased WinRt.GenericObject := null;
         m_RetVal         : aliased WinRt.Windows.Security.Credentials.IWebAccountProvider;
         m_IID            : aliased WinRt.IID := (2294702089, 4855, 22754, (141, 190, 110, 252, 98, 12, 133, 186 )); -- Windows.Security.Credentials.WebAccountProvider;
         m_HandlerIID     : aliased WinRt.IID := (2490851883, 4928, 21876, (129, 252, 80, 19, 88, 31, 87, 201 ));
         m_Handler        : AsyncOperationCompletedHandler_WebAccountProvider.Kind := new AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

         function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WebAccountProvider.Kind, m_IID'Unchecked_Access);
         function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WebAccountProvider.Kind, GenericObject);
         procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WebAccountProvider.Kind_Delegate, AsyncOperationCompletedHandler_WebAccountProvider.Kind);

         procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
            Hr        : WinRt.HResult := 0;
         begin
            if asyncStatus = Completed_e then
               m_AsyncStatus := AsyncStatus;
            end if;
            m_Completed := 1;
            WakeByAddressSingle (m_Completed'Address);
         end;

      begin
         return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
            Hr := RoGetActivationFactory (m_hString, IID_IWebAuthenticationCoreManagerStatics2'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.FindAccountProviderAsync (HStr_webAccountProviderId, HStr_authority, user.m_IUser.all, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               if Hr = S_OK then
                  m_AsyncOperation := QI (m_ComRetVal);
                  m_RefCount := m_ComRetVal.Release;
                  if m_AsyncOperation /= null then
                     Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                     while m_Captured = m_Compare loop
                        m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                        m_Captured := m_Completed;
                     end loop;
                     if m_AsyncStatus = Completed_e then
                        Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                        Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
                        Retval.m_IWebAccountProvider.all := m_RetVal;
                     end if;
                     m_RefCount := m_AsyncOperation.Release;
                     m_RefCount := m_Handler.Release;
                     if m_RefCount = 0 then
                        Free (m_Handler);
                     end if;
                  end if;
               end if;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_webAccountProviderId);
            Hr := WindowsDeleteString (HStr_authority);
         end return;
      end;

   end WebAuthenticationCoreManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebProviderError

   procedure Initialize (this : in out WebProviderError) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebProviderError) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebProviderError, IWebProviderError_Ptr);
   begin
      if this.m_IWebProviderError /= null then
         if this.m_IWebProviderError.all /= null then
            RefCount := this.m_IWebProviderError.all.Release;
            Free (this.m_IWebProviderError);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebProviderError

   function Constructor
   (
      errorCode : WinRt.UInt32;
      errorMessage : WinRt.WString
   )
   return WebProviderError is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebProviderError");
      m_Factory    : access IWebProviderErrorFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebProviderError;
      HStr_errorMessage : WinRt.HString := To_HString (errorMessage);
   begin
      return RetVal : WebProviderError do
         Hr := RoGetActivationFactory (m_hString, IID_IWebProviderErrorFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (errorCode, HStr_errorMessage, m_ComRetVal'Access);
            Retval.m_IWebProviderError := new Windows.Security.Authentication.Web.Core.IWebProviderError;
            Retval.m_IWebProviderError.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_errorMessage);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebProviderError

   function get_ErrorCode
   (
      this : in out WebProviderError
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWebProviderError.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorMessage
   (
      this : in out WebProviderError
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebProviderError.all.get_ErrorMessage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out WebProviderError
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IWebProviderError.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebTokenRequest

   procedure Initialize (this : in out WebTokenRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebTokenRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebTokenRequest, IWebTokenRequest_Ptr);
   begin
      if this.m_IWebTokenRequest /= null then
         if this.m_IWebTokenRequest.all /= null then
            RefCount := this.m_IWebTokenRequest.all.Release;
            Free (this.m_IWebTokenRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebTokenRequest

   function Constructor
   (
      provider : Windows.Security.Credentials.WebAccountProvider'Class;
      scope : WinRt.WString;
      clientId : WinRt.WString
   )
   return WebTokenRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenRequest");
      m_Factory    : access IWebTokenRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenRequest;
      HStr_scope : WinRt.HString := To_HString (scope);
      HStr_clientId : WinRt.HString := To_HString (clientId);
   begin
      return RetVal : WebTokenRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (provider.m_IWebAccountProvider.all, HStr_scope, HStr_clientId, m_ComRetVal'Access);
            Retval.m_IWebTokenRequest := new Windows.Security.Authentication.Web.Core.IWebTokenRequest;
            Retval.m_IWebTokenRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scope);
         Hr := WindowsDeleteString (HStr_clientId);
      end return;
   end;

   function Constructor
   (
      provider : Windows.Security.Credentials.WebAccountProvider'Class;
      scope : WinRt.WString;
      clientId : WinRt.WString;
      promptType : Windows.Security.Authentication.Web.Core.WebTokenRequestPromptType
   )
   return WebTokenRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenRequest");
      m_Factory    : access IWebTokenRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenRequest;
      HStr_scope : WinRt.HString := To_HString (scope);
      HStr_clientId : WinRt.HString := To_HString (clientId);
   begin
      return RetVal : WebTokenRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithPromptType (provider.m_IWebAccountProvider.all, HStr_scope, HStr_clientId, promptType, m_ComRetVal'Access);
            Retval.m_IWebTokenRequest := new Windows.Security.Authentication.Web.Core.IWebTokenRequest;
            Retval.m_IWebTokenRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scope);
         Hr := WindowsDeleteString (HStr_clientId);
      end return;
   end;

   function Constructor
   (
      provider : Windows.Security.Credentials.WebAccountProvider'Class
   )
   return WebTokenRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenRequest");
      m_Factory    : access IWebTokenRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenRequest;
   begin
      return RetVal : WebTokenRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithProvider (provider.m_IWebAccountProvider.all, m_ComRetVal'Access);
            Retval.m_IWebTokenRequest := new Windows.Security.Authentication.Web.Core.IWebTokenRequest;
            Retval.m_IWebTokenRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor
   (
      provider : Windows.Security.Credentials.WebAccountProvider'Class;
      scope : WinRt.WString
   )
   return WebTokenRequest is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenRequest");
      m_Factory    : access IWebTokenRequestFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenRequest;
      HStr_scope : WinRt.HString := To_HString (scope);
   begin
      return RetVal : WebTokenRequest do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenRequestFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithScope (provider.m_IWebAccountProvider.all, HStr_scope, m_ComRetVal'Access);
            Retval.m_IWebTokenRequest := new Windows.Security.Authentication.Web.Core.IWebTokenRequest;
            Retval.m_IWebTokenRequest.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_scope);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebTokenRequest

   function get_WebAccountProvider
   (
      this : in out WebTokenRequest
   )
   return WinRt.Windows.Security.Credentials.WebAccountProvider'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccountProvider;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccountProvider do
         Hr := this.m_IWebTokenRequest.all.get_WebAccountProvider (m_ComRetVal'Access);
         Retval.m_IWebAccountProvider := new Windows.Security.Credentials.IWebAccountProvider;
         Retval.m_IWebAccountProvider.all := m_ComRetVal;
      end return;
   end;

   function get_Scope
   (
      this : in out WebTokenRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebTokenRequest.all.get_Scope (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ClientId
   (
      this : in out WebTokenRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebTokenRequest.all.get_ClientId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PromptType
   (
      this : in out WebTokenRequest
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestPromptType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.WebTokenRequestPromptType;
   begin
      Hr := this.m_IWebTokenRequest.all.get_PromptType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out WebTokenRequest
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IWebTokenRequest.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_AppProperties
   (
      this : in out WebTokenRequest
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest2, WinRt.Windows.Security.Authentication.Web.Core.IID_IWebTokenRequest2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebTokenRequest.all);
      Hr := m_Interface.get_AppProperties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_CorrelationId
   (
      this : in out WebTokenRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest3, WinRt.Windows.Security.Authentication.Web.Core.IID_IWebTokenRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebTokenRequest.all);
      Hr := m_Interface.get_CorrelationId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CorrelationId
   (
      this : in out WebTokenRequest;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest_Interface, WinRt.Windows.Security.Authentication.Web.Core.IWebTokenRequest3, WinRt.Windows.Security.Authentication.Web.Core.IID_IWebTokenRequest3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWebTokenRequest.all);
      Hr := m_Interface.put_CorrelationId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebTokenRequestResult

   procedure Initialize (this : in out WebTokenRequestResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebTokenRequestResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebTokenRequestResult, IWebTokenRequestResult_Ptr);
   begin
      if this.m_IWebTokenRequestResult /= null then
         if this.m_IWebTokenRequestResult.all /= null then
            RefCount := this.m_IWebTokenRequestResult.all.Release;
            Free (this.m_IWebTokenRequestResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebTokenRequestResult

   function get_ResponseData
   (
      this : in out WebTokenRequestResult
   )
   return IVectorView_IWebTokenResponse.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IWebTokenResponse.Kind;
   begin
      Hr := this.m_IWebTokenRequestResult.all.get_ResponseData (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IWebTokenResponse (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ResponseStatus
   (
      this : in out WebTokenRequestResult
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebTokenRequestStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.WebTokenRequestStatus;
   begin
      Hr := this.m_IWebTokenRequestResult.all.get_ResponseStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ResponseError
   (
      this : in out WebTokenRequestResult
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebProviderError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebProviderError;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebProviderError do
         Hr := this.m_IWebTokenRequestResult.all.get_ResponseError (m_ComRetVal'Access);
         Retval.m_IWebProviderError := new Windows.Security.Authentication.Web.Core.IWebProviderError;
         Retval.m_IWebProviderError.all := m_ComRetVal;
      end return;
   end;

   procedure InvalidateCacheAsync
   (
      this : in out WebTokenRequestResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWebTokenRequestResult.all.InvalidateCacheAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WebTokenResponse

   procedure Initialize (this : in out WebTokenResponse) is
   begin
      null;
   end;

   procedure Finalize (this : in out WebTokenResponse) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWebTokenResponse, IWebTokenResponse_Ptr);
   begin
      if this.m_IWebTokenResponse /= null then
         if this.m_IWebTokenResponse.all /= null then
            RefCount := this.m_IWebTokenResponse.all.Release;
            Free (this.m_IWebTokenResponse);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WebTokenResponse

   function Constructor
   (
      token : WinRt.WString
   )
   return WebTokenResponse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenResponse");
      m_Factory    : access IWebTokenResponseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenResponse;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : WebTokenResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenResponseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithToken (HStr_token, m_ComRetVal'Access);
            Retval.m_IWebTokenResponse := new Windows.Security.Authentication.Web.Core.IWebTokenResponse;
            Retval.m_IWebTokenResponse.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function Constructor
   (
      token : WinRt.WString;
      webAccount : Windows.Security.Credentials.WebAccount'Class
   )
   return WebTokenResponse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenResponse");
      m_Factory    : access IWebTokenResponseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenResponse;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : WebTokenResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenResponseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTokenAndAccount (HStr_token, webAccount.m_IWebAccount.all, m_ComRetVal'Access);
            Retval.m_IWebTokenResponse := new Windows.Security.Authentication.Web.Core.IWebTokenResponse;
            Retval.m_IWebTokenResponse.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function Constructor
   (
      token : WinRt.WString;
      webAccount : Windows.Security.Credentials.WebAccount'Class;
      error : Windows.Security.Authentication.Web.Core.WebProviderError'Class
   )
   return WebTokenResponse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenResponse");
      m_Factory    : access IWebTokenResponseFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenResponse;
      HStr_token : WinRt.HString := To_HString (token);
   begin
      return RetVal : WebTokenResponse do
         Hr := RoGetActivationFactory (m_hString, IID_IWebTokenResponseFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithTokenAccountAndError (HStr_token, webAccount.m_IWebAccount.all, error.m_IWebProviderError.all, m_ComRetVal'Access);
            Retval.m_IWebTokenResponse := new Windows.Security.Authentication.Web.Core.IWebTokenResponse;
            Retval.m_IWebTokenResponse.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_token);
      end return;
   end;

   function Constructor return WebTokenResponse is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Security.Authentication.Web.Core.WebTokenResponse");
      m_ComRetVal  : aliased Windows.Security.Authentication.Web.Core.IWebTokenResponse;
   begin
      return RetVal : WebTokenResponse do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IWebTokenResponse := new Windows.Security.Authentication.Web.Core.IWebTokenResponse;
            Retval.m_IWebTokenResponse.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WebTokenResponse

   function get_Token
   (
      this : in out WebTokenResponse
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWebTokenResponse.all.get_Token (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderError
   (
      this : in out WebTokenResponse
   )
   return WinRt.Windows.Security.Authentication.Web.Core.WebProviderError'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.Core.IWebProviderError;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.Core.WebProviderError do
         Hr := this.m_IWebTokenResponse.all.get_ProviderError (m_ComRetVal'Access);
         Retval.m_IWebProviderError := new Windows.Security.Authentication.Web.Core.IWebProviderError;
         Retval.m_IWebProviderError.all := m_ComRetVal;
      end return;
   end;

   function get_WebAccount
   (
      this : in out WebTokenResponse
   )
   return WinRt.Windows.Security.Credentials.WebAccount'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IWebAccount;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.WebAccount do
         Hr := this.m_IWebTokenResponse.all.get_WebAccount (m_ComRetVal'Access);
         Retval.m_IWebAccount := new Windows.Security.Credentials.IWebAccount;
         Retval.m_IWebAccount.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out WebTokenResponse
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_IWebTokenResponse.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

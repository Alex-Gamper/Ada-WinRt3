--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.UI.Popups;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.DialProtocol is

   package IAsyncOperation_DialAppLaunchResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.DialProtocol.DialAppLaunchResult);
   package AsyncOperationCompletedHandler_DialAppLaunchResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.DialProtocol.DialAppLaunchResult);

   package IAsyncOperation_DialAppStopResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.DialProtocol.DialAppStopResult);
   package AsyncOperationCompletedHandler_DialAppStopResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.DialProtocol.DialAppStopResult);

   package IAsyncOperation_DialAppStateDetails is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.DialProtocol.IDialAppStateDetails);
   package AsyncOperationCompletedHandler_DialAppStateDetails is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.DialProtocol.IDialAppStateDetails);

   package IAsyncOperation_DialDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.DialProtocol.IDialDevice);
   package AsyncOperationCompletedHandler_DialDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.DialProtocol.IDialDevice);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_HString is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.HString);
   package AsyncOperationCompletedHandler_HString is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.HString);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialApp

   procedure Initialize (this : in out DialApp) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialApp) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialApp, IDialApp_Ptr);
   begin
      if this.m_IDialApp /= null then
         if this.m_IDialApp.all /= null then
            RefCount := this.m_IDialApp.all.Release;
            Free (this.m_IDialApp);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialApp

   function get_AppName
   (
      this : in out DialApp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDialApp.all.get_AppName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function RequestLaunchAsync
   (
      this : in out DialApp;
      appArgument : WinRt.WString
   )
   return WinRt.Windows.Media.DialProtocol.DialAppLaunchResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_appArgument : WinRt.HString := To_HString (appArgument);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialAppLaunchResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialAppLaunchResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.DialAppLaunchResult;
      m_IID            : aliased WinRt.IID := (1158857054, 8132, 22088, (189, 73, 81, 83, 58, 63, 230, 180 )); -- Windows.Media.DialProtocol.DialAppLaunchResult;
      m_HandlerIID     : aliased WinRt.IID := (374082216, 15659, 22427, (148, 163, 204, 73, 37, 198, 149, 236 ));
      m_Handler        : AsyncOperationCompletedHandler_DialAppLaunchResult.Kind := new AsyncOperationCompletedHandler_DialAppLaunchResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialAppLaunchResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialAppLaunchResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialAppLaunchResult.Kind_Delegate, AsyncOperationCompletedHandler_DialAppLaunchResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDialApp.all.RequestLaunchAsync (HStr_appArgument, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_appArgument);
      return m_RetVal;
   end;

   function StopAsync
   (
      this : in out DialApp
   )
   return WinRt.Windows.Media.DialProtocol.DialAppStopResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialAppStopResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialAppStopResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.DialAppStopResult;
      m_IID            : aliased WinRt.IID := (2241393230, 3426, 20858, (150, 28, 49, 252, 167, 58, 206, 221 )); -- Windows.Media.DialProtocol.DialAppStopResult;
      m_HandlerIID     : aliased WinRt.IID := (3344299338, 61307, 22074, (155, 20, 70, 46, 114, 217, 102, 90 ));
      m_Handler        : AsyncOperationCompletedHandler_DialAppStopResult.Kind := new AsyncOperationCompletedHandler_DialAppStopResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialAppStopResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialAppStopResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialAppStopResult.Kind_Delegate, AsyncOperationCompletedHandler_DialAppStopResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDialApp.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetAppStateAsync
   (
      this : in out DialApp
   )
   return WinRt.Windows.Media.DialProtocol.DialAppStateDetails'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialAppStateDetails.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialAppStateDetails.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.IDialAppStateDetails;
      m_IID            : aliased WinRt.IID := (3842639778, 11503, 24519, (177, 76, 214, 221, 133, 23, 197, 142 )); -- Windows.Media.DialProtocol.DialAppStateDetails;
      m_HandlerIID     : aliased WinRt.IID := (952511957, 7958, 21952, (142, 199, 202, 15, 200, 65, 214, 20 ));
      m_Handler        : AsyncOperationCompletedHandler_DialAppStateDetails.Kind := new AsyncOperationCompletedHandler_DialAppStateDetails.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialAppStateDetails.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialAppStateDetails.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialAppStateDetails.Kind_Delegate, AsyncOperationCompletedHandler_DialAppStateDetails.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialAppStateDetails do
         Hr := this.m_IDialApp.all.GetAppStateAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDialAppStateDetails := new Windows.Media.DialProtocol.IDialAppStateDetails;
                  Retval.m_IDialAppStateDetails.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialAppStateDetails

   procedure Initialize (this : in out DialAppStateDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialAppStateDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialAppStateDetails, IDialAppStateDetails_Ptr);
   begin
      if this.m_IDialAppStateDetails /= null then
         if this.m_IDialAppStateDetails.all /= null then
            RefCount := this.m_IDialAppStateDetails.all.Release;
            Free (this.m_IDialAppStateDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialAppStateDetails

   function get_State
   (
      this : in out DialAppStateDetails
   )
   return WinRt.Windows.Media.DialProtocol.DialAppState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.DialAppState;
   begin
      Hr := this.m_IDialAppStateDetails.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FullXml
   (
      this : in out DialAppStateDetails
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDialAppStateDetails.all.get_FullXml (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialDevice

   procedure Initialize (this : in out DialDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialDevice, IDialDevice_Ptr);
   begin
      if this.m_IDialDevice /= null then
         if this.m_IDialDevice.all /= null then
            RefCount := this.m_IDialDevice.all.Release;
            Free (this.m_IDialDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DialDevice

   function GetDeviceSelector
   (
      appName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.DialProtocol.DialDevice");
      m_Factory        : access WinRt.Windows.Media.DialProtocol.IDialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_appName : WinRt.HString := To_HString (appName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDialDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (HStr_appName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_appName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      value : WinRt.WString
   )
   return WinRt.Windows.Media.DialProtocol.DialDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.DialProtocol.DialDevice");
      m_Factory        : access WinRt.Windows.Media.DialProtocol.IDialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.IDialDevice;
      m_IID            : aliased WinRt.IID := (1193061797, 7908, 20928, (182, 181, 191, 114, 245, 245, 4, 34 )); -- Windows.Media.DialProtocol.DialDevice;
      m_HandlerIID     : aliased WinRt.IID := (2176613659, 32006, 21855, (129, 27, 66, 236, 15, 167, 27, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_DialDevice.Kind := new AsyncOperationCompletedHandler_DialDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialDevice.Kind_Delegate, AsyncOperationCompletedHandler_DialDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IDialDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IDialDevice := new Windows.Media.DialProtocol.IDialDevice;
                     Retval.m_IDialDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   function DeviceInfoSupportsDialAsync
   (
      device : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.DialProtocol.DialDevice");
      m_Factory        : access WinRt.Windows.Media.DialProtocol.IDialDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IDialDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DeviceInfoSupportsDialAsync (device.m_IDeviceInformation.all, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialDevice

   function get_Id
   (
      this : in out DialDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IDialDevice.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDialApp
   (
      this : in out DialDevice;
      appName : WinRt.WString
   )
   return WinRt.Windows.Media.DialProtocol.DialApp'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.IDialApp;
      HStr_appName : WinRt.HString := To_HString (appName);
   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialApp do
         Hr := this.m_IDialDevice.all.GetDialApp (HStr_appName, m_ComRetVal'Access);
         Retval.m_IDialApp := new Windows.Media.DialProtocol.IDialApp;
         Retval.m_IDialApp.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_appName);
      end return;
   end;

   function get_FriendlyName
   (
      this : in out DialDevice
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.DialProtocol.IDialDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.DialProtocol.IDialDevice_Interface, WinRt.Windows.Media.DialProtocol.IDialDevice2, WinRt.Windows.Media.DialProtocol.IID_IDialDevice2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialDevice.all);
      Hr := m_Interface.get_FriendlyName (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Thumbnail
   (
      this : in out DialDevice
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.DialProtocol.IDialDevice2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.DialProtocol.IDialDevice_Interface, WinRt.Windows.Media.DialProtocol.IDialDevice2, WinRt.Windows.Media.DialProtocol.IID_IDialDevice2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialDevice.all);
      Hr := m_Interface.get_Thumbnail (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialDevicePicker

   procedure Initialize (this : in out DialDevicePicker) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialDevicePicker) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialDevicePicker, IDialDevicePicker_Ptr);
   begin
      if this.m_IDialDevicePicker /= null then
         if this.m_IDialDevicePicker.all /= null then
            RefCount := this.m_IDialDevicePicker.all.Release;
            Free (this.m_IDialDevicePicker);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for DialDevicePicker

   function Constructor return DialDevicePicker is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.DialProtocol.DialDevicePicker");
      m_ComRetVal  : aliased Windows.Media.DialProtocol.IDialDevicePicker;
   begin
      return RetVal : DialDevicePicker do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IDialDevicePicker := new Windows.Media.DialProtocol.IDialDevicePicker;
            Retval.m_IDialDevicePicker.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialDevicePicker

   function get_Filter
   (
      this : in out DialDevicePicker
   )
   return WinRt.Windows.Media.DialProtocol.DialDevicePickerFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.IDialDevicePickerFilter;
   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevicePickerFilter do
         Hr := this.m_IDialDevicePicker.all.get_Filter (m_ComRetVal'Access);
         Retval.m_IDialDevicePickerFilter := new Windows.Media.DialProtocol.IDialDevicePickerFilter;
         Retval.m_IDialDevicePickerFilter.all := m_ComRetVal;
      end return;
   end;

   function get_Appearance
   (
      this : in out DialDevicePicker
   )
   return WinRt.Windows.Devices.Enumeration.DevicePickerAppearance'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDevicePickerAppearance;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DevicePickerAppearance do
         Hr := this.m_IDialDevicePicker.all.get_Appearance (m_ComRetVal'Access);
         Retval.m_IDevicePickerAppearance := new Windows.Devices.Enumeration.IDevicePickerAppearance;
         Retval.m_IDevicePickerAppearance.all := m_ComRetVal;
      end return;
   end;

   function add_DialDeviceSelected
   (
      this : in out DialDevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDialDevicePicker.all.add_DialDeviceSelected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DialDeviceSelected
   (
      this : in out DialDevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.remove_DialDeviceSelected (token);
   end;

   function add_DisconnectButtonClicked
   (
      this : in out DialDevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDialDevicePicker.all.add_DisconnectButtonClicked (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DisconnectButtonClicked
   (
      this : in out DialDevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.remove_DisconnectButtonClicked (token);
   end;

   function add_DialDevicePickerDismissed
   (
      this : in out DialDevicePicker;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IDialDevicePicker.all.add_DialDevicePickerDismissed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DialDevicePickerDismissed
   (
      this : in out DialDevicePicker;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.remove_DialDevicePickerDismissed (token);
   end;

   procedure Show
   (
      this : in out DialDevicePicker;
      selection : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.Show (selection);
   end;

   procedure Show
   (
      this : in out DialDevicePicker;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.Show (selection, preferredPlacement);
   end;

   function PickSingleDialDeviceAsync
   (
      this : in out DialDevicePicker;
      selection : Windows.Foundation.Rect
   )
   return WinRt.Windows.Media.DialProtocol.DialDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.IDialDevice;
      m_IID            : aliased WinRt.IID := (1193061797, 7908, 20928, (182, 181, 191, 114, 245, 245, 4, 34 )); -- Windows.Media.DialProtocol.DialDevice;
      m_HandlerIID     : aliased WinRt.IID := (2176613659, 32006, 21855, (129, 27, 66, 236, 15, 167, 27, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_DialDevice.Kind := new AsyncOperationCompletedHandler_DialDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialDevice.Kind_Delegate, AsyncOperationCompletedHandler_DialDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevice do
         Hr := this.m_IDialDevicePicker.all.PickSingleDialDeviceAsync (selection, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDialDevice := new Windows.Media.DialProtocol.IDialDevice;
                  Retval.m_IDialDevice.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PickSingleDialDeviceAsync
   (
      this : in out DialDevicePicker;
      selection : Windows.Foundation.Rect;
      preferredPlacement : Windows.UI.Popups.Placement
   )
   return WinRt.Windows.Media.DialProtocol.DialDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_DialDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_DialDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.DialProtocol.IDialDevice;
      m_IID            : aliased WinRt.IID := (1193061797, 7908, 20928, (182, 181, 191, 114, 245, 245, 4, 34 )); -- Windows.Media.DialProtocol.DialDevice;
      m_HandlerIID     : aliased WinRt.IID := (2176613659, 32006, 21855, (129, 27, 66, 236, 15, 167, 27, 85 ));
      m_Handler        : AsyncOperationCompletedHandler_DialDevice.Kind := new AsyncOperationCompletedHandler_DialDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_DialDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_DialDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_DialDevice.Kind_Delegate, AsyncOperationCompletedHandler_DialDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevice do
         Hr := this.m_IDialDevicePicker.all.PickSingleDialDeviceAsync (selection, preferredPlacement, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IDialDevice := new Windows.Media.DialProtocol.IDialDevice;
                  Retval.m_IDialDevice.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Hide
   (
      this : in out DialDevicePicker
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.Hide;
   end;

   procedure SetDisplayStatus
   (
      this : in out DialDevicePicker;
      device : Windows.Media.DialProtocol.DialDevice'Class;
      status : Windows.Media.DialProtocol.DialDeviceDisplayStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IDialDevicePicker.all.SetDisplayStatus (device.m_IDialDevice.all, status);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialDevicePickerFilter

   procedure Initialize (this : in out DialDevicePickerFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialDevicePickerFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialDevicePickerFilter, IDialDevicePickerFilter_Ptr);
   begin
      if this.m_IDialDevicePickerFilter /= null then
         if this.m_IDialDevicePickerFilter.all /= null then
            RefCount := this.m_IDialDevicePickerFilter.all.Release;
            Free (this.m_IDialDevicePickerFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialDevicePickerFilter

   function get_SupportedAppNames
   (
      this : in out DialDevicePickerFilter
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IDialDevicePickerFilter.all.get_SupportedAppNames (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialDeviceSelectedEventArgs

   procedure Initialize (this : in out DialDeviceSelectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialDeviceSelectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialDeviceSelectedEventArgs, IDialDeviceSelectedEventArgs_Ptr);
   begin
      if this.m_IDialDeviceSelectedEventArgs /= null then
         if this.m_IDialDeviceSelectedEventArgs.all /= null then
            RefCount := this.m_IDialDeviceSelectedEventArgs.all.Release;
            Free (this.m_IDialDeviceSelectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialDeviceSelectedEventArgs

   function get_SelectedDialDevice
   (
      this : in out DialDeviceSelectedEventArgs
   )
   return WinRt.Windows.Media.DialProtocol.DialDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.IDialDevice;
   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevice do
         Hr := this.m_IDialDeviceSelectedEventArgs.all.get_SelectedDialDevice (m_ComRetVal'Access);
         Retval.m_IDialDevice := new Windows.Media.DialProtocol.IDialDevice;
         Retval.m_IDialDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialDisconnectButtonClickedEventArgs

   procedure Initialize (this : in out DialDisconnectButtonClickedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialDisconnectButtonClickedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialDisconnectButtonClickedEventArgs, IDialDisconnectButtonClickedEventArgs_Ptr);
   begin
      if this.m_IDialDisconnectButtonClickedEventArgs /= null then
         if this.m_IDialDisconnectButtonClickedEventArgs.all /= null then
            RefCount := this.m_IDialDisconnectButtonClickedEventArgs.all.Release;
            Free (this.m_IDialDisconnectButtonClickedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialDisconnectButtonClickedEventArgs

   function get_Device
   (
      this : in out DialDisconnectButtonClickedEventArgs
   )
   return WinRt.Windows.Media.DialProtocol.DialDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.IDialDevice;
   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialDevice do
         Hr := this.m_IDialDisconnectButtonClickedEventArgs.all.get_Device (m_ComRetVal'Access);
         Retval.m_IDialDevice := new Windows.Media.DialProtocol.IDialDevice;
         Retval.m_IDialDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for DialReceiverApp

   procedure Initialize (this : in out DialReceiverApp) is
   begin
      null;
   end;

   procedure Finalize (this : in out DialReceiverApp) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IDialReceiverApp, IDialReceiverApp_Ptr);
   begin
      if this.m_IDialReceiverApp /= null then
         if this.m_IDialReceiverApp.all /= null then
            RefCount := this.m_IDialReceiverApp.all.Release;
            Free (this.m_IDialReceiverApp);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for DialReceiverApp

   function get_Current
   return WinRt.Windows.Media.DialProtocol.DialReceiverApp is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.DialProtocol.DialReceiverApp");
      m_Factory        : access WinRt.Windows.Media.DialProtocol.IDialReceiverAppStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.DialProtocol.IDialReceiverApp;
   begin
      return RetVal : WinRt.Windows.Media.DialProtocol.DialReceiverApp do
         Hr := RoGetActivationFactory (m_hString, IID_IDialReceiverAppStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Current (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDialReceiverApp := new Windows.Media.DialProtocol.IDialReceiverApp;
            Retval.m_IDialReceiverApp.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for DialReceiverApp

   function GetAdditionalDataAsync
   (
      this : in out DialReceiverApp
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2229472156, 13597, 24523, (139, 10, 188, 20, 84, 7, 249, 21 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (968581710, 46534, 22405, (186, 70, 63, 69, 170, 243, 239, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IDialReceiverApp.all.GetAdditionalDataAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure SetAdditionalDataAsync
   (
      this : in out DialReceiverApp;
      additionalData : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IDialReceiverApp.all.SetAdditionalDataAsync (additionalData, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetUniqueDeviceNameAsync
   (
      this : in out DialReceiverApp
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.DialProtocol.IDialReceiverApp2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HString.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HString.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.HString;
      AdaRetval        : WString;
      m_IID            : aliased WinRt.IID := (1042277891, 63639, 21091, (179, 40, 8, 6, 66, 107, 138, 121 )); -- HString;
      m_HandlerIID     : aliased WinRt.IID := (3080352799, 32693, 20654, (158, 153, 145, 18, 1, 236, 61, 65 ));
      m_Handler        : AsyncOperationCompletedHandler_HString.Kind := new AsyncOperationCompletedHandler_HString.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HString.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HString.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HString.Kind_Delegate, AsyncOperationCompletedHandler_HString.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.DialProtocol.IDialReceiverApp_Interface, WinRt.Windows.Media.DialProtocol.IDialReceiverApp2, WinRt.Windows.Media.DialProtocol.IID_IDialReceiverApp2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IDialReceiverApp.all);
      Hr := m_Interface.GetUniqueDeviceNameAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      AdaRetval := To_Ada (m_RetVal);
      Hr := WindowsDeleteString (m_RetVal);
      return AdaRetVal;
   end;

end;

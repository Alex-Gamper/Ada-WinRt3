--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.DirectX.Direct3D11;
with WinRt.Windows.Graphics.Imaging;
with WinRt.Windows.Media.Capture.Core;
with WinRt.Windows.Media.Capture.Frames;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Media.Devices;
with WinRt.Windows.Media.Effects;
with WinRt.Windows.Media.MediaProperties;
with WinRt.Windows.Security.Authentication.Web;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with WinRt.Windows.System;
with WinRt.Windows.UI.WindowManagement;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Capture is

   package IAsyncOperation_AdvancedCapturedPhoto is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto);
   package AsyncOperationCompletedHandler_AdvancedCapturedPhoto is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_StorageFile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.IStorageFile);
   package AsyncOperationCompletedHandler_StorageFile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.IStorageFile);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_IBuffer is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);
   package AsyncOperationCompletedHandler_IBuffer is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Storage.Streams.IBuffer, GenericObject);

   package IAsyncOperation_MediaCapturePauseResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.IMediaCapturePauseResult);
   package AsyncOperationCompletedHandler_MediaCapturePauseResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.IMediaCapturePauseResult);

   package IAsyncOperation_MediaCaptureStopResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.IMediaCaptureStopResult);
   package AsyncOperationCompletedHandler_MediaCaptureStopResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.IMediaCaptureStopResult);

   package IAsyncOperation_CapturedPhoto is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.ICapturedPhoto);
   package AsyncOperationCompletedHandler_CapturedPhoto is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.ICapturedPhoto);

   package IAsyncOperation_LowLagMediaRecording is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.ILowLagMediaRecording);
   package AsyncOperationCompletedHandler_LowLagMediaRecording is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.ILowLagMediaRecording);

   package IAsyncOperation_LowLagPhotoCapture is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.ILowLagPhotoCapture);
   package AsyncOperationCompletedHandler_LowLagPhotoCapture is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.ILowLagPhotoCapture);

   package IAsyncOperation_LowLagPhotoSequenceCapture is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.ILowLagPhotoSequenceCapture);
   package AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.ILowLagPhotoSequenceCapture);

   package IAsyncOperation_VariablePhotoSequenceCapture is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Core.IVariablePhotoSequenceCapture);
   package AsyncOperationCompletedHandler_VariablePhotoSequenceCapture is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Core.IVariablePhotoSequenceCapture);

   package IAsyncOperation_IMediaExtension is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.IMediaExtension);
   package AsyncOperationCompletedHandler_IMediaExtension is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.IMediaExtension);

   package IAsyncOperation_VideoFrame is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.IVideoFrame);
   package AsyncOperationCompletedHandler_VideoFrame is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.IVideoFrame);

   package IAsyncOperation_AdvancedPhotoCapture is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.IAdvancedPhotoCapture);
   package AsyncOperationCompletedHandler_AdvancedPhotoCapture is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.IAdvancedPhotoCapture);

   package IAsyncOperation_MediaFrameReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.IMediaFrameReader);
   package AsyncOperationCompletedHandler_MediaFrameReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.IMediaFrameReader);

   package IAsyncOperation_MultiSourceMediaFrameReader is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader);
   package AsyncOperationCompletedHandler_MultiSourceMediaFrameReader is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdvancedCapturedPhoto

   procedure Initialize (this : in out AdvancedCapturedPhoto) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdvancedCapturedPhoto) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdvancedCapturedPhoto, IAdvancedCapturedPhoto_Ptr);
   begin
      if this.m_IAdvancedCapturedPhoto /= null then
         if this.m_IAdvancedCapturedPhoto.all /= null then
            RefCount := this.m_IAdvancedCapturedPhoto.all.Release;
            Free (this.m_IAdvancedCapturedPhoto);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdvancedCapturedPhoto

   function get_Frame
   (
      this : in out AdvancedCapturedPhoto
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_IAdvancedCapturedPhoto.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_Mode
   (
      this : in out AdvancedCapturedPhoto
   )
   return WinRt.Windows.Media.Devices.AdvancedPhotoMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.AdvancedPhotoMode;
   begin
      Hr := this.m_IAdvancedCapturedPhoto.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Context
   (
      this : in out AdvancedCapturedPhoto
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IAdvancedCapturedPhoto.all.get_Context (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameBoundsRelativeToReferencePhoto
   (
      this : in out AdvancedCapturedPhoto
   )
   return IReference_Rect.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Rect.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto_Interface, WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto2, WinRt.Windows.Media.Capture.IID_IAdvancedCapturedPhoto2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAdvancedCapturedPhoto.all);
      Hr := m_Interface.get_FrameBoundsRelativeToReferencePhoto (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Rect (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdvancedPhotoCapture

   procedure Initialize (this : in out AdvancedPhotoCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out AdvancedPhotoCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAdvancedPhotoCapture, IAdvancedPhotoCapture_Ptr);
   begin
      if this.m_IAdvancedPhotoCapture /= null then
         if this.m_IAdvancedPhotoCapture.all /= null then
            RefCount := this.m_IAdvancedPhotoCapture.all.Release;
            Free (this.m_IAdvancedPhotoCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdvancedPhotoCapture

   function CaptureAsync
   (
      this : in out AdvancedPhotoCapture
   )
   return WinRt.Windows.Media.Capture.AdvancedCapturedPhoto'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdvancedCapturedPhoto.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdvancedCapturedPhoto.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto;
      m_IID            : aliased WinRt.IID := (2406593047, 25068, 22699, (166, 70, 238, 222, 1, 66, 213, 104 )); -- Windows.Media.Capture.AdvancedCapturedPhoto;
      m_HandlerIID     : aliased WinRt.IID := (3992143148, 55576, 23701, (142, 58, 36, 80, 68, 221, 112, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind := new AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdvancedCapturedPhoto.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind_Delegate, AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Capture.AdvancedCapturedPhoto do
         Hr := this.m_IAdvancedPhotoCapture.all.CaptureAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAdvancedCapturedPhoto := new Windows.Media.Capture.IAdvancedCapturedPhoto;
                  Retval.m_IAdvancedCapturedPhoto.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CaptureAsync
   (
      this : in out AdvancedPhotoCapture;
      context : WinRt.IInspectable
   )
   return WinRt.Windows.Media.Capture.AdvancedCapturedPhoto'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdvancedCapturedPhoto.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdvancedCapturedPhoto.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IAdvancedCapturedPhoto;
      m_IID            : aliased WinRt.IID := (2406593047, 25068, 22699, (166, 70, 238, 222, 1, 66, 213, 104 )); -- Windows.Media.Capture.AdvancedCapturedPhoto;
      m_HandlerIID     : aliased WinRt.IID := (3992143148, 55576, 23701, (142, 58, 36, 80, 68, 221, 112, 223 ));
      m_Handler        : AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind := new AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdvancedCapturedPhoto.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind_Delegate, AsyncOperationCompletedHandler_AdvancedCapturedPhoto.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Capture.AdvancedCapturedPhoto do
         Hr := this.m_IAdvancedPhotoCapture.all.CaptureAsync (context, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAdvancedCapturedPhoto := new Windows.Media.Capture.IAdvancedCapturedPhoto;
                  Retval.m_IAdvancedCapturedPhoto.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_OptionalReferencePhotoCaptured
   (
      this : in out AdvancedPhotoCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdvancedPhotoCapture.all.add_OptionalReferencePhotoCaptured (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_OptionalReferencePhotoCaptured
   (
      this : in out AdvancedPhotoCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdvancedPhotoCapture.all.remove_OptionalReferencePhotoCaptured (token);
   end;

   function add_AllPhotosCaptured
   (
      this : in out AdvancedPhotoCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAdvancedPhotoCapture.all.add_AllPhotosCaptured (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AllPhotosCaptured
   (
      this : in out AdvancedPhotoCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAdvancedPhotoCapture.all.remove_AllPhotosCaptured (token);
   end;

   procedure FinishAsync
   (
      this : in out AdvancedPhotoCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IAdvancedPhotoCapture.all.FinishAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastBackgroundService

   procedure Initialize (this : in out AppBroadcastBackgroundService) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastBackgroundService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastBackgroundService, IAppBroadcastBackgroundService_Ptr);
   begin
      if this.m_IAppBroadcastBackgroundService /= null then
         if this.m_IAppBroadcastBackgroundService.all /= null then
            RefCount := this.m_IAppBroadcastBackgroundService.all.Release;
            Free (this.m_IAppBroadcastBackgroundService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastBackgroundService

   procedure put_PlugInState
   (
      this : in out AppBroadcastBackgroundService;
      value : Windows.Media.Capture.AppBroadcastPlugInState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.put_PlugInState (value);
   end;

   function get_PlugInState
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPlugInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastPlugInState;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.get_PlugInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SignInInfo
   (
      this : in out AppBroadcastBackgroundService;
      value : Windows.Media.Capture.AppBroadcastBackgroundServiceSignInInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.put_SignInInfo (value.m_IAppBroadcastBackgroundServiceSignInInfo.all);
   end;

   function get_SignInInfo
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.Windows.Media.Capture.AppBroadcastBackgroundServiceSignInInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastBackgroundServiceSignInInfo do
         Hr := this.m_IAppBroadcastBackgroundService.all.get_SignInInfo (m_ComRetVal'Access);
         Retval.m_IAppBroadcastBackgroundServiceSignInInfo := new Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo;
         Retval.m_IAppBroadcastBackgroundServiceSignInInfo.all := m_ComRetVal;
      end return;
   end;

   procedure put_StreamInfo
   (
      this : in out AppBroadcastBackgroundService;
      value : Windows.Media.Capture.AppBroadcastBackgroundServiceStreamInfo'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.put_StreamInfo (value.m_IAppBroadcastBackgroundServiceStreamInfo.all);
   end;

   function get_StreamInfo
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.Windows.Media.Capture.AppBroadcastBackgroundServiceStreamInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastBackgroundServiceStreamInfo;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastBackgroundServiceStreamInfo do
         Hr := this.m_IAppBroadcastBackgroundService.all.get_StreamInfo (m_ComRetVal'Access);
         Retval.m_IAppBroadcastBackgroundServiceStreamInfo := new Windows.Media.Capture.IAppBroadcastBackgroundServiceStreamInfo;
         Retval.m_IAppBroadcastBackgroundServiceStreamInfo.all := m_ComRetVal;
      end return;
   end;

   function get_AppId
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.get_AppId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_BroadcastTitle
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.get_BroadcastTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ViewerCount
   (
      this : in out AppBroadcastBackgroundService;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.put_ViewerCount (value);
   end;

   function get_ViewerCount
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.get_ViewerCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure TerminateBroadcast
   (
      this : in out AppBroadcastBackgroundService;
      reason : Windows.Media.Capture.AppBroadcastTerminationReason;
      providerSpecificReason : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.TerminateBroadcast (reason, providerSpecificReason);
   end;

   function add_HeartbeatRequested
   (
      this : in out AppBroadcastBackgroundService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.add_HeartbeatRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_HeartbeatRequested
   (
      this : in out AppBroadcastBackgroundService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.remove_HeartbeatRequested (token);
   end;

   function get_TitleId
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastBackgroundService.all.get_TitleId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_BroadcastTitle
   (
      this : in out AppBroadcastBackgroundService;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.put_BroadcastTitle (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BroadcastLanguage
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.get_BroadcastLanguage (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_BroadcastLanguage
   (
      this : in out AppBroadcastBackgroundService;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.put_BroadcastLanguage (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BroadcastChannel
   (
      this : in out AppBroadcastBackgroundService
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.get_BroadcastChannel (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_BroadcastChannel
   (
      this : in out AppBroadcastBackgroundService;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.put_BroadcastChannel (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function add_BroadcastTitleChanged
   (
      this : in out AppBroadcastBackgroundService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.add_BroadcastTitleChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_BroadcastTitleChanged
   (
      this : in out AppBroadcastBackgroundService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.remove_BroadcastTitleChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_BroadcastLanguageChanged
   (
      this : in out AppBroadcastBackgroundService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.add_BroadcastLanguageChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_BroadcastLanguageChanged
   (
      this : in out AppBroadcastBackgroundService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.remove_BroadcastLanguageChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_BroadcastChannelChanged
   (
      this : in out AppBroadcastBackgroundService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.add_BroadcastChannelChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_BroadcastChannelChanged
   (
      this : in out AppBroadcastBackgroundService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundService2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundService2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundService.all);
      Hr := m_Interface.remove_BroadcastChannelChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastBackgroundServiceSignInInfo

   procedure Initialize (this : in out AppBroadcastBackgroundServiceSignInInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastBackgroundServiceSignInInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastBackgroundServiceSignInInfo, IAppBroadcastBackgroundServiceSignInInfo_Ptr);
   begin
      if this.m_IAppBroadcastBackgroundServiceSignInInfo /= null then
         if this.m_IAppBroadcastBackgroundServiceSignInInfo.all /= null then
            RefCount := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.Release;
            Free (this.m_IAppBroadcastBackgroundServiceSignInInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastBackgroundServiceSignInInfo

   function get_SignInState
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo
   )
   return WinRt.Windows.Media.Capture.AppBroadcastSignInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastSignInState;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.get_SignInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_OAuthRequestUri
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.put_OAuthRequestUri (value.m_IUriRuntimeClass.all);
   end;

   function get_OAuthRequestUri
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.get_OAuthRequestUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_OAuthCallbackUri
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.put_OAuthCallbackUri (value.m_IUriRuntimeClass.all);
   end;

   function get_OAuthCallbackUri
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.get_OAuthCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_AuthenticationResult
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo
   )
   return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.IWebAuthenticationResult;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
         Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.get_AuthenticationResult (m_ComRetVal'Access);
         Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
         Retval.m_IWebAuthenticationResult.all := m_ComRetVal;
      end return;
   end;

   procedure put_UserName
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.put_UserName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UserName
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function add_SignInStateChanged
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.add_SignInStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SignInStateChanged
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceSignInInfo.all.remove_SignInStateChanged (token);
   end;

   function add_UserNameChanged
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundServiceSignInInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundServiceSignInInfo.all);
      Hr := m_Interface.add_UserNameChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_UserNameChanged
   (
      this : in out AppBroadcastBackgroundServiceSignInInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceSignInInfo2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundServiceSignInInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundServiceSignInInfo.all);
      Hr := m_Interface.remove_UserNameChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastBackgroundServiceStreamInfo

   procedure Initialize (this : in out AppBroadcastBackgroundServiceStreamInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastBackgroundServiceStreamInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastBackgroundServiceStreamInfo, IAppBroadcastBackgroundServiceStreamInfo_Ptr);
   begin
      if this.m_IAppBroadcastBackgroundServiceStreamInfo /= null then
         if this.m_IAppBroadcastBackgroundServiceStreamInfo.all /= null then
            RefCount := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.Release;
            Free (this.m_IAppBroadcastBackgroundServiceStreamInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastBackgroundServiceStreamInfo

   function get_StreamState
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastStreamState;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.get_StreamState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DesiredVideoEncodingBitrate
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.put_DesiredVideoEncodingBitrate (value);
   end;

   function get_DesiredVideoEncodingBitrate
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.get_DesiredVideoEncodingBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BandwidthTestBitrate
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.put_BandwidthTestBitrate (value);
   end;

   function get_BandwidthTestBitrate
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.get_BandwidthTestBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AudioCodec
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.put_AudioCodec (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AudioCodec
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.get_AudioCodec (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_BroadcastStreamReader
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastStreamReader;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastStreamReader do
         Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.get_BroadcastStreamReader (m_ComRetVal'Access);
         Retval.m_IAppBroadcastStreamReader := new Windows.Media.Capture.IAppBroadcastStreamReader;
         Retval.m_IAppBroadcastStreamReader.all := m_ComRetVal;
      end return;
   end;

   function add_StreamStateChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.add_StreamStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StreamStateChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.remove_StreamStateChanged (token);
   end;

   function add_VideoEncodingResolutionChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.add_VideoEncodingResolutionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoEncodingResolutionChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.remove_VideoEncodingResolutionChanged (token);
   end;

   function add_VideoEncodingBitrateChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.add_VideoEncodingBitrateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoEncodingBitrateChanged
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastBackgroundServiceStreamInfo.all.remove_VideoEncodingBitrateChanged (token);
   end;

   procedure ReportProblemWithStream
   (
      this : in out AppBroadcastBackgroundServiceStreamInfo
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceStreamInfo2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceStreamInfo_Interface, WinRt.Windows.Media.Capture.IAppBroadcastBackgroundServiceStreamInfo2, WinRt.Windows.Media.Capture.IID_IAppBroadcastBackgroundServiceStreamInfo2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppBroadcastBackgroundServiceStreamInfo.all);
      Hr := m_Interface.ReportProblemWithStream;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastCameraCaptureStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastCameraCaptureStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastCameraCaptureStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastCameraCaptureStateChangedEventArgs, IAppBroadcastCameraCaptureStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastCameraCaptureStateChangedEventArgs /= null then
         if this.m_IAppBroadcastCameraCaptureStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastCameraCaptureStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastCameraCaptureStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastCameraCaptureStateChangedEventArgs

   function get_State
   (
      this : in out AppBroadcastCameraCaptureStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastCameraCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastCameraCaptureState;
   begin
      Hr := this.m_IAppBroadcastCameraCaptureStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppBroadcastCameraCaptureStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastCameraCaptureStateChangedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastGlobalSettings

   procedure Initialize (this : in out AppBroadcastGlobalSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastGlobalSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastGlobalSettings, IAppBroadcastGlobalSettings_Ptr);
   begin
      if this.m_IAppBroadcastGlobalSettings /= null then
         if this.m_IAppBroadcastGlobalSettings.all /= null then
            RefCount := this.m_IAppBroadcastGlobalSettings.all.Release;
            Free (this.m_IAppBroadcastGlobalSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastGlobalSettings

   function get_IsBroadcastEnabled
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsBroadcastEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDisabledByPolicy
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsDisabledByPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGpuConstrained
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsGpuConstrained (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasHardwareEncoder
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_HasHardwareEncoder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAudioCaptureEnabled
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_IsAudioCaptureEnabled (value);
   end;

   function get_IsAudioCaptureEnabled
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsAudioCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsMicrophoneCaptureEnabledByDefault
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_IsMicrophoneCaptureEnabledByDefault (value);
   end;

   function get_IsMicrophoneCaptureEnabledByDefault
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsMicrophoneCaptureEnabledByDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEchoCancellationEnabled
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_IsEchoCancellationEnabled (value);
   end;

   function get_IsEchoCancellationEnabled
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsEchoCancellationEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SystemAudioGain
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_SystemAudioGain (value);
   end;

   function get_SystemAudioGain
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_SystemAudioGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MicrophoneGain
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_MicrophoneGain (value);
   end;

   function get_MicrophoneGain
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_MicrophoneGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCameraCaptureEnabledByDefault
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_IsCameraCaptureEnabledByDefault (value);
   end;

   function get_IsCameraCaptureEnabledByDefault
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsCameraCaptureEnabledByDefault (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SelectedCameraId
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_SelectedCameraId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_SelectedCameraId
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_SelectedCameraId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CameraOverlayLocation
   (
      this : in out AppBroadcastGlobalSettings;
      value : Windows.Media.Capture.AppBroadcastCameraOverlayLocation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_CameraOverlayLocation (value);
   end;

   function get_CameraOverlayLocation
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Windows.Media.Capture.AppBroadcastCameraOverlayLocation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastCameraOverlayLocation;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_CameraOverlayLocation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CameraOverlaySize
   (
      this : in out AppBroadcastGlobalSettings;
      value : Windows.Media.Capture.AppBroadcastCameraOverlaySize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_CameraOverlaySize (value);
   end;

   function get_CameraOverlaySize
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Windows.Media.Capture.AppBroadcastCameraOverlaySize is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastCameraOverlaySize;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_CameraOverlaySize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsCursorImageCaptureEnabled
   (
      this : in out AppBroadcastGlobalSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.put_IsCursorImageCaptureEnabled (value);
   end;

   function get_IsCursorImageCaptureEnabled
   (
      this : in out AppBroadcastGlobalSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastGlobalSettings.all.get_IsCursorImageCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastHeartbeatRequestedEventArgs

   procedure Initialize (this : in out AppBroadcastHeartbeatRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastHeartbeatRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastHeartbeatRequestedEventArgs, IAppBroadcastHeartbeatRequestedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastHeartbeatRequestedEventArgs /= null then
         if this.m_IAppBroadcastHeartbeatRequestedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastHeartbeatRequestedEventArgs.all.Release;
            Free (this.m_IAppBroadcastHeartbeatRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastHeartbeatRequestedEventArgs

   procedure put_Handled
   (
      this : in out AppBroadcastHeartbeatRequestedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastHeartbeatRequestedEventArgs.all.put_Handled (value);
   end;

   function get_Handled
   (
      this : in out AppBroadcastHeartbeatRequestedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastHeartbeatRequestedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppBroadcastManager is

      function GetGlobalSettings
      return WinRt.Windows.Media.Capture.AppBroadcastGlobalSettings is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastGlobalSettings;
      begin
         return RetVal : WinRt.Windows.Media.Capture.AppBroadcastGlobalSettings do
            Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetGlobalSettings (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAppBroadcastGlobalSettings := new Windows.Media.Capture.IAppBroadcastGlobalSettings;
               Retval.m_IAppBroadcastGlobalSettings.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ApplyGlobalSettings
      (
         value : Windows.Media.Capture.AppBroadcastGlobalSettings'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ApplyGlobalSettings (value.m_IAppBroadcastGlobalSettings.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function GetProviderSettings
      return WinRt.Windows.Media.Capture.AppBroadcastProviderSettings is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastProviderSettings;
      begin
         return RetVal : WinRt.Windows.Media.Capture.AppBroadcastProviderSettings do
            Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetProviderSettings (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAppBroadcastProviderSettings := new Windows.Media.Capture.IAppBroadcastProviderSettings;
               Retval.m_IAppBroadcastProviderSettings.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ApplyProviderSettings
      (
         value : Windows.Media.Capture.AppBroadcastProviderSettings'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ApplyProviderSettings (value.m_IAppBroadcastProviderSettings.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end AppBroadcastManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastMicrophoneCaptureStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastMicrophoneCaptureStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastMicrophoneCaptureStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastMicrophoneCaptureStateChangedEventArgs, IAppBroadcastMicrophoneCaptureStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs /= null then
         if this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastMicrophoneCaptureStateChangedEventArgs

   function get_State
   (
      this : in out AppBroadcastMicrophoneCaptureStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastMicrophoneCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastMicrophoneCaptureState;
   begin
      Hr := this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppBroadcastMicrophoneCaptureStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastMicrophoneCaptureStateChangedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPlugIn

   procedure Initialize (this : in out AppBroadcastPlugIn) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPlugIn) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPlugIn, IAppBroadcastPlugIn_Ptr);
   begin
      if this.m_IAppBroadcastPlugIn /= null then
         if this.m_IAppBroadcastPlugIn.all /= null then
            RefCount := this.m_IAppBroadcastPlugIn.all.Release;
            Free (this.m_IAppBroadcastPlugIn);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPlugIn

   function get_AppId
   (
      this : in out AppBroadcastPlugIn
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastPlugIn.all.get_AppId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ProviderSettings
   (
      this : in out AppBroadcastPlugIn
   )
   return WinRt.Windows.Media.Capture.AppBroadcastProviderSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastProviderSettings;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastProviderSettings do
         Hr := this.m_IAppBroadcastPlugIn.all.get_ProviderSettings (m_ComRetVal'Access);
         Retval.m_IAppBroadcastProviderSettings := new Windows.Media.Capture.IAppBroadcastProviderSettings;
         Retval.m_IAppBroadcastProviderSettings.all := m_ComRetVal;
      end return;
   end;

   function get_Logo
   (
      this : in out AppBroadcastPlugIn
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IAppBroadcastPlugIn.all.get_Logo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DisplayName
   (
      this : in out AppBroadcastPlugIn
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastPlugIn.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPlugInManager

   procedure Initialize (this : in out AppBroadcastPlugInManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPlugInManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPlugInManager, IAppBroadcastPlugInManager_Ptr);
   begin
      if this.m_IAppBroadcastPlugInManager /= null then
         if this.m_IAppBroadcastPlugInManager.all /= null then
            RefCount := this.m_IAppBroadcastPlugInManager.all.Release;
            Free (this.m_IAppBroadcastPlugInManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppBroadcastPlugInManager

   function GetDefault
   return WinRt.Windows.Media.Capture.AppBroadcastPlugInManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastPlugInManager");
      m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastPlugInManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPlugInManager;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPlugInManager do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastPlugInManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppBroadcastPlugInManager := new Windows.Media.Capture.IAppBroadcastPlugInManager;
            Retval.m_IAppBroadcastPlugInManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPlugInManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppBroadcastPlugInManager");
      m_Factory        : access WinRt.Windows.Media.Capture.IAppBroadcastPlugInManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPlugInManager;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPlugInManager do
         Hr := RoGetActivationFactory (m_hString, IID_IAppBroadcastPlugInManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppBroadcastPlugInManager := new Windows.Media.Capture.IAppBroadcastPlugInManager;
            Retval.m_IAppBroadcastPlugInManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPlugInManager

   function get_IsBroadcastProviderAvailable
   (
      this : in out AppBroadcastPlugInManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastPlugInManager.all.get_IsBroadcastProviderAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PlugInList
   (
      this : in out AppBroadcastPlugInManager
   )
   return IVectorView_IAppBroadcastPlugIn.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppBroadcastPlugIn.Kind;
   begin
      Hr := this.m_IAppBroadcastPlugInManager.all.get_PlugInList (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppBroadcastPlugIn (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_DefaultPlugIn
   (
      this : in out AppBroadcastPlugInManager
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPlugIn'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPlugIn;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPlugIn do
         Hr := this.m_IAppBroadcastPlugInManager.all.get_DefaultPlugIn (m_ComRetVal'Access);
         Retval.m_IAppBroadcastPlugIn := new Windows.Media.Capture.IAppBroadcastPlugIn;
         Retval.m_IAppBroadcastPlugIn.all := m_ComRetVal;
      end return;
   end;

   procedure put_DefaultPlugIn
   (
      this : in out AppBroadcastPlugInManager;
      value : Windows.Media.Capture.AppBroadcastPlugIn'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastPlugInManager.all.put_DefaultPlugIn (value.m_IAppBroadcastPlugIn.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPlugInStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastPlugInStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPlugInStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPlugInStateChangedEventArgs, IAppBroadcastPlugInStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastPlugInStateChangedEventArgs /= null then
         if this.m_IAppBroadcastPlugInStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastPlugInStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastPlugInStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPlugInStateChangedEventArgs

   function get_PlugInState
   (
      this : in out AppBroadcastPlugInStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPlugInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastPlugInState;
   begin
      Hr := this.m_IAppBroadcastPlugInStateChangedEventArgs.all.get_PlugInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPreview

   procedure Initialize (this : in out AppBroadcastPreview) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPreview) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPreview, IAppBroadcastPreview_Ptr);
   begin
      if this.m_IAppBroadcastPreview /= null then
         if this.m_IAppBroadcastPreview.all /= null then
            RefCount := this.m_IAppBroadcastPreview.all.Release;
            Free (this.m_IAppBroadcastPreview);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPreview

   procedure StopPreview
   (
      this : in out AppBroadcastPreview
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastPreview.all.StopPreview;
   end;

   function get_PreviewState
   (
      this : in out AppBroadcastPreview
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreviewState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastPreviewState;
   begin
      Hr := this.m_IAppBroadcastPreview.all.get_PreviewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppBroadcastPreview
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAppBroadcastPreview.all.get_ErrorCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_PreviewStateChanged
   (
      this : in out AppBroadcastPreview;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastPreview.all.add_PreviewStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PreviewStateChanged
   (
      this : in out AppBroadcastPreview;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastPreview.all.remove_PreviewStateChanged (token);
   end;

   function get_PreviewStreamReader
   (
      this : in out AppBroadcastPreview
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPreviewStreamReader;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamReader do
         Hr := this.m_IAppBroadcastPreview.all.get_PreviewStreamReader (m_ComRetVal'Access);
         Retval.m_IAppBroadcastPreviewStreamReader := new Windows.Media.Capture.IAppBroadcastPreviewStreamReader;
         Retval.m_IAppBroadcastPreviewStreamReader.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPreviewStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastPreviewStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPreviewStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPreviewStateChangedEventArgs, IAppBroadcastPreviewStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastPreviewStateChangedEventArgs /= null then
         if this.m_IAppBroadcastPreviewStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastPreviewStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastPreviewStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPreviewStateChangedEventArgs

   function get_PreviewState
   (
      this : in out AppBroadcastPreviewStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreviewState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastPreviewState;
   begin
      Hr := this.m_IAppBroadcastPreviewStateChangedEventArgs.all.get_PreviewState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppBroadcastPreviewStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastPreviewStateChangedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPreviewStreamReader

   procedure Initialize (this : in out AppBroadcastPreviewStreamReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPreviewStreamReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPreviewStreamReader, IAppBroadcastPreviewStreamReader_Ptr);
   begin
      if this.m_IAppBroadcastPreviewStreamReader /= null then
         if this.m_IAppBroadcastPreviewStreamReader.all /= null then
            RefCount := this.m_IAppBroadcastPreviewStreamReader.all.Release;
            Free (this.m_IAppBroadcastPreviewStreamReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPreviewStreamReader

   function get_VideoWidth
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.get_VideoWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoHeight
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.get_VideoHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoStride
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.get_VideoStride (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoBitmapPixelFormat
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPixelFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapPixelFormat;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.get_VideoBitmapPixelFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoBitmapAlphaMode
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.Windows.Graphics.Imaging.BitmapAlphaMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.BitmapAlphaMode;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.get_VideoBitmapAlphaMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetNextVideoFrame
   (
      this : in out AppBroadcastPreviewStreamReader
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamVideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPreviewStreamVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamVideoFrame do
         Hr := this.m_IAppBroadcastPreviewStreamReader.all.TryGetNextVideoFrame (m_ComRetVal'Access);
         Retval.m_IAppBroadcastPreviewStreamVideoFrame := new Windows.Media.Capture.IAppBroadcastPreviewStreamVideoFrame;
         Retval.m_IAppBroadcastPreviewStreamVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function add_VideoFrameArrived
   (
      this : in out AppBroadcastPreviewStreamReader;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.add_VideoFrameArrived (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoFrameArrived
   (
      this : in out AppBroadcastPreviewStreamReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamReader.all.remove_VideoFrameArrived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPreviewStreamVideoFrame

   procedure Initialize (this : in out AppBroadcastPreviewStreamVideoFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPreviewStreamVideoFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPreviewStreamVideoFrame, IAppBroadcastPreviewStreamVideoFrame_Ptr);
   begin
      if this.m_IAppBroadcastPreviewStreamVideoFrame /= null then
         if this.m_IAppBroadcastPreviewStreamVideoFrame.all /= null then
            RefCount := this.m_IAppBroadcastPreviewStreamVideoFrame.all.Release;
            Free (this.m_IAppBroadcastPreviewStreamVideoFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPreviewStreamVideoFrame

   function get_VideoHeader
   (
      this : in out AppBroadcastPreviewStreamVideoFrame
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamVideoHeader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPreviewStreamVideoHeader;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPreviewStreamVideoHeader do
         Hr := this.m_IAppBroadcastPreviewStreamVideoFrame.all.get_VideoHeader (m_ComRetVal'Access);
         Retval.m_IAppBroadcastPreviewStreamVideoHeader := new Windows.Media.Capture.IAppBroadcastPreviewStreamVideoHeader;
         Retval.m_IAppBroadcastPreviewStreamVideoHeader.all := m_ComRetVal;
      end return;
   end;

   function get_VideoBuffer
   (
      this : in out AppBroadcastPreviewStreamVideoFrame
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamVideoFrame.all.get_VideoBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastPreviewStreamVideoHeader

   procedure Initialize (this : in out AppBroadcastPreviewStreamVideoHeader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastPreviewStreamVideoHeader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastPreviewStreamVideoHeader, IAppBroadcastPreviewStreamVideoHeader_Ptr);
   begin
      if this.m_IAppBroadcastPreviewStreamVideoHeader /= null then
         if this.m_IAppBroadcastPreviewStreamVideoHeader.all /= null then
            RefCount := this.m_IAppBroadcastPreviewStreamVideoHeader.all.Release;
            Free (this.m_IAppBroadcastPreviewStreamVideoHeader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastPreviewStreamVideoHeader

   function get_AbsoluteTimestamp
   (
      this : in out AppBroadcastPreviewStreamVideoHeader
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamVideoHeader.all.get_AbsoluteTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RelativeTimestamp
   (
      this : in out AppBroadcastPreviewStreamVideoHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamVideoHeader.all.get_RelativeTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out AppBroadcastPreviewStreamVideoHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamVideoHeader.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameId
   (
      this : in out AppBroadcastPreviewStreamVideoHeader
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppBroadcastPreviewStreamVideoHeader.all.get_FrameId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastProviderSettings

   procedure Initialize (this : in out AppBroadcastProviderSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastProviderSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastProviderSettings, IAppBroadcastProviderSettings_Ptr);
   begin
      if this.m_IAppBroadcastProviderSettings /= null then
         if this.m_IAppBroadcastProviderSettings.all /= null then
            RefCount := this.m_IAppBroadcastProviderSettings.all.Release;
            Free (this.m_IAppBroadcastProviderSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastProviderSettings

   procedure put_DefaultBroadcastTitle
   (
      this : in out AppBroadcastProviderSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_DefaultBroadcastTitle (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_DefaultBroadcastTitle
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_DefaultBroadcastTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AudioEncodingBitrate
   (
      this : in out AppBroadcastProviderSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_AudioEncodingBitrate (value);
   end;

   function get_AudioEncodingBitrate
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_AudioEncodingBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingBitrate
   (
      this : in out AppBroadcastProviderSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_CustomVideoEncodingBitrate (value);
   end;

   function get_CustomVideoEncodingBitrate
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_CustomVideoEncodingBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingHeight
   (
      this : in out AppBroadcastProviderSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_CustomVideoEncodingHeight (value);
   end;

   function get_CustomVideoEncodingHeight
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_CustomVideoEncodingHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingWidth
   (
      this : in out AppBroadcastProviderSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_CustomVideoEncodingWidth (value);
   end;

   function get_CustomVideoEncodingWidth
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_CustomVideoEncodingWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VideoEncodingBitrateMode
   (
      this : in out AppBroadcastProviderSettings;
      value : Windows.Media.Capture.AppBroadcastVideoEncodingBitrateMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_VideoEncodingBitrateMode (value);
   end;

   function get_VideoEncodingBitrateMode
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.Windows.Media.Capture.AppBroadcastVideoEncodingBitrateMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastVideoEncodingBitrateMode;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_VideoEncodingBitrateMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VideoEncodingResolutionMode
   (
      this : in out AppBroadcastProviderSettings;
      value : Windows.Media.Capture.AppBroadcastVideoEncodingResolutionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.put_VideoEncodingResolutionMode (value);
   end;

   function get_VideoEncodingResolutionMode
   (
      this : in out AppBroadcastProviderSettings
   )
   return WinRt.Windows.Media.Capture.AppBroadcastVideoEncodingResolutionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastVideoEncodingResolutionMode;
   begin
      Hr := this.m_IAppBroadcastProviderSettings.all.get_VideoEncodingResolutionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastServices

   procedure Initialize (this : in out AppBroadcastServices) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastServices) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastServices, IAppBroadcastServices_Ptr);
   begin
      if this.m_IAppBroadcastServices /= null then
         if this.m_IAppBroadcastServices.all /= null then
            RefCount := this.m_IAppBroadcastServices.all.Release;
            Free (this.m_IAppBroadcastServices);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastServices

   function get_CaptureTargetType
   (
      this : in out AppBroadcastServices
   )
   return WinRt.Windows.Media.Capture.AppBroadcastCaptureTargetType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastCaptureTargetType;
   begin
      Hr := this.m_IAppBroadcastServices.all.get_CaptureTargetType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CaptureTargetType
   (
      this : in out AppBroadcastServices;
      value : Windows.Media.Capture.AppBroadcastCaptureTargetType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastServices.all.put_CaptureTargetType (value);
   end;

   function get_BroadcastTitle
   (
      this : in out AppBroadcastServices
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastServices.all.get_BroadcastTitle (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_BroadcastTitle
   (
      this : in out AppBroadcastServices;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastServices.all.put_BroadcastTitle (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BroadcastLanguage
   (
      this : in out AppBroadcastServices
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastServices.all.get_BroadcastLanguage (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_BroadcastLanguage
   (
      this : in out AppBroadcastServices;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppBroadcastServices.all.put_BroadcastLanguage (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_UserName
   (
      this : in out AppBroadcastServices
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppBroadcastServices.all.get_UserName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_CanCapture
   (
      this : in out AppBroadcastServices
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastServices.all.get_CanCapture (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function EnterBroadcastModeAsync
   (
      this : in out AppBroadcastServices;
      plugIn : Windows.Media.Capture.AppBroadcastPlugIn'Class
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppBroadcastServices.all.EnterBroadcastModeAsync (plugIn.m_IAppBroadcastPlugIn.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure ExitBroadcastMode
   (
      this : in out AppBroadcastServices;
      reason : Windows.Media.Capture.AppBroadcastExitBroadcastModeReason
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastServices.all.ExitBroadcastMode (reason);
   end;

   procedure StartBroadcast
   (
      this : in out AppBroadcastServices
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastServices.all.StartBroadcast;
   end;

   procedure PauseBroadcast
   (
      this : in out AppBroadcastServices
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastServices.all.PauseBroadcast;
   end;

   procedure ResumeBroadcast
   (
      this : in out AppBroadcastServices
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastServices.all.ResumeBroadcast;
   end;

   function StartPreview
   (
      this : in out AppBroadcastServices;
      desiredSize : Windows.Foundation.Size
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPreview'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastPreview;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastPreview do
         Hr := this.m_IAppBroadcastServices.all.StartPreview (desiredSize, m_ComRetVal'Access);
         Retval.m_IAppBroadcastPreview := new Windows.Media.Capture.IAppBroadcastPreview;
         Retval.m_IAppBroadcastPreview.all := m_ComRetVal;
      end return;
   end;

   function get_State
   (
      this : in out AppBroadcastServices
   )
   return WinRt.Windows.Media.Capture.AppBroadcastState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastState;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastState do
         Hr := this.m_IAppBroadcastServices.all.get_State (m_ComRetVal'Access);
         Retval.m_IAppBroadcastState := new Windows.Media.Capture.IAppBroadcastState;
         Retval.m_IAppBroadcastState.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastSignInStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastSignInStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastSignInStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastSignInStateChangedEventArgs, IAppBroadcastSignInStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastSignInStateChangedEventArgs /= null then
         if this.m_IAppBroadcastSignInStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastSignInStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastSignInStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastSignInStateChangedEventArgs

   function get_SignInState
   (
      this : in out AppBroadcastSignInStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastSignInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastSignInState;
   begin
      Hr := this.m_IAppBroadcastSignInStateChangedEventArgs.all.get_SignInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Result
   (
      this : in out AppBroadcastSignInStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastSignInResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastSignInResult;
   begin
      Hr := this.m_IAppBroadcastSignInStateChangedEventArgs.all.get_Result (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastState

   procedure Initialize (this : in out AppBroadcastState) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastState, IAppBroadcastState_Ptr);
   begin
      if this.m_IAppBroadcastState /= null then
         if this.m_IAppBroadcastState.all /= null then
            RefCount := this.m_IAppBroadcastState.all.Release;
            Free (this.m_IAppBroadcastState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastState

   function get_IsCaptureTargetRunning
   (
      this : in out AppBroadcastState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastState.all.get_IsCaptureTargetRunning (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ViewerCount
   (
      this : in out AppBroadcastState
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastState.all.get_ViewerCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ShouldCaptureMicrophone
   (
      this : in out AppBroadcastState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastState.all.get_ShouldCaptureMicrophone (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldCaptureMicrophone
   (
      this : in out AppBroadcastState;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.put_ShouldCaptureMicrophone (value);
   end;

   procedure RestartMicrophoneCapture
   (
      this : in out AppBroadcastState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.RestartMicrophoneCapture;
   end;

   function get_ShouldCaptureCamera
   (
      this : in out AppBroadcastState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastState.all.get_ShouldCaptureCamera (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldCaptureCamera
   (
      this : in out AppBroadcastState;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.put_ShouldCaptureCamera (value);
   end;

   procedure RestartCameraCapture
   (
      this : in out AppBroadcastState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.RestartCameraCapture;
   end;

   function get_EncodedVideoSize
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_IAppBroadcastState.all.get_EncodedVideoSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MicrophoneCaptureState
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastMicrophoneCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastMicrophoneCaptureState;
   begin
      Hr := this.m_IAppBroadcastState.all.get_MicrophoneCaptureState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MicrophoneCaptureError
   (
      this : in out AppBroadcastState
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastState.all.get_MicrophoneCaptureError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CameraCaptureState
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastCameraCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastCameraCaptureState;
   begin
      Hr := this.m_IAppBroadcastState.all.get_CameraCaptureState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_CameraCaptureError
   (
      this : in out AppBroadcastState
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastState.all.get_CameraCaptureError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_StreamState
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastStreamState;
   begin
      Hr := this.m_IAppBroadcastState.all.get_StreamState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PlugInState
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastPlugInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastPlugInState;
   begin
      Hr := this.m_IAppBroadcastState.all.get_PlugInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_OAuthRequestUri
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppBroadcastState.all.get_OAuthRequestUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_OAuthCallbackUri
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IAppBroadcastState.all.get_OAuthCallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_AuthenticationResult
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Authentication.Web.IWebAuthenticationResult;
   begin
      return RetVal : WinRt.Windows.Security.Authentication.Web.WebAuthenticationResult do
         Hr := this.m_IAppBroadcastState.all.get_AuthenticationResult (m_ComRetVal'Access);
         Retval.m_IWebAuthenticationResult := new Windows.Security.Authentication.Web.IWebAuthenticationResult;
         Retval.m_IWebAuthenticationResult.all := m_ComRetVal;
      end return;
   end;

   procedure put_AuthenticationResult
   (
      this : in out AppBroadcastState;
      value : Windows.Security.Authentication.Web.WebAuthenticationResult'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.put_AuthenticationResult (value.m_IWebAuthenticationResult.all);
   end;

   procedure put_SignInState
   (
      this : in out AppBroadcastState;
      value : Windows.Media.Capture.AppBroadcastSignInState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.put_SignInState (value);
   end;

   function get_SignInState
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastSignInState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastSignInState;
   begin
      Hr := this.m_IAppBroadcastState.all.get_SignInState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TerminationReason
   (
      this : in out AppBroadcastState
   )
   return WinRt.Windows.Media.Capture.AppBroadcastTerminationReason is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastTerminationReason;
   begin
      Hr := this.m_IAppBroadcastState.all.get_TerminationReason (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_TerminationReasonPlugInSpecific
   (
      this : in out AppBroadcastState
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastState.all.get_TerminationReasonPlugInSpecific (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ViewerCountChanged
   (
      this : in out AppBroadcastState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_ViewerCountChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ViewerCountChanged
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_ViewerCountChanged (token);
   end;

   function add_MicrophoneCaptureStateChanged
   (
      this : in out AppBroadcastState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_MicrophoneCaptureStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MicrophoneCaptureStateChanged
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_MicrophoneCaptureStateChanged (token);
   end;

   function add_CameraCaptureStateChanged
   (
      this : in out AppBroadcastState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_CameraCaptureStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CameraCaptureStateChanged
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_CameraCaptureStateChanged (token);
   end;

   function add_PlugInStateChanged
   (
      this : in out AppBroadcastState;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_PlugInStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PlugInStateChanged
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_PlugInStateChanged (token);
   end;

   function add_StreamStateChanged
   (
      this : in out AppBroadcastState;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_StreamStateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StreamStateChanged
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_StreamStateChanged (token);
   end;

   function add_CaptureTargetClosed
   (
      this : in out AppBroadcastState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastState.all.add_CaptureTargetClosed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CaptureTargetClosed
   (
      this : in out AppBroadcastState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastState.all.remove_CaptureTargetClosed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamAudioFrame

   procedure Initialize (this : in out AppBroadcastStreamAudioFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamAudioFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamAudioFrame, IAppBroadcastStreamAudioFrame_Ptr);
   begin
      if this.m_IAppBroadcastStreamAudioFrame /= null then
         if this.m_IAppBroadcastStreamAudioFrame.all /= null then
            RefCount := this.m_IAppBroadcastStreamAudioFrame.all.Release;
            Free (this.m_IAppBroadcastStreamAudioFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamAudioFrame

   function get_AudioHeader
   (
      this : in out AppBroadcastStreamAudioFrame
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamAudioHeader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastStreamAudioHeader;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastStreamAudioHeader do
         Hr := this.m_IAppBroadcastStreamAudioFrame.all.get_AudioHeader (m_ComRetVal'Access);
         Retval.m_IAppBroadcastStreamAudioHeader := new Windows.Media.Capture.IAppBroadcastStreamAudioHeader;
         Retval.m_IAppBroadcastStreamAudioHeader.all := m_ComRetVal;
      end return;
   end;

   function get_AudioBuffer
   (
      this : in out AppBroadcastStreamAudioFrame
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAppBroadcastStreamAudioFrame.all.get_AudioBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamAudioHeader

   procedure Initialize (this : in out AppBroadcastStreamAudioHeader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamAudioHeader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamAudioHeader, IAppBroadcastStreamAudioHeader_Ptr);
   begin
      if this.m_IAppBroadcastStreamAudioHeader /= null then
         if this.m_IAppBroadcastStreamAudioHeader.all /= null then
            RefCount := this.m_IAppBroadcastStreamAudioHeader.all.Release;
            Free (this.m_IAppBroadcastStreamAudioHeader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamAudioHeader

   function get_AbsoluteTimestamp
   (
      this : in out AppBroadcastStreamAudioHeader
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppBroadcastStreamAudioHeader.all.get_AbsoluteTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RelativeTimestamp
   (
      this : in out AppBroadcastStreamAudioHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastStreamAudioHeader.all.get_RelativeTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out AppBroadcastStreamAudioHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastStreamAudioHeader.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasDiscontinuity
   (
      this : in out AppBroadcastStreamAudioHeader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastStreamAudioHeader.all.get_HasDiscontinuity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameId
   (
      this : in out AppBroadcastStreamAudioHeader
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppBroadcastStreamAudioHeader.all.get_FrameId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamReader

   procedure Initialize (this : in out AppBroadcastStreamReader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamReader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamReader, IAppBroadcastStreamReader_Ptr);
   begin
      if this.m_IAppBroadcastStreamReader /= null then
         if this.m_IAppBroadcastStreamReader.all /= null then
            RefCount := this.m_IAppBroadcastStreamReader.all.Release;
            Free (this.m_IAppBroadcastStreamReader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamReader

   function get_AudioChannels
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_AudioChannels (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AudioSampleRate
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_AudioSampleRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AudioAacSequence
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_AudioAacSequence (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AudioBitrate
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_AudioBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetNextAudioFrame
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamAudioFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastStreamAudioFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastStreamAudioFrame do
         Hr := this.m_IAppBroadcastStreamReader.all.TryGetNextAudioFrame (m_ComRetVal'Access);
         Retval.m_IAppBroadcastStreamAudioFrame := new Windows.Media.Capture.IAppBroadcastStreamAudioFrame;
         Retval.m_IAppBroadcastStreamAudioFrame.all := m_ComRetVal;
      end return;
   end;

   function get_VideoWidth
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_VideoWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoHeight
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_VideoHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoBitrate
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.get_VideoBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function TryGetNextVideoFrame
   (
      this : in out AppBroadcastStreamReader
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamVideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastStreamVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastStreamVideoFrame do
         Hr := this.m_IAppBroadcastStreamReader.all.TryGetNextVideoFrame (m_ComRetVal'Access);
         Retval.m_IAppBroadcastStreamVideoFrame := new Windows.Media.Capture.IAppBroadcastStreamVideoFrame;
         Retval.m_IAppBroadcastStreamVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function add_AudioFrameArrived
   (
      this : in out AppBroadcastStreamReader;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.add_AudioFrameArrived (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AudioFrameArrived
   (
      this : in out AppBroadcastStreamReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.remove_AudioFrameArrived (token);
   end;

   function add_VideoFrameArrived
   (
      this : in out AppBroadcastStreamReader;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.add_VideoFrameArrived (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_VideoFrameArrived
   (
      this : in out AppBroadcastStreamReader;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppBroadcastStreamReader.all.remove_VideoFrameArrived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamStateChangedEventArgs

   procedure Initialize (this : in out AppBroadcastStreamStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamStateChangedEventArgs, IAppBroadcastStreamStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastStreamStateChangedEventArgs /= null then
         if this.m_IAppBroadcastStreamStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastStreamStateChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastStreamStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamStateChangedEventArgs

   function get_StreamState
   (
      this : in out AppBroadcastStreamStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppBroadcastStreamState;
   begin
      Hr := this.m_IAppBroadcastStreamStateChangedEventArgs.all.get_StreamState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamVideoFrame

   procedure Initialize (this : in out AppBroadcastStreamVideoFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamVideoFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamVideoFrame, IAppBroadcastStreamVideoFrame_Ptr);
   begin
      if this.m_IAppBroadcastStreamVideoFrame /= null then
         if this.m_IAppBroadcastStreamVideoFrame.all /= null then
            RefCount := this.m_IAppBroadcastStreamVideoFrame.all.Release;
            Free (this.m_IAppBroadcastStreamVideoFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamVideoFrame

   function get_VideoHeader
   (
      this : in out AppBroadcastStreamVideoFrame
   )
   return WinRt.Windows.Media.Capture.AppBroadcastStreamVideoHeader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastStreamVideoHeader;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastStreamVideoHeader do
         Hr := this.m_IAppBroadcastStreamVideoFrame.all.get_VideoHeader (m_ComRetVal'Access);
         Retval.m_IAppBroadcastStreamVideoHeader := new Windows.Media.Capture.IAppBroadcastStreamVideoHeader;
         Retval.m_IAppBroadcastStreamVideoHeader.all := m_ComRetVal;
      end return;
   end;

   function get_VideoBuffer
   (
      this : in out AppBroadcastStreamVideoFrame
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IAppBroadcastStreamVideoFrame.all.get_VideoBuffer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastStreamVideoHeader

   procedure Initialize (this : in out AppBroadcastStreamVideoHeader) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastStreamVideoHeader) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastStreamVideoHeader, IAppBroadcastStreamVideoHeader_Ptr);
   begin
      if this.m_IAppBroadcastStreamVideoHeader /= null then
         if this.m_IAppBroadcastStreamVideoHeader.all /= null then
            RefCount := this.m_IAppBroadcastStreamVideoHeader.all.Release;
            Free (this.m_IAppBroadcastStreamVideoHeader);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastStreamVideoHeader

   function get_AbsoluteTimestamp
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_AbsoluteTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RelativeTimestamp
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_RelativeTimestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Duration
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsKeyFrame
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_IsKeyFrame (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasDiscontinuity
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_HasDiscontinuity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameId
   (
      this : in out AppBroadcastStreamVideoHeader
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppBroadcastStreamVideoHeader.all.get_FrameId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastTriggerDetails

   procedure Initialize (this : in out AppBroadcastTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastTriggerDetails, IAppBroadcastTriggerDetails_Ptr);
   begin
      if this.m_IAppBroadcastTriggerDetails /= null then
         if this.m_IAppBroadcastTriggerDetails.all /= null then
            RefCount := this.m_IAppBroadcastTriggerDetails.all.Release;
            Free (this.m_IAppBroadcastTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastTriggerDetails

   function get_BackgroundService
   (
      this : in out AppBroadcastTriggerDetails
   )
   return WinRt.Windows.Media.Capture.AppBroadcastBackgroundService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastBackgroundService;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastBackgroundService do
         Hr := this.m_IAppBroadcastTriggerDetails.all.get_BackgroundService (m_ComRetVal'Access);
         Retval.m_IAppBroadcastBackgroundService := new Windows.Media.Capture.IAppBroadcastBackgroundService;
         Retval.m_IAppBroadcastBackgroundService.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppBroadcastViewerCountChangedEventArgs

   procedure Initialize (this : in out AppBroadcastViewerCountChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppBroadcastViewerCountChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppBroadcastViewerCountChangedEventArgs, IAppBroadcastViewerCountChangedEventArgs_Ptr);
   begin
      if this.m_IAppBroadcastViewerCountChangedEventArgs /= null then
         if this.m_IAppBroadcastViewerCountChangedEventArgs.all /= null then
            RefCount := this.m_IAppBroadcastViewerCountChangedEventArgs.all.Release;
            Free (this.m_IAppBroadcastViewerCountChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppBroadcastViewerCountChangedEventArgs

   function get_ViewerCount
   (
      this : in out AppBroadcastViewerCountChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppBroadcastViewerCountChangedEventArgs.all.get_ViewerCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCapture

   procedure Initialize (this : in out AppCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCapture, IAppCapture_Ptr);
   begin
      if this.m_IAppCapture /= null then
         if this.m_IAppCapture.all /= null then
            RefCount := this.m_IAppCapture.all.Release;
            Free (this.m_IAppCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AppCapture

   function GetForCurrentView
   return WinRt.Windows.Media.Capture.AppCapture is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IAppCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCapture;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCapture do
         Hr := RoGetActivationFactory (m_hString, IID_IAppCaptureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAppCapture := new Windows.Media.Capture.IAppCapture;
            Retval.m_IAppCapture.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure SetAllowedAsync
   (
      allowed : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IAppCaptureStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := RoGetActivationFactory (m_hString, IID_IAppCaptureStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.SetAllowedAsync (allowed, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
         if Hr = S_OK then
            m_Captured := m_Completed;
            Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            m_RefCount := m_ComRetVal.Release;
            m_RefCount := m_CompletedHandler.Release;
            if m_RefCount = 0 then
               Free (m_CompletedHandler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCapture

   function get_IsCapturingAudio
   (
      this : in out AppCapture
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCapture.all.get_IsCapturingAudio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCapturingVideo
   (
      this : in out AppCapture
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCapture.all.get_IsCapturingVideo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_CapturingChanged
   (
      this : in out AppCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCapture.all.add_CapturingChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CapturingChanged
   (
      this : in out AppCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCapture.all.remove_CapturingChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureAlternateShortcutKeys

   procedure Initialize (this : in out AppCaptureAlternateShortcutKeys) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureAlternateShortcutKeys) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureAlternateShortcutKeys, IAppCaptureAlternateShortcutKeys_Ptr);
   begin
      if this.m_IAppCaptureAlternateShortcutKeys /= null then
         if this.m_IAppCaptureAlternateShortcutKeys.all /= null then
            RefCount := this.m_IAppCaptureAlternateShortcutKeys.all.Release;
            Free (this.m_IAppCaptureAlternateShortcutKeys);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureAlternateShortcutKeys

   procedure put_ToggleGameBarKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleGameBarKey (value);
   end;

   function get_ToggleGameBarKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleGameBarKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleGameBarKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleGameBarKeyModifiers (value);
   end;

   function get_ToggleGameBarKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleGameBarKeyModifiers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SaveHistoricalVideoKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_SaveHistoricalVideoKey (value);
   end;

   function get_SaveHistoricalVideoKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_SaveHistoricalVideoKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SaveHistoricalVideoKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_SaveHistoricalVideoKeyModifiers (value);
   end;

   function get_SaveHistoricalVideoKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_SaveHistoricalVideoKeyModifiers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleRecordingKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleRecordingKey (value);
   end;

   function get_ToggleRecordingKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleRecordingKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleRecordingKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleRecordingKeyModifiers (value);
   end;

   function get_ToggleRecordingKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleRecordingKeyModifiers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TakeScreenshotKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_TakeScreenshotKey (value);
   end;

   function get_TakeScreenshotKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_TakeScreenshotKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TakeScreenshotKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_TakeScreenshotKeyModifiers (value);
   end;

   function get_TakeScreenshotKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_TakeScreenshotKeyModifiers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleRecordingIndicatorKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleRecordingIndicatorKey (value);
   end;

   function get_ToggleRecordingIndicatorKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleRecordingIndicatorKey (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleRecordingIndicatorKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.put_ToggleRecordingIndicatorKeyModifiers (value);
   end;

   function get_ToggleRecordingIndicatorKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
   begin
      Hr := this.m_IAppCaptureAlternateShortcutKeys.all.get_ToggleRecordingIndicatorKeyModifiers (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ToggleMicrophoneCaptureKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleMicrophoneCaptureKey (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleMicrophoneCaptureKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleMicrophoneCaptureKey (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ToggleMicrophoneCaptureKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleMicrophoneCaptureKeyModifiers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleMicrophoneCaptureKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys2, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleMicrophoneCaptureKeyModifiers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ToggleCameraCaptureKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleCameraCaptureKey (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleCameraCaptureKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleCameraCaptureKey (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ToggleCameraCaptureKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleCameraCaptureKeyModifiers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleCameraCaptureKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleCameraCaptureKeyModifiers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ToggleBroadcastKey
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKey
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleBroadcastKey (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleBroadcastKey
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKey is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKey;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleBroadcastKey (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ToggleBroadcastKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys;
      value : Windows.System.VirtualKeyModifiers
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.put_ToggleBroadcastKeyModifiers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ToggleBroadcastKeyModifiers
   (
      this : in out AppCaptureAlternateShortcutKeys
   )
   return WinRt.Windows.System.VirtualKeyModifiers is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.VirtualKeyModifiers;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys_Interface, WinRt.Windows.Media.Capture.IAppCaptureAlternateShortcutKeys3, WinRt.Windows.Media.Capture.IID_IAppCaptureAlternateShortcutKeys3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureAlternateShortcutKeys.all);
      Hr := m_Interface.get_ToggleBroadcastKeyModifiers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureDurationGeneratedEventArgs

   procedure Initialize (this : in out AppCaptureDurationGeneratedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureDurationGeneratedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureDurationGeneratedEventArgs, IAppCaptureDurationGeneratedEventArgs_Ptr);
   begin
      if this.m_IAppCaptureDurationGeneratedEventArgs /= null then
         if this.m_IAppCaptureDurationGeneratedEventArgs.all /= null then
            RefCount := this.m_IAppCaptureDurationGeneratedEventArgs.all.Release;
            Free (this.m_IAppCaptureDurationGeneratedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureDurationGeneratedEventArgs

   function get_Duration
   (
      this : in out AppCaptureDurationGeneratedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppCaptureDurationGeneratedEventArgs.all.get_Duration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureFileGeneratedEventArgs

   procedure Initialize (this : in out AppCaptureFileGeneratedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureFileGeneratedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureFileGeneratedEventArgs, IAppCaptureFileGeneratedEventArgs_Ptr);
   begin
      if this.m_IAppCaptureFileGeneratedEventArgs /= null then
         if this.m_IAppCaptureFileGeneratedEventArgs.all /= null then
            RefCount := this.m_IAppCaptureFileGeneratedEventArgs.all.Release;
            Free (this.m_IAppCaptureFileGeneratedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureFileGeneratedEventArgs

   function get_File
   (
      this : in out AppCaptureFileGeneratedEventArgs
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IAppCaptureFileGeneratedEventArgs.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body AppCaptureManager is

      function GetCurrentSettings
      return WinRt.Windows.Media.Capture.AppCaptureSettings is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppCaptureManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppCaptureManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureSettings;
      begin
         return RetVal : WinRt.Windows.Media.Capture.AppCaptureSettings do
            Hr := RoGetActivationFactory (m_hString, IID_IAppCaptureManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetCurrentSettings (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IAppCaptureSettings := new Windows.Media.Capture.IAppCaptureSettings;
               Retval.m_IAppCaptureSettings.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure ApplySettings
      (
         appCaptureSettings_p : Windows.Media.Capture.AppCaptureSettings'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.AppCaptureManager");
         m_Factory        : access WinRt.Windows.Media.Capture.IAppCaptureManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IAppCaptureManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.ApplySettings (appCaptureSettings_p.m_IAppCaptureSettings.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end AppCaptureManager;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureMetadataWriter

   procedure Initialize (this : in out AppCaptureMetadataWriter) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureMetadataWriter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureMetadataWriter, IAppCaptureMetadataWriter_Ptr);
   begin
      if this.m_IAppCaptureMetadataWriter /= null then
         if this.m_IAppCaptureMetadataWriter.all /= null then
            RefCount := this.m_IAppCaptureMetadataWriter.all.Release;
            Free (this.m_IAppCaptureMetadataWriter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppCaptureMetadataWriter

   function Constructor return AppCaptureMetadataWriter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Capture.AppCaptureMetadataWriter");
      m_ComRetVal  : aliased Windows.Media.Capture.IAppCaptureMetadataWriter;
   begin
      return RetVal : AppCaptureMetadataWriter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppCaptureMetadataWriter := new Windows.Media.Capture.IAppCaptureMetadataWriter;
            Retval.m_IAppCaptureMetadataWriter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureMetadataWriter

   procedure AddStringEvent
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.WString;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.AddStringEvent (HStr_name, HStr_value, priority);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure AddInt32Event
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.Int32;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.AddInt32Event (HStr_name, value, priority);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure AddDoubleEvent
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.Double;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.AddDoubleEvent (HStr_name, value, priority);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure StartStringState
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.WString;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.StartStringState (HStr_name, HStr_value, priority);
      Hr := WindowsDeleteString (HStr_name);
      Hr := WindowsDeleteString (HStr_value);
   end;

   procedure StartInt32State
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.Int32;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.StartInt32State (HStr_name, value, priority);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure StartDoubleState
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString;
      value : WinRt.Double;
      priority : Windows.Media.Capture.AppCaptureMetadataPriority
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.StartDoubleState (HStr_name, value, priority);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure StopState
   (
      this : in out AppCaptureMetadataWriter;
      name : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_name : WinRt.HString := To_HString (name);
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.StopState (HStr_name);
      Hr := WindowsDeleteString (HStr_name);
   end;

   procedure StopAllStates
   (
      this : in out AppCaptureMetadataWriter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.StopAllStates;
   end;

   function get_RemainingStorageBytesAvailable
   (
      this : in out AppCaptureMetadataWriter
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.get_RemainingStorageBytesAvailable (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_MetadataPurged
   (
      this : in out AppCaptureMetadataWriter;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.add_MetadataPurged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MetadataPurged
   (
      this : in out AppCaptureMetadataWriter;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureMetadataWriter.all.remove_MetadataPurged (token);
   end;

   procedure Close
   (
      this : in out AppCaptureMetadataWriter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureMetadataWriter_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureMetadataWriter.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureMicrophoneCaptureStateChangedEventArgs

   procedure Initialize (this : in out AppCaptureMicrophoneCaptureStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureMicrophoneCaptureStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureMicrophoneCaptureStateChangedEventArgs, IAppCaptureMicrophoneCaptureStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs /= null then
         if this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs.all.Release;
            Free (this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureMicrophoneCaptureStateChangedEventArgs

   function get_State
   (
      this : in out AppCaptureMicrophoneCaptureStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppCaptureMicrophoneCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureMicrophoneCaptureState;
   begin
      Hr := this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppCaptureMicrophoneCaptureStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureMicrophoneCaptureStateChangedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureRecordOperation

   procedure Initialize (this : in out AppCaptureRecordOperation) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureRecordOperation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureRecordOperation, IAppCaptureRecordOperation_Ptr);
   begin
      if this.m_IAppCaptureRecordOperation /= null then
         if this.m_IAppCaptureRecordOperation.all /= null then
            RefCount := this.m_IAppCaptureRecordOperation.all.Release;
            Free (this.m_IAppCaptureRecordOperation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureRecordOperation

   procedure StopRecording
   (
      this : in out AppCaptureRecordOperation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.StopRecording;
   end;

   function get_State
   (
      this : in out AppCaptureRecordOperation
   )
   return WinRt.Windows.Media.Capture.AppCaptureRecordingState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureRecordingState;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppCaptureRecordOperation
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.get_ErrorCode (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Duration
   (
      this : in out AppCaptureRecordOperation
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.get_Duration (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_File
   (
      this : in out AppCaptureRecordOperation
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFile;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_IAppCaptureRecordOperation.all.get_File (m_ComRetVal'Access);
         Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
         Retval.m_IStorageFile.all := m_ComRetVal;
      end return;
   end;

   function get_IsFileTruncated
   (
      this : in out AppCaptureRecordOperation
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.get_IsFileTruncated (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_StateChanged
   (
      this : in out AppCaptureRecordOperation;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.add_StateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out AppCaptureRecordOperation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.remove_StateChanged (token);
   end;

   function add_DurationGenerated
   (
      this : in out AppCaptureRecordOperation;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.add_DurationGenerated (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DurationGenerated
   (
      this : in out AppCaptureRecordOperation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.remove_DurationGenerated (token);
   end;

   function add_FileGenerated
   (
      this : in out AppCaptureRecordOperation;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.add_FileGenerated (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_FileGenerated
   (
      this : in out AppCaptureRecordOperation;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureRecordOperation.all.remove_FileGenerated (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureRecordingStateChangedEventArgs

   procedure Initialize (this : in out AppCaptureRecordingStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureRecordingStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureRecordingStateChangedEventArgs, IAppCaptureRecordingStateChangedEventArgs_Ptr);
   begin
      if this.m_IAppCaptureRecordingStateChangedEventArgs /= null then
         if this.m_IAppCaptureRecordingStateChangedEventArgs.all /= null then
            RefCount := this.m_IAppCaptureRecordingStateChangedEventArgs.all.Release;
            Free (this.m_IAppCaptureRecordingStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureRecordingStateChangedEventArgs

   function get_State
   (
      this : in out AppCaptureRecordingStateChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.AppCaptureRecordingState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureRecordingState;
   begin
      Hr := this.m_IAppCaptureRecordingStateChangedEventArgs.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppCaptureRecordingStateChangedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureRecordingStateChangedEventArgs.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureServices

   procedure Initialize (this : in out AppCaptureServices) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureServices) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureServices, IAppCaptureServices_Ptr);
   begin
      if this.m_IAppCaptureServices /= null then
         if this.m_IAppCaptureServices.all /= null then
            RefCount := this.m_IAppCaptureServices.all.Release;
            Free (this.m_IAppCaptureServices);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureServices

   function Record_x
   (
      this : in out AppCaptureServices
   )
   return WinRt.Windows.Media.Capture.AppCaptureRecordOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureRecordOperation;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCaptureRecordOperation do
         Hr := this.m_IAppCaptureServices.all.Record_x (m_ComRetVal'Access);
         Retval.m_IAppCaptureRecordOperation := new Windows.Media.Capture.IAppCaptureRecordOperation;
         Retval.m_IAppCaptureRecordOperation.all := m_ComRetVal;
      end return;
   end;

   function RecordTimeSpan
   (
      this : in out AppCaptureServices;
      startTime : Windows.Foundation.DateTime;
      duration : Windows.Foundation.TimeSpan
   )
   return WinRt.Windows.Media.Capture.AppCaptureRecordOperation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureRecordOperation;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCaptureRecordOperation do
         Hr := this.m_IAppCaptureServices.all.RecordTimeSpan (startTime, duration, m_ComRetVal'Access);
         Retval.m_IAppCaptureRecordOperation := new Windows.Media.Capture.IAppCaptureRecordOperation;
         Retval.m_IAppCaptureRecordOperation.all := m_ComRetVal;
      end return;
   end;

   function get_CanCapture
   (
      this : in out AppCaptureServices
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureServices.all.get_CanCapture (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_State
   (
      this : in out AppCaptureServices
   )
   return WinRt.Windows.Media.Capture.AppCaptureState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureState;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCaptureState do
         Hr := this.m_IAppCaptureServices.all.get_State (m_ComRetVal'Access);
         Retval.m_IAppCaptureState := new Windows.Media.Capture.IAppCaptureState;
         Retval.m_IAppCaptureState.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureSettings

   procedure Initialize (this : in out AppCaptureSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureSettings, IAppCaptureSettings_Ptr);
   begin
      if this.m_IAppCaptureSettings /= null then
         if this.m_IAppCaptureSettings.all /= null then
            RefCount := this.m_IAppCaptureSettings.all.Release;
            Free (this.m_IAppCaptureSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureSettings

   procedure put_AppCaptureDestinationFolder
   (
      this : in out AppCaptureSettings;
      value : Windows.Storage.StorageFolder'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_AppCaptureDestinationFolder (value.m_IStorageFolder.all);
   end;

   function get_AppCaptureDestinationFolder
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IAppCaptureSettings.all.get_AppCaptureDestinationFolder (m_ComRetVal'Access);
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   procedure put_AudioEncodingBitrate
   (
      this : in out AppCaptureSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_AudioEncodingBitrate (value);
   end;

   function get_AudioEncodingBitrate
   (
      this : in out AppCaptureSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_AudioEncodingBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAudioCaptureEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_IsAudioCaptureEnabled (value);
   end;

   function get_IsAudioCaptureEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsAudioCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingBitrate
   (
      this : in out AppCaptureSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_CustomVideoEncodingBitrate (value);
   end;

   function get_CustomVideoEncodingBitrate
   (
      this : in out AppCaptureSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_CustomVideoEncodingBitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingHeight
   (
      this : in out AppCaptureSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_CustomVideoEncodingHeight (value);
   end;

   function get_CustomVideoEncodingHeight
   (
      this : in out AppCaptureSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_CustomVideoEncodingHeight (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomVideoEncodingWidth
   (
      this : in out AppCaptureSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_CustomVideoEncodingWidth (value);
   end;

   function get_CustomVideoEncodingWidth
   (
      this : in out AppCaptureSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_CustomVideoEncodingWidth (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HistoricalBufferLength
   (
      this : in out AppCaptureSettings;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_HistoricalBufferLength (value);
   end;

   function get_HistoricalBufferLength
   (
      this : in out AppCaptureSettings
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_HistoricalBufferLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_HistoricalBufferLengthUnit
   (
      this : in out AppCaptureSettings;
      value : Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_HistoricalBufferLengthUnit (value);
   end;

   function get_HistoricalBufferLengthUnit
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureHistoricalBufferLengthUnit;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_HistoricalBufferLengthUnit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsHistoricalCaptureEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_IsHistoricalCaptureEnabled (value);
   end;

   function get_IsHistoricalCaptureEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsHistoricalCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsHistoricalCaptureOnBatteryAllowed
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_IsHistoricalCaptureOnBatteryAllowed (value);
   end;

   function get_IsHistoricalCaptureOnBatteryAllowed
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsHistoricalCaptureOnBatteryAllowed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsHistoricalCaptureOnWirelessDisplayAllowed
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_IsHistoricalCaptureOnWirelessDisplayAllowed (value);
   end;

   function get_IsHistoricalCaptureOnWirelessDisplayAllowed
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsHistoricalCaptureOnWirelessDisplayAllowed (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaximumRecordLength
   (
      this : in out AppCaptureSettings;
      value : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_MaximumRecordLength (value);
   end;

   function get_MaximumRecordLength
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_MaximumRecordLength (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScreenshotDestinationFolder
   (
      this : in out AppCaptureSettings;
      value : Windows.Storage.StorageFolder'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_ScreenshotDestinationFolder (value.m_IStorageFolder.all);
   end;

   function get_ScreenshotDestinationFolder
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Storage.StorageFolder'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.IStorageFolder;
   begin
      return RetVal : WinRt.Windows.Storage.StorageFolder do
         Hr := this.m_IAppCaptureSettings.all.get_ScreenshotDestinationFolder (m_ComRetVal'Access);
         Retval.m_IStorageFolder := new Windows.Storage.IStorageFolder;
         Retval.m_IStorageFolder.all := m_ComRetVal;
      end return;
   end;

   procedure put_VideoEncodingBitrateMode
   (
      this : in out AppCaptureSettings;
      value : Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_VideoEncodingBitrateMode (value);
   end;

   function get_VideoEncodingBitrateMode
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureVideoEncodingBitrateMode;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_VideoEncodingBitrateMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_VideoEncodingResolutionMode
   (
      this : in out AppCaptureSettings;
      value : Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_VideoEncodingResolutionMode (value);
   end;

   function get_VideoEncodingResolutionMode
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureVideoEncodingResolutionMode;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_VideoEncodingResolutionMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsAppCaptureEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureSettings.all.put_IsAppCaptureEnabled (value);
   end;

   function get_IsAppCaptureEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsAppCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsCpuConstrained
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsCpuConstrained (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsDisabledByPolicy
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsDisabledByPolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsMemoryConstrained
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_IsMemoryConstrained (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasHardwareEncoder
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureSettings.all.get_HasHardwareEncoder (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGpuConstrained
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings2, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_IsGpuConstrained (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AlternateShortcutKeys
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Media.Capture.AppCaptureAlternateShortcutKeys'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureAlternateShortcutKeys;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings2, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCaptureAlternateShortcutKeys do
         m_Interface := QInterface (this.m_IAppCaptureSettings.all);
         Hr := m_Interface.get_AlternateShortcutKeys (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAppCaptureAlternateShortcutKeys := new Windows.Media.Capture.IAppCaptureAlternateShortcutKeys;
         Retval.m_IAppCaptureAlternateShortcutKeys.all := m_ComRetVal;
      end return;
   end;

   procedure put_IsMicrophoneCaptureEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings3, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_IsMicrophoneCaptureEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsMicrophoneCaptureEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings3, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_IsMicrophoneCaptureEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsMicrophoneCaptureEnabledByDefault
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_IsMicrophoneCaptureEnabledByDefault (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsMicrophoneCaptureEnabledByDefault
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_IsMicrophoneCaptureEnabledByDefault (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SystemAudioGain
   (
      this : in out AppCaptureSettings;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_SystemAudioGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_SystemAudioGain
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_SystemAudioGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MicrophoneGain
   (
      this : in out AppCaptureSettings;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_MicrophoneGain (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MicrophoneGain
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_MicrophoneGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_VideoEncodingFrameRateMode
   (
      this : in out AppCaptureSettings;
      value : Windows.Media.Capture.AppCaptureVideoEncodingFrameRateMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_VideoEncodingFrameRateMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_VideoEncodingFrameRateMode
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Windows.Media.Capture.AppCaptureVideoEncodingFrameRateMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureVideoEncodingFrameRateMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings4, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_VideoEncodingFrameRateMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsEchoCancellationEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings5, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_IsEchoCancellationEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsEchoCancellationEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings5, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_IsEchoCancellationEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsCursorImageCaptureEnabled
   (
      this : in out AppCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings5, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.put_IsCursorImageCaptureEnabled (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_IsCursorImageCaptureEnabled
   (
      this : in out AppCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IAppCaptureSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IAppCaptureSettings_Interface, WinRt.Windows.Media.Capture.IAppCaptureSettings5, WinRt.Windows.Media.Capture.IID_IAppCaptureSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppCaptureSettings.all);
      Hr := m_Interface.get_IsCursorImageCaptureEnabled (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppCaptureState

   procedure Initialize (this : in out AppCaptureState) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppCaptureState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppCaptureState, IAppCaptureState_Ptr);
   begin
      if this.m_IAppCaptureState /= null then
         if this.m_IAppCaptureState.all /= null then
            RefCount := this.m_IAppCaptureState.all.Release;
            Free (this.m_IAppCaptureState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppCaptureState

   function get_IsTargetRunning
   (
      this : in out AppCaptureState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureState.all.get_IsTargetRunning (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsHistoricalCaptureEnabled
   (
      this : in out AppCaptureState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureState.all.get_IsHistoricalCaptureEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ShouldCaptureMicrophone
   (
      this : in out AppCaptureState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppCaptureState.all.get_ShouldCaptureMicrophone (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ShouldCaptureMicrophone
   (
      this : in out AppCaptureState;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureState.all.put_ShouldCaptureMicrophone (value);
   end;

   procedure RestartMicrophoneCapture
   (
      this : in out AppCaptureState
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureState.all.RestartMicrophoneCapture;
   end;

   function get_MicrophoneCaptureState
   (
      this : in out AppCaptureState
   )
   return WinRt.Windows.Media.Capture.AppCaptureMicrophoneCaptureState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.AppCaptureMicrophoneCaptureState;
   begin
      Hr := this.m_IAppCaptureState.all.get_MicrophoneCaptureState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MicrophoneCaptureError
   (
      this : in out AppCaptureState
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAppCaptureState.all.get_MicrophoneCaptureError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_MicrophoneCaptureStateChanged
   (
      this : in out AppCaptureState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureState.all.add_MicrophoneCaptureStateChanged (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MicrophoneCaptureStateChanged
   (
      this : in out AppCaptureState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureState.all.remove_MicrophoneCaptureStateChanged (token);
   end;

   function add_CaptureTargetClosed
   (
      this : in out AppCaptureState;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppCaptureState.all.add_CaptureTargetClosed (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CaptureTargetClosed
   (
      this : in out AppCaptureState;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppCaptureState.all.remove_CaptureTargetClosed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraCaptureUI

   procedure Initialize (this : in out CameraCaptureUI) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraCaptureUI) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraCaptureUI, ICameraCaptureUI_Ptr);
   begin
      if this.m_ICameraCaptureUI /= null then
         if this.m_ICameraCaptureUI.all /= null then
            RefCount := this.m_ICameraCaptureUI.all.Release;
            Free (this.m_ICameraCaptureUI);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for CameraCaptureUI

   function Constructor return CameraCaptureUI is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Capture.CameraCaptureUI");
      m_ComRetVal  : aliased Windows.Media.Capture.ICameraCaptureUI;
   begin
      return RetVal : CameraCaptureUI do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_ICameraCaptureUI := new Windows.Media.Capture.ICameraCaptureUI;
            Retval.m_ICameraCaptureUI.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraCaptureUI

   function get_PhotoSettings
   (
      this : in out CameraCaptureUI
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICameraCaptureUIPhotoCaptureSettings;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings do
         Hr := this.m_ICameraCaptureUI.all.get_PhotoSettings (m_ComRetVal'Access);
         Retval.m_ICameraCaptureUIPhotoCaptureSettings := new Windows.Media.Capture.ICameraCaptureUIPhotoCaptureSettings;
         Retval.m_ICameraCaptureUIPhotoCaptureSettings.all := m_ComRetVal;
      end return;
   end;

   function get_VideoSettings
   (
      this : in out CameraCaptureUI
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICameraCaptureUIVideoCaptureSettings;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings do
         Hr := this.m_ICameraCaptureUI.all.get_VideoSettings (m_ComRetVal'Access);
         Retval.m_ICameraCaptureUIVideoCaptureSettings := new Windows.Media.Capture.ICameraCaptureUIVideoCaptureSettings;
         Retval.m_ICameraCaptureUIVideoCaptureSettings.all := m_ComRetVal;
      end return;
   end;

   function CaptureFileAsync
   (
      this : in out CameraCaptureUI;
      mode : Windows.Media.Capture.CameraCaptureUIMode
   )
   return WinRt.Windows.Storage.StorageFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_StorageFile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_StorageFile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.IStorageFile;
      m_IID            : aliased WinRt.IID := (1582495950, 44269, 23106, (149, 180, 246, 116, 221, 132, 136, 94 )); -- Windows.Storage.StorageFile;
      m_HandlerIID     : aliased WinRt.IID := (3844196500, 11302, 22854, (158, 97, 43, 94, 24, 141, 1, 237 ));
      m_Handler        : AsyncOperationCompletedHandler_StorageFile.Kind := new AsyncOperationCompletedHandler_StorageFile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_StorageFile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_StorageFile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_StorageFile.Kind_Delegate, AsyncOperationCompletedHandler_StorageFile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Storage.StorageFile do
         Hr := this.m_ICameraCaptureUI.all.CaptureFileAsync (mode, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IStorageFile := new Windows.Storage.IStorageFile;
                  Retval.m_IStorageFile.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraCaptureUIPhotoCaptureSettings

   procedure Initialize (this : in out CameraCaptureUIPhotoCaptureSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraCaptureUIPhotoCaptureSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraCaptureUIPhotoCaptureSettings, ICameraCaptureUIPhotoCaptureSettings_Ptr);
   begin
      if this.m_ICameraCaptureUIPhotoCaptureSettings /= null then
         if this.m_ICameraCaptureUIPhotoCaptureSettings.all /= null then
            RefCount := this.m_ICameraCaptureUIPhotoCaptureSettings.all.Release;
            Free (this.m_ICameraCaptureUIPhotoCaptureSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraCaptureUIPhotoCaptureSettings

   function get_Format
   (
      this : in out CameraCaptureUIPhotoCaptureSettings
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIPhotoFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.CameraCaptureUIPhotoFormat;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out CameraCaptureUIPhotoCaptureSettings;
      value : Windows.Media.Capture.CameraCaptureUIPhotoFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.put_Format (value);
   end;

   function get_MaxResolution
   (
      this : in out CameraCaptureUIPhotoCaptureSettings
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.get_MaxResolution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxResolution
   (
      this : in out CameraCaptureUIPhotoCaptureSettings;
      value : Windows.Media.Capture.CameraCaptureUIMaxPhotoResolution
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.put_MaxResolution (value);
   end;

   function get_CroppedSizeInPixels
   (
      this : in out CameraCaptureUIPhotoCaptureSettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.get_CroppedSizeInPixels (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CroppedSizeInPixels
   (
      this : in out CameraCaptureUIPhotoCaptureSettings;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.put_CroppedSizeInPixels (value);
   end;

   function get_CroppedAspectRatio
   (
      this : in out CameraCaptureUIPhotoCaptureSettings
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.get_CroppedAspectRatio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CroppedAspectRatio
   (
      this : in out CameraCaptureUIPhotoCaptureSettings;
      value : Windows.Foundation.Size
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.put_CroppedAspectRatio (value);
   end;

   function get_AllowCropping
   (
      this : in out CameraCaptureUIPhotoCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.get_AllowCropping (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowCropping
   (
      this : in out CameraCaptureUIPhotoCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIPhotoCaptureSettings.all.put_AllowCropping (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraCaptureUIVideoCaptureSettings

   procedure Initialize (this : in out CameraCaptureUIVideoCaptureSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraCaptureUIVideoCaptureSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraCaptureUIVideoCaptureSettings, ICameraCaptureUIVideoCaptureSettings_Ptr);
   begin
      if this.m_ICameraCaptureUIVideoCaptureSettings /= null then
         if this.m_ICameraCaptureUIVideoCaptureSettings.all /= null then
            RefCount := this.m_ICameraCaptureUIVideoCaptureSettings.all.Release;
            Free (this.m_ICameraCaptureUIVideoCaptureSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraCaptureUIVideoCaptureSettings

   function get_Format
   (
      this : in out CameraCaptureUIVideoCaptureSettings
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIVideoFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.CameraCaptureUIVideoFormat;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out CameraCaptureUIVideoCaptureSettings;
      value : Windows.Media.Capture.CameraCaptureUIVideoFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.put_Format (value);
   end;

   function get_MaxResolution
   (
      this : in out CameraCaptureUIVideoCaptureSettings
   )
   return WinRt.Windows.Media.Capture.CameraCaptureUIMaxVideoResolution is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.CameraCaptureUIMaxVideoResolution;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.get_MaxResolution (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxResolution
   (
      this : in out CameraCaptureUIVideoCaptureSettings;
      value : Windows.Media.Capture.CameraCaptureUIMaxVideoResolution
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.put_MaxResolution (value);
   end;

   function get_MaxDurationInSeconds
   (
      this : in out CameraCaptureUIVideoCaptureSettings
   )
   return WinRt.Single is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Single;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.get_MaxDurationInSeconds (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxDurationInSeconds
   (
      this : in out CameraCaptureUIVideoCaptureSettings;
      value : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.put_MaxDurationInSeconds (value);
   end;

   function get_AllowTrimming
   (
      this : in out CameraCaptureUIVideoCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.get_AllowTrimming (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowTrimming
   (
      this : in out CameraCaptureUIVideoCaptureSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ICameraCaptureUIVideoCaptureSettings.all.put_AllowTrimming (value);
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body CameraOptionsUI is

      procedure Show
      (
         mediaCapture_p : Windows.Media.Capture.MediaCapture'Class
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.CameraOptionsUI");
         m_Factory        : access WinRt.Windows.Media.Capture.ICameraOptionsUIStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_ICameraOptionsUIStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Show (mediaCapture_p.m_IMediaCapture.all);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end CameraOptionsUI;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CapturedFrame

   procedure Initialize (this : in out CapturedFrame) is
   begin
      null;
   end;

   procedure Finalize (this : in out CapturedFrame) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICapturedFrame, ICapturedFrame_Ptr);
   begin
      if this.m_ICapturedFrame /= null then
         if this.m_ICapturedFrame.all /= null then
            RefCount := this.m_ICapturedFrame.all.Release;
            Free (this.m_ICapturedFrame);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CapturedFrame

   function get_Width
   (
      this : in out CapturedFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICapturedFrame.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out CapturedFrame
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ICapturedFrame.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ContentType
   (
      this : in out CapturedFrame
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IContentTypeProvider := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IContentTypeProvider, WinRt.Windows.Storage.Streams.IID_IContentTypeProvider'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.get_ContentType (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Size
   (
      this : in out CapturedFrame
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out CapturedFrame;
      value : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.put_Size (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetInputStreamAt
   (
      this : in out CapturedFrame;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IInputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IInputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.GetInputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetOutputStreamAt
   (
      this : in out CapturedFrame;
      position : WinRt.UInt64
   )
   return WinRt.Windows.Storage.Streams.IOutputStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IOutputStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.GetOutputStreamAt (position, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out CapturedFrame
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.get_Position (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Seek
   (
      this : in out CapturedFrame;
      position : WinRt.UInt64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.Seek (position);
      m_RefCount := m_Interface.Release;
   end;

   function CloneStream
   (
      this : in out CapturedFrame
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStream is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStream;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.CloneStream (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanRead
   (
      this : in out CapturedFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.get_CanRead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CanWrite
   (
      this : in out CapturedFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStream, WinRt.Windows.Storage.Streams.IID_IRandomAccessStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.get_CanWrite (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function WriteAsync
   (
      this : in out CapturedFrame;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (3972749130, 50820, 21874, (166, 121, 107, 8, 66, 207, 181, 127 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (507932101, 33807, 21753, (184, 119, 94, 58, 159, 75, 108, 116 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.WriteAsync (buffer, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function FlushAsync
   (
      this : in out CapturedFrame
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IOutputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IOutputStream, WinRt.Windows.Storage.Streams.IID_IOutputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.FlushAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure Close
   (
      this : in out CapturedFrame
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function ReadAsync
   (
      this : in out CapturedFrame;
      buffer : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IInputStream := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IBuffer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IBuffer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IBuffer;
      m_IID            : aliased WinRt.IID := (3530237977, 35199, 23677, (132, 214, 86, 215, 150, 86, 20, 49 )); -- Windows.Storage.Streams.IBuffer;
      m_HandlerIID     : aliased WinRt.IID := (104360570, 57353, 23307, (171, 104, 168, 228, 139, 81, 102, 71 ));
      m_Handler        : AsyncOperationCompletedHandler_IBuffer.Kind := new AsyncOperationCompletedHandler_IBuffer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IBuffer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IBuffer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IBuffer.Kind_Delegate, AsyncOperationCompletedHandler_IBuffer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Storage.Streams.IInputStream, WinRt.Windows.Storage.Streams.IID_IInputStream'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrame.all);
      Hr := m_Interface.ReadAsync (buffer, count, options, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function get_SoftwareBitmap
   (
      this : in out CapturedFrame
   )
   return WinRt.Windows.Graphics.Imaging.SoftwareBitmap'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameWithSoftwareBitmap := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Imaging.ISoftwareBitmap;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Media.Capture.ICapturedFrameWithSoftwareBitmap, WinRt.Windows.Media.Capture.IID_ICapturedFrameWithSoftwareBitmap'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.SoftwareBitmap do
         m_Interface := QInterface (this.m_ICapturedFrame.all);
         Hr := m_Interface.get_SoftwareBitmap (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ISoftwareBitmap := new Windows.Graphics.Imaging.ISoftwareBitmap;
         Retval.m_ISoftwareBitmap.all := m_ComRetVal;
      end return;
   end;

   function get_ControlValues
   (
      this : in out CapturedFrame
   )
   return WinRt.Windows.Media.Capture.CapturedFrameControlValues'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrameControlValues;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Media.Capture.ICapturedFrame2, WinRt.Windows.Media.Capture.IID_ICapturedFrame2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrameControlValues do
         m_Interface := QInterface (this.m_ICapturedFrame.all);
         Hr := m_Interface.get_ControlValues (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_ICapturedFrameControlValues := new Windows.Media.Capture.ICapturedFrameControlValues;
         Retval.m_ICapturedFrameControlValues.all := m_ComRetVal;
      end return;
   end;

   function get_BitmapProperties
   (
      this : in out CapturedFrame
   )
   return WinRt.Windows.Graphics.Imaging.BitmapPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrame2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrame_Interface, WinRt.Windows.Media.Capture.ICapturedFrame2, WinRt.Windows.Media.Capture.IID_ICapturedFrame2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Graphics.Imaging.BitmapPropertySet do
         m_Interface := QInterface (this.m_ICapturedFrame.all);
         Hr := m_Interface.get_BitmapProperties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CapturedFrameControlValues

   procedure Initialize (this : in out CapturedFrameControlValues) is
   begin
      null;
   end;

   procedure Finalize (this : in out CapturedFrameControlValues) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICapturedFrameControlValues, ICapturedFrameControlValues_Ptr);
   begin
      if this.m_ICapturedFrameControlValues /= null then
         if this.m_ICapturedFrameControlValues.all /= null then
            RefCount := this.m_ICapturedFrameControlValues.all.Release;
            Free (this.m_ICapturedFrameControlValues);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CapturedFrameControlValues

   function get_Exposure
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_TimeSpan.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_TimeSpan.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_Exposure (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_TimeSpan (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExposureCompensation
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_ExposureCompensation (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsoSpeed
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_IsoSpeed (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Focus
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_Focus (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SceneMode
   (
      this : in out CapturedFrameControlValues
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_SceneMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Flashed
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Boolean.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_Flashed (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FlashPowerPercent
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_FlashPowerPercent (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_WhiteBalance
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_WhiteBalance (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ZoomFactor
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Single.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Single.Kind;
   begin
      Hr := this.m_ICapturedFrameControlValues.all.get_ZoomFactor (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_Single (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FocusState
   (
      this : in out CapturedFrameControlValues
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameControlValues2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrameControlValues_Interface, WinRt.Windows.Media.Capture.ICapturedFrameControlValues2, WinRt.Windows.Media.Capture.IID_ICapturedFrameControlValues2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrameControlValues.all);
      Hr := m_Interface.get_FocusState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsoDigitalGain
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameControlValues2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrameControlValues_Interface, WinRt.Windows.Media.Capture.ICapturedFrameControlValues2, WinRt.Windows.Media.Capture.IID_ICapturedFrameControlValues2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrameControlValues.all);
      Hr := m_Interface.get_IsoDigitalGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsoAnalogGain
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameControlValues2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Double.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrameControlValues_Interface, WinRt.Windows.Media.Capture.ICapturedFrameControlValues2, WinRt.Windows.Media.Capture.IID_ICapturedFrameControlValues2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrameControlValues.all);
      Hr := m_Interface.get_IsoAnalogGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SensorFrameRate
   (
      this : in out CapturedFrameControlValues
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameControlValues2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrameControlValues_Interface, WinRt.Windows.Media.Capture.ICapturedFrameControlValues2, WinRt.Windows.Media.Capture.IID_ICapturedFrameControlValues2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         m_Interface := QInterface (this.m_ICapturedFrameControlValues.all);
         Hr := m_Interface.get_SensorFrameRate (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_WhiteBalanceGain
   (
      this : in out CapturedFrameControlValues
   )
   return IReference_WhiteBalanceGain.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ICapturedFrameControlValues2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_WhiteBalanceGain.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ICapturedFrameControlValues_Interface, WinRt.Windows.Media.Capture.ICapturedFrameControlValues2, WinRt.Windows.Media.Capture.IID_ICapturedFrameControlValues2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ICapturedFrameControlValues.all);
      Hr := m_Interface.get_WhiteBalanceGain (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_WhiteBalanceGain (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CapturedPhoto

   procedure Initialize (this : in out CapturedPhoto) is
   begin
      null;
   end;

   procedure Finalize (this : in out CapturedPhoto) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICapturedPhoto, ICapturedPhoto_Ptr);
   begin
      if this.m_ICapturedPhoto /= null then
         if this.m_ICapturedPhoto.all /= null then
            RefCount := this.m_ICapturedPhoto.all.Release;
            Free (this.m_ICapturedPhoto);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CapturedPhoto

   function get_Frame
   (
      this : in out CapturedPhoto
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_ICapturedPhoto.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_Thumbnail
   (
      this : in out CapturedPhoto
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_ICapturedPhoto.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameBarServices

   procedure Initialize (this : in out GameBarServices) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameBarServices) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameBarServices, IGameBarServices_Ptr);
   begin
      if this.m_IGameBarServices /= null then
         if this.m_IGameBarServices.all /= null then
            RefCount := this.m_IGameBarServices.all.Release;
            Free (this.m_IGameBarServices);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameBarServices

   function get_TargetCapturePolicy
   (
      this : in out GameBarServices
   )
   return WinRt.Windows.Media.Capture.GameBarTargetCapturePolicy is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.GameBarTargetCapturePolicy;
   begin
      Hr := this.m_IGameBarServices.all.get_TargetCapturePolicy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure EnableCapture
   (
      this : in out GameBarServices
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGameBarServices.all.EnableCapture;
   end;

   procedure DisableCapture
   (
      this : in out GameBarServices
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGameBarServices.all.DisableCapture;
   end;

   function get_TargetInfo
   (
      this : in out GameBarServices
   )
   return WinRt.Windows.Media.Capture.GameBarServicesTargetInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IGameBarServicesTargetInfo;
   begin
      return RetVal : WinRt.Windows.Media.Capture.GameBarServicesTargetInfo do
         Hr := this.m_IGameBarServices.all.get_TargetInfo (m_ComRetVal'Access);
         Retval.m_IGameBarServicesTargetInfo := new Windows.Media.Capture.IGameBarServicesTargetInfo;
         Retval.m_IGameBarServicesTargetInfo.all := m_ComRetVal;
      end return;
   end;

   function get_SessionId
   (
      this : in out GameBarServices
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameBarServices.all.get_SessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppBroadcastServices
   (
      this : in out GameBarServices
   )
   return WinRt.Windows.Media.Capture.AppBroadcastServices'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppBroadcastServices;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppBroadcastServices do
         Hr := this.m_IGameBarServices.all.get_AppBroadcastServices (m_ComRetVal'Access);
         Retval.m_IAppBroadcastServices := new Windows.Media.Capture.IAppBroadcastServices;
         Retval.m_IAppBroadcastServices.all := m_ComRetVal;
      end return;
   end;

   function get_AppCaptureServices
   (
      this : in out GameBarServices
   )
   return WinRt.Windows.Media.Capture.AppCaptureServices'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IAppCaptureServices;
   begin
      return RetVal : WinRt.Windows.Media.Capture.AppCaptureServices do
         Hr := this.m_IGameBarServices.all.get_AppCaptureServices (m_ComRetVal'Access);
         Retval.m_IAppCaptureServices := new Windows.Media.Capture.IAppCaptureServices;
         Retval.m_IAppCaptureServices.all := m_ComRetVal;
      end return;
   end;

   function add_CommandReceived
   (
      this : in out GameBarServices;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGameBarServices.all.add_CommandReceived (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CommandReceived
   (
      this : in out GameBarServices;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGameBarServices.all.remove_CommandReceived (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameBarServicesCommandEventArgs

   procedure Initialize (this : in out GameBarServicesCommandEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameBarServicesCommandEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameBarServicesCommandEventArgs, IGameBarServicesCommandEventArgs_Ptr);
   begin
      if this.m_IGameBarServicesCommandEventArgs /= null then
         if this.m_IGameBarServicesCommandEventArgs.all /= null then
            RefCount := this.m_IGameBarServicesCommandEventArgs.all.Release;
            Free (this.m_IGameBarServicesCommandEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameBarServicesCommandEventArgs

   function get_Command
   (
      this : in out GameBarServicesCommandEventArgs
   )
   return WinRt.Windows.Media.Capture.GameBarCommand is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.GameBarCommand;
   begin
      Hr := this.m_IGameBarServicesCommandEventArgs.all.get_Command (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Origin
   (
      this : in out GameBarServicesCommandEventArgs
   )
   return WinRt.Windows.Media.Capture.GameBarCommandOrigin is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.GameBarCommandOrigin;
   begin
      Hr := this.m_IGameBarServicesCommandEventArgs.all.get_Origin (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameBarServicesManager

   procedure Initialize (this : in out GameBarServicesManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameBarServicesManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameBarServicesManager, IGameBarServicesManager_Ptr);
   begin
      if this.m_IGameBarServicesManager /= null then
         if this.m_IGameBarServicesManager.all /= null then
            RefCount := this.m_IGameBarServicesManager.all.Release;
            Free (this.m_IGameBarServicesManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GameBarServicesManager

   function GetDefault
   return WinRt.Windows.Media.Capture.GameBarServicesManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.GameBarServicesManager");
      m_Factory        : access WinRt.Windows.Media.Capture.IGameBarServicesManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IGameBarServicesManager;
   begin
      return RetVal : WinRt.Windows.Media.Capture.GameBarServicesManager do
         Hr := RoGetActivationFactory (m_hString, IID_IGameBarServicesManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IGameBarServicesManager := new Windows.Media.Capture.IGameBarServicesManager;
            Retval.m_IGameBarServicesManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameBarServicesManager

   function add_GameBarServicesCreated
   (
      this : in out GameBarServicesManager;
      value : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IGameBarServicesManager.all.add_GameBarServicesCreated (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GameBarServicesCreated
   (
      this : in out GameBarServicesManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGameBarServicesManager.all.remove_GameBarServicesCreated (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameBarServicesManagerGameBarServicesCreatedEventArgs

   procedure Initialize (this : in out GameBarServicesManagerGameBarServicesCreatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameBarServicesManagerGameBarServicesCreatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameBarServicesManagerGameBarServicesCreatedEventArgs, IGameBarServicesManagerGameBarServicesCreatedEventArgs_Ptr);
   begin
      if this.m_IGameBarServicesManagerGameBarServicesCreatedEventArgs /= null then
         if this.m_IGameBarServicesManagerGameBarServicesCreatedEventArgs.all /= null then
            RefCount := this.m_IGameBarServicesManagerGameBarServicesCreatedEventArgs.all.Release;
            Free (this.m_IGameBarServicesManagerGameBarServicesCreatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameBarServicesManagerGameBarServicesCreatedEventArgs

   function get_GameBarServices
   (
      this : in out GameBarServicesManagerGameBarServicesCreatedEventArgs
   )
   return WinRt.Windows.Media.Capture.GameBarServices'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IGameBarServices;
   begin
      return RetVal : WinRt.Windows.Media.Capture.GameBarServices do
         Hr := this.m_IGameBarServicesManagerGameBarServicesCreatedEventArgs.all.get_GameBarServices (m_ComRetVal'Access);
         Retval.m_IGameBarServices := new Windows.Media.Capture.IGameBarServices;
         Retval.m_IGameBarServices.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GameBarServicesTargetInfo

   procedure Initialize (this : in out GameBarServicesTargetInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out GameBarServicesTargetInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGameBarServicesTargetInfo, IGameBarServicesTargetInfo_Ptr);
   begin
      if this.m_IGameBarServicesTargetInfo /= null then
         if this.m_IGameBarServicesTargetInfo.all /= null then
            RefCount := this.m_IGameBarServicesTargetInfo.all.Release;
            Free (this.m_IGameBarServicesTargetInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GameBarServicesTargetInfo

   function get_DisplayName
   (
      this : in out GameBarServicesTargetInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameBarServicesTargetInfo.all.get_DisplayName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AppId
   (
      this : in out GameBarServicesTargetInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameBarServicesTargetInfo.all.get_AppId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_TitleId
   (
      this : in out GameBarServicesTargetInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGameBarServicesTargetInfo.all.get_TitleId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DisplayMode
   (
      this : in out GameBarServicesTargetInfo
   )
   return WinRt.Windows.Media.Capture.GameBarServicesDisplayMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.GameBarServicesDisplayMode;
   begin
      Hr := this.m_IGameBarServicesTargetInfo.all.get_DisplayMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLagMediaRecording

   procedure Initialize (this : in out LowLagMediaRecording) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLagMediaRecording) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLagMediaRecording, ILowLagMediaRecording_Ptr);
   begin
      if this.m_ILowLagMediaRecording /= null then
         if this.m_ILowLagMediaRecording.all /= null then
            RefCount := this.m_ILowLagMediaRecording.all.Release;
            Free (this.m_ILowLagMediaRecording);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLagMediaRecording

   procedure StartAsync
   (
      this : in out LowLagMediaRecording
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagMediaRecording.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StopAsync
   (
      this : in out LowLagMediaRecording
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagMediaRecording.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure FinishAsync
   (
      this : in out LowLagMediaRecording
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagMediaRecording.all.FinishAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure PauseAsync
   (
      this : in out LowLagMediaRecording;
      behavior : Windows.Media.Devices.MediaCapturePauseBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ILowLagMediaRecording2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ILowLagMediaRecording_Interface, WinRt.Windows.Media.Capture.ILowLagMediaRecording2, WinRt.Windows.Media.Capture.IID_ILowLagMediaRecording2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILowLagMediaRecording.all);
      Hr := m_Interface.PauseAsync (behavior, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ResumeAsync
   (
      this : in out LowLagMediaRecording
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ILowLagMediaRecording2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ILowLagMediaRecording_Interface, WinRt.Windows.Media.Capture.ILowLagMediaRecording2, WinRt.Windows.Media.Capture.IID_ILowLagMediaRecording2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ILowLagMediaRecording.all);
      Hr := m_Interface.ResumeAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function PauseWithResultAsync
   (
      this : in out LowLagMediaRecording;
      behavior : Windows.Media.Devices.MediaCapturePauseBehavior
   )
   return WinRt.Windows.Media.Capture.MediaCapturePauseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ILowLagMediaRecording3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaCapturePauseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaCapturePauseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IMediaCapturePauseResult;
      m_IID            : aliased WinRt.IID := (539633176, 21624, 24250, (155, 211, 157, 131, 244, 98, 116, 126 )); -- Windows.Media.Capture.MediaCapturePauseResult;
      m_HandlerIID     : aliased WinRt.IID := (4268909329, 9919, 20941, (189, 235, 244, 15, 143, 70, 157, 10 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind := new AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaCapturePauseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ILowLagMediaRecording_Interface, WinRt.Windows.Media.Capture.ILowLagMediaRecording3, WinRt.Windows.Media.Capture.IID_ILowLagMediaRecording3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCapturePauseResult do
         m_Interface := QInterface (this.m_ILowLagMediaRecording.all);
         Hr := m_Interface.PauseWithResultAsync (behavior, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaCapturePauseResult := new Windows.Media.Capture.IMediaCapturePauseResult;
                  Retval.m_IMediaCapturePauseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StopWithResultAsync
   (
      this : in out LowLagMediaRecording
   )
   return WinRt.Windows.Media.Capture.MediaCaptureStopResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.ILowLagMediaRecording3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaCaptureStopResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaCaptureStopResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IMediaCaptureStopResult;
      m_IID            : aliased WinRt.IID := (3950610471, 42153, 21306, (158, 131, 15, 176, 133, 178, 173, 54 )); -- Windows.Media.Capture.MediaCaptureStopResult;
      m_HandlerIID     : aliased WinRt.IID := (1565394548, 7668, 21286, (186, 120, 114, 246, 101, 93, 42, 118 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind := new AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaCaptureStopResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.ILowLagMediaRecording_Interface, WinRt.Windows.Media.Capture.ILowLagMediaRecording3, WinRt.Windows.Media.Capture.IID_ILowLagMediaRecording3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureStopResult do
         m_Interface := QInterface (this.m_ILowLagMediaRecording.all);
         Hr := m_Interface.StopWithResultAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaCaptureStopResult := new Windows.Media.Capture.IMediaCaptureStopResult;
                  Retval.m_IMediaCaptureStopResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLagPhotoCapture

   procedure Initialize (this : in out LowLagPhotoCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLagPhotoCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLagPhotoCapture, ILowLagPhotoCapture_Ptr);
   begin
      if this.m_ILowLagPhotoCapture /= null then
         if this.m_ILowLagPhotoCapture.all /= null then
            RefCount := this.m_ILowLagPhotoCapture.all.Release;
            Free (this.m_ILowLagPhotoCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLagPhotoCapture

   function CaptureAsync
   (
      this : in out LowLagPhotoCapture
   )
   return WinRt.Windows.Media.Capture.CapturedPhoto'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_CapturedPhoto.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_CapturedPhoto.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ICapturedPhoto;
      m_IID            : aliased WinRt.IID := (2941400497, 18296, 21985, (180, 159, 96, 128, 72, 234, 155, 217 )); -- Windows.Media.Capture.CapturedPhoto;
      m_HandlerIID     : aliased WinRt.IID := (4256213624, 1249, 22195, (182, 252, 244, 222, 121, 205, 65, 160 ));
      m_Handler        : AsyncOperationCompletedHandler_CapturedPhoto.Kind := new AsyncOperationCompletedHandler_CapturedPhoto.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_CapturedPhoto.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_CapturedPhoto.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_CapturedPhoto.Kind_Delegate, AsyncOperationCompletedHandler_CapturedPhoto.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedPhoto do
         Hr := this.m_ILowLagPhotoCapture.all.CaptureAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ICapturedPhoto := new Windows.Media.Capture.ICapturedPhoto;
                  Retval.m_ICapturedPhoto.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure FinishAsync
   (
      this : in out LowLagPhotoCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagPhotoCapture.all.FinishAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for LowLagPhotoSequenceCapture

   procedure Initialize (this : in out LowLagPhotoSequenceCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out LowLagPhotoSequenceCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ILowLagPhotoSequenceCapture, ILowLagPhotoSequenceCapture_Ptr);
   begin
      if this.m_ILowLagPhotoSequenceCapture /= null then
         if this.m_ILowLagPhotoSequenceCapture.all /= null then
            RefCount := this.m_ILowLagPhotoSequenceCapture.all.Release;
            Free (this.m_ILowLagPhotoSequenceCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for LowLagPhotoSequenceCapture

   procedure StartAsync
   (
      this : in out LowLagPhotoSequenceCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagPhotoSequenceCapture.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StopAsync
   (
      this : in out LowLagPhotoSequenceCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagPhotoSequenceCapture.all.StopAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure FinishAsync
   (
      this : in out LowLagPhotoSequenceCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ILowLagPhotoSequenceCapture.all.FinishAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_PhotoCaptured
   (
      this : in out LowLagPhotoSequenceCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ILowLagPhotoSequenceCapture.all.add_PhotoCaptured (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PhotoCaptured
   (
      this : in out LowLagPhotoSequenceCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ILowLagPhotoSequenceCapture.all.remove_PhotoCaptured (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCapture

   procedure Initialize (this : in out MediaCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCapture, IMediaCapture_Ptr);
   begin
      if this.m_IMediaCapture /= null then
         if this.m_IMediaCapture.all /= null then
            RefCount := this.m_IMediaCapture.all.Release;
            Free (this.m_IMediaCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaCapture

   function Constructor return MediaCapture is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCapture");
      m_ComRetVal  : aliased Windows.Media.Capture.IMediaCapture;
   begin
      return RetVal : MediaCapture do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaCapture := new Windows.Media.Capture.IMediaCapture;
            Retval.m_IMediaCapture.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaCapture

   function IsVideoProfileSupported
   (
      videoDeviceId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IMediaCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      HStr_videoDeviceId : WinRt.HString := To_HString (videoDeviceId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaCaptureStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.IsVideoProfileSupported (HStr_videoDeviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_videoDeviceId);
      return m_ComRetVal;
   end;

   function FindAllVideoProfiles
   (
      videoDeviceId : WinRt.WString
   )
   return IVectorView_IMediaCaptureVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IMediaCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfile.Kind;
      HStr_videoDeviceId : WinRt.HString := To_HString (videoDeviceId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaCaptureStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindAllVideoProfiles (HStr_videoDeviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_videoDeviceId);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function FindConcurrentProfiles
   (
      videoDeviceId : WinRt.WString
   )
   return IVectorView_IMediaCaptureVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IMediaCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfile.Kind;
      HStr_videoDeviceId : WinRt.HString := To_HString (videoDeviceId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaCaptureStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindConcurrentProfiles (HStr_videoDeviceId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_videoDeviceId);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function FindKnownVideoProfiles
   (
      videoDeviceId : WinRt.WString;
      name : Windows.Media.Capture.KnownVideoProfile
   )
   return IVectorView_IMediaCaptureVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IMediaCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfile.Kind;
      HStr_videoDeviceId : WinRt.HString := To_HString (videoDeviceId);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IMediaCaptureStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.FindKnownVideoProfiles (HStr_videoDeviceId, name, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_videoDeviceId);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCapture

   procedure InitializeAsync
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.InitializeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure InitializeAsync
   (
      this : in out MediaCapture;
      mediaCaptureInitializationSettings_p : Windows.Media.Capture.MediaCaptureInitializationSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.InitializeAsync (mediaCaptureInitializationSettings_p.m_IMediaCaptureInitializationSettings.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartRecordToStorageFileAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.StartRecordToStorageFileAsync (encodingProfile.m_IMediaEncodingProfile.all, file, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartRecordToStreamAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      stream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.StartRecordToStreamAsync (encodingProfile.m_IMediaEncodingProfile.all, stream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartRecordToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customMediaSink : Windows.Media.IMediaExtension
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.StartRecordToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, customMediaSink, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartRecordToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customSinkActivationId : WinRt.WString;
      customSinkSettings : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_customSinkActivationId : WinRt.HString := To_HString (customSinkActivationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.StartRecordToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, HStr_customSinkActivationId, customSinkSettings, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_customSinkActivationId);
   end;

   procedure StopRecordAsync
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.StopRecordAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure CapturePhotoToStorageFileAsync
   (
      this : in out MediaCapture;
      type_x : Windows.Media.MediaProperties.ImageEncodingProperties'Class;
      file : Windows.Storage.IStorageFile
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.CapturePhotoToStorageFileAsync (type_x.m_IImageEncodingProperties.all, file, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure CapturePhotoToStreamAsync
   (
      this : in out MediaCapture;
      type_x : Windows.Media.MediaProperties.ImageEncodingProperties'Class;
      stream : Windows.Storage.Streams.IRandomAccessStream
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.CapturePhotoToStreamAsync (type_x.m_IImageEncodingProperties.all, stream, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure AddEffectAsync
   (
      this : in out MediaCapture;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      effectActivationID : WinRt.WString;
      effectSettings : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_effectActivationID : WinRt.HString := To_HString (effectActivationID);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.AddEffectAsync (mediaStreamType, HStr_effectActivationID, effectSettings, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_effectActivationID);
   end;

   procedure ClearEffectsAsync
   (
      this : in out MediaCapture;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMediaCapture.all.ClearEffectsAsync (mediaStreamType, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure SetEncoderProperty
   (
      this : in out MediaCapture;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      propertyId : WinRt.Guid;
      propertyValue : WinRt.IInspectable
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.SetEncoderProperty (mediaStreamType, propertyId, propertyValue);
   end;

   function GetEncoderProperty
   (
      this : in out MediaCapture;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      propertyId : WinRt.Guid
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IMediaCapture.all.GetEncoderProperty (mediaStreamType, propertyId, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Failed
   (
      this : in out MediaCapture;
      errorEventHandler : Windows.Media.Capture.MediaCaptureFailedEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaCapture.all.add_Failed (errorEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Failed
   (
      this : in out MediaCapture;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.remove_Failed (eventCookie);
   end;

   function add_RecordLimitationExceeded
   (
      this : in out MediaCapture;
      recordLimitationExceededEventHandler : Windows.Media.Capture.RecordLimitationExceededEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaCapture.all.add_RecordLimitationExceeded (recordLimitationExceededEventHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RecordLimitationExceeded
   (
      this : in out MediaCapture;
      eventCookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.remove_RecordLimitationExceeded (eventCookie);
   end;

   function get_MediaCaptureSettings
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Capture.MediaCaptureSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureSettings;
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureSettings do
         Hr := this.m_IMediaCapture.all.get_MediaCaptureSettings (m_ComRetVal'Access);
         Retval.m_IMediaCaptureSettings := new Windows.Media.Capture.IMediaCaptureSettings;
         Retval.m_IMediaCaptureSettings.all := m_ComRetVal;
      end return;
   end;

   function get_AudioDeviceController
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Devices.AudioDeviceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IAudioDeviceController;
   begin
      return RetVal : WinRt.Windows.Media.Devices.AudioDeviceController do
         Hr := this.m_IMediaCapture.all.get_AudioDeviceController (m_ComRetVal'Access);
         Retval.m_IAudioDeviceController := new Windows.Media.Devices.IAudioDeviceController;
         Retval.m_IAudioDeviceController.all := m_ComRetVal;
      end return;
   end;

   function get_VideoDeviceController
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Devices.VideoDeviceController'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.IVideoDeviceController;
   begin
      return RetVal : WinRt.Windows.Media.Devices.VideoDeviceController do
         Hr := this.m_IMediaCapture.all.get_VideoDeviceController (m_ComRetVal'Access);
         Retval.m_IVideoDeviceController := new Windows.Media.Devices.IVideoDeviceController;
         Retval.m_IVideoDeviceController.all := m_ComRetVal;
      end return;
   end;

   procedure SetPreviewMirroring
   (
      this : in out MediaCapture;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.SetPreviewMirroring (value);
   end;

   function GetPreviewMirroring
   (
      this : in out MediaCapture
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaCapture.all.GetPreviewMirroring (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetPreviewRotation
   (
      this : in out MediaCapture;
      value : Windows.Media.Capture.VideoRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.SetPreviewRotation (value);
   end;

   function GetPreviewRotation
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Capture.VideoRotation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.VideoRotation;
   begin
      Hr := this.m_IMediaCapture.all.GetPreviewRotation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SetRecordRotation
   (
      this : in out MediaCapture;
      value : Windows.Media.Capture.VideoRotation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCapture.all.SetRecordRotation (value);
   end;

   function GetRecordRotation
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Capture.VideoRotation is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.VideoRotation;
   begin
      Hr := this.m_IMediaCapture.all.GetRecordRotation (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure StartPreviewAsync
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.StartPreviewAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartPreviewToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customMediaSink : Windows.Media.IMediaExtension
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.StartPreviewToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, customMediaSink, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartPreviewToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customSinkActivationId : WinRt.WString;
      customSinkSettings : Windows.Foundation.Collections.IPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_customSinkActivationId : WinRt.HString := To_HString (customSinkActivationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.StartPreviewToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, HStr_customSinkActivationId, customSinkSettings, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_customSinkActivationId);
   end;

   procedure StopPreviewAsync
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoPreview, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoPreview'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.StopPreviewAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function PrepareLowLagRecordToStorageFileAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.Capture.LowLagMediaRecording'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagMediaRecording.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagMediaRecording.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagMediaRecording;
      m_IID            : aliased WinRt.IID := (1340862412, 48832, 21555, (167, 186, 118, 3, 209, 237, 199, 185 )); -- Windows.Media.Capture.LowLagMediaRecording;
      m_HandlerIID     : aliased WinRt.IID := (1688795148, 58950, 21179, (143, 75, 42, 29, 107, 11, 130, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagMediaRecording.Kind := new AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagMediaRecording.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate, AsyncOperationCompletedHandler_LowLagMediaRecording.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagMediaRecording do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagRecordToStorageFileAsync (encodingProfile.m_IMediaEncodingProfile.all, file, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagMediaRecording := new Windows.Media.Capture.ILowLagMediaRecording;
                  Retval.m_ILowLagMediaRecording.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareLowLagRecordToStreamAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Media.Capture.LowLagMediaRecording'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagMediaRecording.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagMediaRecording.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagMediaRecording;
      m_IID            : aliased WinRt.IID := (1340862412, 48832, 21555, (167, 186, 118, 3, 209, 237, 199, 185 )); -- Windows.Media.Capture.LowLagMediaRecording;
      m_HandlerIID     : aliased WinRt.IID := (1688795148, 58950, 21179, (143, 75, 42, 29, 107, 11, 130, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagMediaRecording.Kind := new AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagMediaRecording.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate, AsyncOperationCompletedHandler_LowLagMediaRecording.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagMediaRecording do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagRecordToStreamAsync (encodingProfile.m_IMediaEncodingProfile.all, stream, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagMediaRecording := new Windows.Media.Capture.ILowLagMediaRecording;
                  Retval.m_ILowLagMediaRecording.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareLowLagRecordToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customMediaSink : Windows.Media.IMediaExtension
   )
   return WinRt.Windows.Media.Capture.LowLagMediaRecording'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagMediaRecording.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagMediaRecording.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagMediaRecording;
      m_IID            : aliased WinRt.IID := (1340862412, 48832, 21555, (167, 186, 118, 3, 209, 237, 199, 185 )); -- Windows.Media.Capture.LowLagMediaRecording;
      m_HandlerIID     : aliased WinRt.IID := (1688795148, 58950, 21179, (143, 75, 42, 29, 107, 11, 130, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagMediaRecording.Kind := new AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagMediaRecording.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate, AsyncOperationCompletedHandler_LowLagMediaRecording.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagMediaRecording do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagRecordToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, customMediaSink, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagMediaRecording := new Windows.Media.Capture.ILowLagMediaRecording;
                  Retval.m_ILowLagMediaRecording.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareLowLagRecordToCustomSinkAsync
   (
      this : in out MediaCapture;
      encodingProfile : Windows.Media.MediaProperties.MediaEncodingProfile'Class;
      customSinkActivationId : WinRt.WString;
      customSinkSettings : Windows.Foundation.Collections.IPropertySet
   )
   return WinRt.Windows.Media.Capture.LowLagMediaRecording'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_customSinkActivationId : WinRt.HString := To_HString (customSinkActivationId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagMediaRecording.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagMediaRecording.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagMediaRecording;
      m_IID            : aliased WinRt.IID := (1340862412, 48832, 21555, (167, 186, 118, 3, 209, 237, 199, 185 )); -- Windows.Media.Capture.LowLagMediaRecording;
      m_HandlerIID     : aliased WinRt.IID := (1688795148, 58950, 21179, (143, 75, 42, 29, 107, 11, 130, 25 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagMediaRecording.Kind := new AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagMediaRecording.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagMediaRecording.Kind_Delegate, AsyncOperationCompletedHandler_LowLagMediaRecording.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagMediaRecording do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagRecordToCustomSinkAsync (encodingProfile.m_IMediaEncodingProfile.all, HStr_customSinkActivationId, customSinkSettings, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagMediaRecording := new Windows.Media.Capture.ILowLagMediaRecording;
                  Retval.m_ILowLagMediaRecording.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_customSinkActivationId);
      end return;
   end;

   function PrepareLowLagPhotoCaptureAsync
   (
      this : in out MediaCapture;
      type_x : Windows.Media.MediaProperties.ImageEncodingProperties'Class
   )
   return WinRt.Windows.Media.Capture.LowLagPhotoCapture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagPhotoCapture.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagPhotoCapture.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagPhotoCapture;
      m_IID            : aliased WinRt.IID := (2938388555, 32269, 24574, (187, 200, 170, 246, 255, 226, 8, 252 )); -- Windows.Media.Capture.LowLagPhotoCapture;
      m_HandlerIID     : aliased WinRt.IID := (1827386216, 20100, 20490, (154, 95, 123, 154, 26, 222, 31, 68 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagPhotoCapture.Kind := new AsyncOperationCompletedHandler_LowLagPhotoCapture.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagPhotoCapture.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagPhotoCapture.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagPhotoCapture.Kind_Delegate, AsyncOperationCompletedHandler_LowLagPhotoCapture.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagPhotoCapture do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagPhotoCaptureAsync (type_x.m_IImageEncodingProperties.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagPhotoCapture := new Windows.Media.Capture.ILowLagPhotoCapture;
                  Retval.m_ILowLagPhotoCapture.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function PrepareLowLagPhotoSequenceCaptureAsync
   (
      this : in out MediaCapture;
      type_x : Windows.Media.MediaProperties.ImageEncodingProperties'Class
   )
   return WinRt.Windows.Media.Capture.LowLagPhotoSequenceCapture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_LowLagPhotoSequenceCapture.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_LowLagPhotoSequenceCapture.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.ILowLagPhotoSequenceCapture;
      m_IID            : aliased WinRt.IID := (2896102496, 40212, 23280, (177, 123, 55, 234, 45, 118, 168, 13 )); -- Windows.Media.Capture.LowLagPhotoSequenceCapture;
      m_HandlerIID     : aliased WinRt.IID := (1987973084, 38243, 22317, (132, 225, 156, 170, 176, 222, 182, 63 ));
      m_Handler        : AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture.Kind := new AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_LowLagPhotoSequenceCapture.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture.Kind_Delegate, AsyncOperationCompletedHandler_LowLagPhotoSequenceCapture.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.LowLagPhotoSequenceCapture do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareLowLagPhotoSequenceCaptureAsync (type_x.m_IImageEncodingProperties.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ILowLagPhotoSequenceCapture := new Windows.Media.Capture.ILowLagPhotoSequenceCapture;
                  Retval.m_ILowLagPhotoSequenceCapture.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SetEncodingPropertiesAsync
   (
      this : in out MediaCapture;
      mediaStreamType : Windows.Media.Capture.MediaStreamType;
      mediaEncodingProperties : Windows.Media.MediaProperties.IMediaEncodingProperties;
      encoderProperties : Windows.Media.MediaProperties.MediaPropertySet'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture2, WinRt.Windows.Media.Capture.IID_IMediaCapture2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.SetEncodingPropertiesAsync (mediaStreamType, mediaEncodingProperties, encoderProperties.m_GenericObject.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Close
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   function PrepareVariablePhotoSequenceCaptureAsync
   (
      this : in out MediaCapture;
      type_x : Windows.Media.MediaProperties.ImageEncodingProperties'Class
   )
   return WinRt.Windows.Media.Capture.Core.VariablePhotoSequenceCapture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VariablePhotoSequenceCapture.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VariablePhotoSequenceCapture.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Core.IVariablePhotoSequenceCapture;
      m_IID            : aliased WinRt.IID := (52938940, 12616, 21491, (138, 61, 205, 177, 46, 73, 225, 50 )); -- Windows.Media.Capture.Core.VariablePhotoSequenceCapture;
      m_HandlerIID     : aliased WinRt.IID := (413490643, 483, 23269, (155, 94, 200, 74, 212, 12, 246, 183 ));
      m_Handler        : AsyncOperationCompletedHandler_VariablePhotoSequenceCapture.Kind := new AsyncOperationCompletedHandler_VariablePhotoSequenceCapture.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VariablePhotoSequenceCapture.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VariablePhotoSequenceCapture.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VariablePhotoSequenceCapture.Kind_Delegate, AsyncOperationCompletedHandler_VariablePhotoSequenceCapture.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture3, WinRt.Windows.Media.Capture.IID_IMediaCapture3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Core.VariablePhotoSequenceCapture do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareVariablePhotoSequenceCaptureAsync (type_x.m_IImageEncodingProperties.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVariablePhotoSequenceCapture := new Windows.Media.Capture.Core.IVariablePhotoSequenceCapture;
                  Retval.m_IVariablePhotoSequenceCapture.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_FocusChanged
   (
      this : in out MediaCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture3, WinRt.Windows.Media.Capture.IID_IMediaCapture3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.add_FocusChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_FocusChanged
   (
      this : in out MediaCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture3, WinRt.Windows.Media.Capture.IID_IMediaCapture3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.remove_FocusChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_PhotoConfirmationCaptured
   (
      this : in out MediaCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture3, WinRt.Windows.Media.Capture.IID_IMediaCapture3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.add_PhotoConfirmationCaptured (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_PhotoConfirmationCaptured
   (
      this : in out MediaCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture3, WinRt.Windows.Media.Capture.IID_IMediaCapture3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.remove_PhotoConfirmationCaptured (token);
      m_RefCount := m_Interface.Release;
   end;

   function AddAudioEffectAsync
   (
      this : in out MediaCapture;
      definition : Windows.Media.Effects.IAudioEffectDefinition
   )
   return WinRt.Windows.Media.IMediaExtension is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IMediaExtension.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IMediaExtension.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.IMediaExtension;
      m_IID            : aliased WinRt.IID := (4123734787, 7199, 23856, (180, 2, 239, 161, 146, 232, 12, 73 )); -- Windows.Media.IMediaExtension;
      m_HandlerIID     : aliased WinRt.IID := (2619037582, 64381, 23467, (186, 57, 134, 56, 127, 229, 51, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_IMediaExtension.Kind := new AsyncOperationCompletedHandler_IMediaExtension.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IMediaExtension.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IMediaExtension.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IMediaExtension.Kind_Delegate, AsyncOperationCompletedHandler_IMediaExtension.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.AddAudioEffectAsync (definition, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function AddVideoEffectAsync
   (
      this : in out MediaCapture;
      definition : Windows.Media.Effects.IVideoEffectDefinition;
      mediaStreamType : Windows.Media.Capture.MediaStreamType
   )
   return WinRt.Windows.Media.IMediaExtension is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IMediaExtension.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IMediaExtension.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.IMediaExtension;
      m_IID            : aliased WinRt.IID := (4123734787, 7199, 23856, (180, 2, 239, 161, 146, 232, 12, 73 )); -- Windows.Media.IMediaExtension;
      m_HandlerIID     : aliased WinRt.IID := (2619037582, 64381, 23467, (186, 57, 134, 56, 127, 229, 51, 182 ));
      m_Handler        : AsyncOperationCompletedHandler_IMediaExtension.Kind := new AsyncOperationCompletedHandler_IMediaExtension.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IMediaExtension.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IMediaExtension.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IMediaExtension.Kind_Delegate, AsyncOperationCompletedHandler_IMediaExtension.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.AddVideoEffectAsync (definition, mediaStreamType, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure PauseRecordAsync
   (
      this : in out MediaCapture;
      behavior : Windows.Media.Devices.MediaCapturePauseBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.PauseRecordAsync (behavior, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ResumeRecordAsync
   (
      this : in out MediaCapture
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.ResumeRecordAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_CameraStreamStateChanged
   (
      this : in out MediaCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.add_CameraStreamStateChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_CameraStreamStateChanged
   (
      this : in out MediaCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.remove_CameraStreamStateChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_CameraStreamState
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Devices.CameraStreamState is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.CameraStreamState;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.get_CameraStreamState (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetPreviewFrameAsync
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VideoFrame.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VideoFrame.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.IVideoFrame;
      m_IID            : aliased WinRt.IID := (4046344541, 44101, 20819, (150, 178, 206, 83, 171, 89, 74, 87 )); -- Windows.Media.VideoFrame;
      m_HandlerIID     : aliased WinRt.IID := (1619456763, 18985, 21706, (182, 163, 242, 57, 26, 3, 188, 59 ));
      m_Handler        : AsyncOperationCompletedHandler_VideoFrame.Kind := new AsyncOperationCompletedHandler_VideoFrame.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VideoFrame.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VideoFrame.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VideoFrame.Kind_Delegate, AsyncOperationCompletedHandler_VideoFrame.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.GetPreviewFrameAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
                  Retval.m_IVideoFrame.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetPreviewFrameAsync
   (
      this : in out MediaCapture;
      destination : Windows.Media.VideoFrame'Class
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_VideoFrame.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_VideoFrame.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.IVideoFrame;
      m_IID            : aliased WinRt.IID := (4046344541, 44101, 20819, (150, 178, 206, 83, 171, 89, 74, 87 )); -- Windows.Media.VideoFrame;
      m_HandlerIID     : aliased WinRt.IID := (1619456763, 18985, 21706, (182, 163, 242, 57, 26, 3, 188, 59 ));
      m_Handler        : AsyncOperationCompletedHandler_VideoFrame.Kind := new AsyncOperationCompletedHandler_VideoFrame.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_VideoFrame.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_VideoFrame.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_VideoFrame.Kind_Delegate, AsyncOperationCompletedHandler_VideoFrame.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.GetPreviewFrameAsync (destination.m_IVideoFrame.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
                  Retval.m_IVideoFrame.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_ThermalStatusChanged
   (
      this : in out MediaCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.add_ThermalStatusChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ThermalStatusChanged
   (
      this : in out MediaCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.remove_ThermalStatusChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function get_ThermalStatus
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Capture.MediaCaptureThermalStatus is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCaptureThermalStatus;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.get_ThermalStatus (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function PrepareAdvancedPhotoCaptureAsync
   (
      this : in out MediaCapture;
      encodingProperties : Windows.Media.MediaProperties.ImageEncodingProperties'Class
   )
   return WinRt.Windows.Media.Capture.AdvancedPhotoCapture'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AdvancedPhotoCapture.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AdvancedPhotoCapture.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IAdvancedPhotoCapture;
      m_IID            : aliased WinRt.IID := (2393986777, 11492, 24269, (129, 244, 160, 135, 49, 251, 116, 207 )); -- Windows.Media.Capture.AdvancedPhotoCapture;
      m_HandlerIID     : aliased WinRt.IID := (3521097416, 61139, 23779, (152, 50, 24, 52, 76, 152, 250, 113 ));
      m_Handler        : AsyncOperationCompletedHandler_AdvancedPhotoCapture.Kind := new AsyncOperationCompletedHandler_AdvancedPhotoCapture.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AdvancedPhotoCapture.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AdvancedPhotoCapture.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AdvancedPhotoCapture.Kind_Delegate, AsyncOperationCompletedHandler_AdvancedPhotoCapture.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture4, WinRt.Windows.Media.Capture.IID_IMediaCapture4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.AdvancedPhotoCapture do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PrepareAdvancedPhotoCaptureAsync (encodingProperties.m_IImageEncodingProperties.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAdvancedPhotoCapture := new Windows.Media.Capture.IAdvancedPhotoCapture;
                  Retval.m_IAdvancedPhotoCapture.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure RemoveEffectAsync
   (
      this : in out MediaCapture;
      effect : Windows.Media.IMediaExtension
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.RemoveEffectAsync (effect, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function PauseRecordWithResultAsync
   (
      this : in out MediaCapture;
      behavior : Windows.Media.Devices.MediaCapturePauseBehavior
   )
   return WinRt.Windows.Media.Capture.MediaCapturePauseResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaCapturePauseResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaCapturePauseResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IMediaCapturePauseResult;
      m_IID            : aliased WinRt.IID := (539633176, 21624, 24250, (155, 211, 157, 131, 244, 98, 116, 126 )); -- Windows.Media.Capture.MediaCapturePauseResult;
      m_HandlerIID     : aliased WinRt.IID := (4268909329, 9919, 20941, (189, 235, 244, 15, 143, 70, 157, 10 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind := new AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaCapturePauseResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaCapturePauseResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCapturePauseResult do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.PauseRecordWithResultAsync (behavior, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaCapturePauseResult := new Windows.Media.Capture.IMediaCapturePauseResult;
                  Retval.m_IMediaCapturePauseResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function StopRecordWithResultAsync
   (
      this : in out MediaCapture
   )
   return WinRt.Windows.Media.Capture.MediaCaptureStopResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaCaptureStopResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaCaptureStopResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.IMediaCaptureStopResult;
      m_IID            : aliased WinRt.IID := (3950610471, 42153, 21306, (158, 131, 15, 176, 133, 178, 173, 54 )); -- Windows.Media.Capture.MediaCaptureStopResult;
      m_HandlerIID     : aliased WinRt.IID := (1565394548, 7668, 21286, (186, 120, 114, 246, 101, 93, 42, 118 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind := new AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaCaptureStopResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind_Delegate, AsyncOperationCompletedHandler_MediaCaptureStopResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureStopResult do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.StopRecordWithResultAsync (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaCaptureStopResult := new Windows.Media.Capture.IMediaCaptureStopResult;
                  Retval.m_IMediaCaptureStopResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function get_FrameSources
   (
      this : in out MediaCapture
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.get_FrameSources (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function CreateFrameReaderAsync
   (
      this : in out MediaCapture;
      inputSource : Windows.Media.Capture.Frames.MediaFrameSource'Class
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameReader;
      m_IID            : aliased WinRt.IID := (2701963597, 31029, 23687, (144, 38, 138, 190, 121, 42, 59, 229 )); -- Windows.Media.Capture.Frames.MediaFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (2787200429, 47383, 23689, (160, 104, 227, 44, 154, 112, 55, 211 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameReader.Kind := new AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReader do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.CreateFrameReaderAsync (inputSource.m_IMediaFrameSource.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaFrameReader := new Windows.Media.Capture.Frames.IMediaFrameReader;
                  Retval.m_IMediaFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateFrameReaderAsync
   (
      this : in out MediaCapture;
      inputSource : Windows.Media.Capture.Frames.MediaFrameSource'Class;
      outputSubtype : WinRt.WString
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_outputSubtype : WinRt.HString := To_HString (outputSubtype);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameReader;
      m_IID            : aliased WinRt.IID := (2701963597, 31029, 23687, (144, 38, 138, 190, 121, 42, 59, 229 )); -- Windows.Media.Capture.Frames.MediaFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (2787200429, 47383, 23689, (160, 104, 227, 44, 154, 112, 55, 211 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameReader.Kind := new AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReader do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.CreateFrameReaderAsync (inputSource.m_IMediaFrameSource.all, HStr_outputSubtype, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaFrameReader := new Windows.Media.Capture.Frames.IMediaFrameReader;
                  Retval.m_IMediaFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_outputSubtype);
      end return;
   end;

   function CreateFrameReaderAsync
   (
      this : in out MediaCapture;
      inputSource : Windows.Media.Capture.Frames.MediaFrameSource'Class;
      outputSubtype : WinRt.WString;
      outputSize : Windows.Graphics.Imaging.BitmapSize
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_outputSubtype : WinRt.HString := To_HString (outputSubtype);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMediaFrameReader;
      m_IID            : aliased WinRt.IID := (2701963597, 31029, 23687, (144, 38, 138, 190, 121, 42, 59, 229 )); -- Windows.Media.Capture.Frames.MediaFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (2787200429, 47383, 23689, (160, 104, 227, 44, 154, 112, 55, 211 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaFrameReader.Kind := new AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_MediaFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture5, WinRt.Windows.Media.Capture.IID_IMediaCapture5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameReader do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.CreateFrameReaderAsync (inputSource.m_IMediaFrameSource.all, HStr_outputSubtype, outputSize, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMediaFrameReader := new Windows.Media.Capture.Frames.IMediaFrameReader;
                  Retval.m_IMediaFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_outputSubtype);
      end return;
   end;

   function add_CaptureDeviceExclusiveControlStatusChanged
   (
      this : in out MediaCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture6, WinRt.Windows.Media.Capture.IID_IMediaCapture6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.add_CaptureDeviceExclusiveControlStatusChanged (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_CaptureDeviceExclusiveControlStatusChanged
   (
      this : in out MediaCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture6, WinRt.Windows.Media.Capture.IID_IMediaCapture6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapture.all);
      Hr := m_Interface.remove_CaptureDeviceExclusiveControlStatusChanged (token);
      m_RefCount := m_Interface.Release;
   end;

   function CreateMultiSourceFrameReaderAsync
   (
      this : in out MediaCapture;
      inputSources : GenericObject
   )
   return WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReader'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MultiSourceMediaFrameReader.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MultiSourceMediaFrameReader.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader;
      m_IID            : aliased WinRt.IID := (1406495720, 61712, 21030, (156, 225, 168, 194, 106, 87, 37, 118 )); -- Windows.Media.Capture.Frames.MultiSourceMediaFrameReader;
      m_HandlerIID     : aliased WinRt.IID := (1771648888, 42124, 20684, (166, 240, 83, 104, 245, 138, 41, 122 ));
      m_Handler        : AsyncOperationCompletedHandler_MultiSourceMediaFrameReader.Kind := new AsyncOperationCompletedHandler_MultiSourceMediaFrameReader.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MultiSourceMediaFrameReader.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MultiSourceMediaFrameReader.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MultiSourceMediaFrameReader.Kind_Delegate, AsyncOperationCompletedHandler_MultiSourceMediaFrameReader.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture6, WinRt.Windows.Media.Capture.IID_IMediaCapture6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MultiSourceMediaFrameReader do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.CreateMultiSourceFrameReaderAsync (inputSources, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMultiSourceMediaFrameReader := new Windows.Media.Capture.Frames.IMultiSourceMediaFrameReader;
                  Retval.m_IMultiSourceMediaFrameReader.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateRelativePanelWatcher
   (
      this : in out MediaCapture;
      captureMode : Windows.Media.Capture.StreamingCaptureMode;
      displayRegion : Windows.UI.WindowManagement.DisplayRegion'Class
   )
   return WinRt.Windows.Media.Capture.MediaCaptureRelativePanelWatcher'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCapture7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureRelativePanelWatcher;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapture_Interface, WinRt.Windows.Media.Capture.IMediaCapture7, WinRt.Windows.Media.Capture.IID_IMediaCapture7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureRelativePanelWatcher do
         m_Interface := QInterface (this.m_IMediaCapture.all);
         Hr := m_Interface.CreateRelativePanelWatcher (captureMode, displayRegion.m_IDisplayRegion.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaCaptureRelativePanelWatcher := new Windows.Media.Capture.IMediaCaptureRelativePanelWatcher;
         Retval.m_IMediaCaptureRelativePanelWatcher.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs

   procedure Initialize (this : in out MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureDeviceExclusiveControlStatusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs, IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_Ptr);
   begin
      if this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs /= null then
         if this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs.all /= null then
            RefCount := this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs.all.Release;
            Free (this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureDeviceExclusiveControlStatusChangedEventArgs

   function get_DeviceId
   (
      this : in out MediaCaptureDeviceExclusiveControlStatusChangedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out MediaCaptureDeviceExclusiveControlStatusChangedEventArgs
   )
   return WinRt.Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCaptureDeviceExclusiveControlStatus;
   begin
      Hr := this.m_IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureFailedEventArgs

   procedure Initialize (this : in out MediaCaptureFailedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureFailedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureFailedEventArgs, IMediaCaptureFailedEventArgs_Ptr);
   begin
      if this.m_IMediaCaptureFailedEventArgs /= null then
         if this.m_IMediaCaptureFailedEventArgs.all /= null then
            RefCount := this.m_IMediaCaptureFailedEventArgs.all.Release;
            Free (this.m_IMediaCaptureFailedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureFailedEventArgs

   function get_Message
   (
      this : in out MediaCaptureFailedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureFailedEventArgs.all.get_Message (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Code
   (
      this : in out MediaCaptureFailedEventArgs
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaCaptureFailedEventArgs.all.get_Code (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate MediaCaptureFailedEventHandler

   function Invoke
   (
      this : access MediaCaptureFailedEventHandler_Delegate;
      sender : Windows.Media.Capture.IMediaCapture;
      errorEventArgs : Windows.Media.Capture.IMediaCaptureFailedEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, errorEventArgs);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureFocusChangedEventArgs

   procedure Initialize (this : in out MediaCaptureFocusChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureFocusChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureFocusChangedEventArgs, IMediaCaptureFocusChangedEventArgs_Ptr);
   begin
      if this.m_IMediaCaptureFocusChangedEventArgs /= null then
         if this.m_IMediaCaptureFocusChangedEventArgs.all /= null then
            RefCount := this.m_IMediaCaptureFocusChangedEventArgs.all.Release;
            Free (this.m_IMediaCaptureFocusChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureFocusChangedEventArgs

   function get_FocusState
   (
      this : in out MediaCaptureFocusChangedEventArgs
   )
   return WinRt.Windows.Media.Devices.MediaCaptureFocusState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Devices.MediaCaptureFocusState;
   begin
      Hr := this.m_IMediaCaptureFocusChangedEventArgs.all.get_FocusState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureInitializationSettings

   procedure Initialize (this : in out MediaCaptureInitializationSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureInitializationSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureInitializationSettings, IMediaCaptureInitializationSettings_Ptr);
   begin
      if this.m_IMediaCaptureInitializationSettings /= null then
         if this.m_IMediaCaptureInitializationSettings.all /= null then
            RefCount := this.m_IMediaCaptureInitializationSettings.all.Release;
            Free (this.m_IMediaCaptureInitializationSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaCaptureInitializationSettings

   function Constructor return MediaCaptureInitializationSettings is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Capture.MediaCaptureInitializationSettings");
      m_ComRetVal  : aliased Windows.Media.Capture.IMediaCaptureInitializationSettings;
   begin
      return RetVal : MediaCaptureInitializationSettings do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaCaptureInitializationSettings := new Windows.Media.Capture.IMediaCaptureInitializationSettings;
            Retval.m_IMediaCaptureInitializationSettings.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureInitializationSettings

   procedure put_AudioDeviceId
   (
      this : in out MediaCaptureInitializationSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.put_AudioDeviceId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AudioDeviceId
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.get_AudioDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_VideoDeviceId
   (
      this : in out MediaCaptureInitializationSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.put_VideoDeviceId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_VideoDeviceId
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.get_VideoDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_StreamingCaptureMode
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.StreamingCaptureMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.put_StreamingCaptureMode (value);
   end;

   function get_StreamingCaptureMode
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.StreamingCaptureMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.StreamingCaptureMode;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.get_StreamingCaptureMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PhotoCaptureSource
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.PhotoCaptureSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.put_PhotoCaptureSource (value);
   end;

   function get_PhotoCaptureSource
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.PhotoCaptureSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.PhotoCaptureSource;
   begin
      Hr := this.m_IMediaCaptureInitializationSettings.all.get_PhotoCaptureSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MediaCategory
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCategory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_MediaCategory (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MediaCategory
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCategory is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCategory;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_MediaCategory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioProcessing
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.AudioProcessing
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_AudioProcessing (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioProcessing
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.AudioProcessing is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AudioProcessing;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_AudioProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AudioSource
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Core.IMediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_AudioSource (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AudioSource
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Core.IMediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_AudioSource (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_VideoSource
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Core.IMediaSource
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_VideoSource (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_VideoSource
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Core.IMediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings3, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_VideoSource (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_VideoProfile
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureVideoProfile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureVideoProfile;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureVideoProfile do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_VideoProfile (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaCaptureVideoProfile := new Windows.Media.Capture.IMediaCaptureVideoProfile;
         Retval.m_IMediaCaptureVideoProfile.all := m_ComRetVal;
      end return;
   end;

   procedure put_VideoProfile
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureVideoProfile'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_VideoProfile (value.m_IMediaCaptureVideoProfile.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_PreviewMediaDescription
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_PreviewMediaDescription (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaCaptureVideoProfileMediaDescription := new Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
         Retval.m_IMediaCaptureVideoProfileMediaDescription.all := m_ComRetVal;
      end return;
   end;

   procedure put_PreviewMediaDescription
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_PreviewMediaDescription (value.m_IMediaCaptureVideoProfileMediaDescription.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_RecordMediaDescription
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_RecordMediaDescription (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaCaptureVideoProfileMediaDescription := new Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
         Retval.m_IMediaCaptureVideoProfileMediaDescription.all := m_ComRetVal;
      end return;
   end;

   procedure put_RecordMediaDescription
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_RecordMediaDescription (value.m_IMediaCaptureVideoProfileMediaDescription.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_PhotoMediaDescription
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_PhotoMediaDescription (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaCaptureVideoProfileMediaDescription := new Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription;
         Retval.m_IMediaCaptureVideoProfileMediaDescription.all := m_ComRetVal;
      end return;
   end;

   procedure put_PhotoMediaDescription
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureVideoProfileMediaDescription'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings4, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_PhotoMediaDescription (value.m_IMediaCaptureVideoProfileMediaDescription.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SourceGroup
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.Capture.Frames.MediaFrameSourceGroup do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_SourceGroup (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaFrameSourceGroup := new Windows.Media.Capture.Frames.IMediaFrameSourceGroup;
         Retval.m_IMediaFrameSourceGroup.all := m_ComRetVal;
      end return;
   end;

   procedure put_SourceGroup
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.Frames.MediaFrameSourceGroup'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_SourceGroup (value.m_IMediaFrameSourceGroup.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_SharingMode
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureSharingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCaptureSharingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_SharingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SharingMode
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureSharingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_SharingMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MemoryPreference
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Media.Capture.MediaCaptureMemoryPreference is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCaptureMemoryPreference;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_MemoryPreference (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MemoryPreference
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Media.Capture.MediaCaptureMemoryPreference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings5, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_MemoryPreference (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AlwaysPlaySystemShutterSound
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings6, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.get_AlwaysPlaySystemShutterSound (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AlwaysPlaySystemShutterSound
   (
      this : in out MediaCaptureInitializationSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings6, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_AlwaysPlaySystemShutterSound (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceUriPasswordCredential
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_DeviceUriPasswordCredential (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_DeviceUriPasswordCredential
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_DeviceUriPasswordCredential (value.m_IPasswordCredential.all);
      m_RefCount := m_Interface.Release;
   end;

   function get_DeviceUri
   (
      this : in out MediaCaptureInitializationSettings
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings7'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
         Hr := m_Interface.get_DeviceUri (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_DeviceUri
   (
      this : in out MediaCaptureInitializationSettings;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureInitializationSettings7, WinRt.Windows.Media.Capture.IID_IMediaCaptureInitializationSettings7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureInitializationSettings.all);
      Hr := m_Interface.put_DeviceUri (value.m_IUriRuntimeClass.all);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCapturePauseResult

   procedure Initialize (this : in out MediaCapturePauseResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCapturePauseResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCapturePauseResult, IMediaCapturePauseResult_Ptr);
   begin
      if this.m_IMediaCapturePauseResult /= null then
         if this.m_IMediaCapturePauseResult.all /= null then
            RefCount := this.m_IMediaCapturePauseResult.all.Release;
            Free (this.m_IMediaCapturePauseResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCapturePauseResult

   function get_LastFrame
   (
      this : in out MediaCapturePauseResult
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IMediaCapturePauseResult.all.get_LastFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function get_RecordDuration
   (
      this : in out MediaCapturePauseResult
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaCapturePauseResult.all.get_RecordDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out MediaCapturePauseResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCapturePauseResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCapturePauseResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureRelativePanelWatcher

   procedure Initialize (this : in out MediaCaptureRelativePanelWatcher) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureRelativePanelWatcher) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureRelativePanelWatcher, IMediaCaptureRelativePanelWatcher_Ptr);
   begin
      if this.m_IMediaCaptureRelativePanelWatcher /= null then
         if this.m_IMediaCaptureRelativePanelWatcher.all /= null then
            RefCount := this.m_IMediaCaptureRelativePanelWatcher.all.Release;
            Free (this.m_IMediaCaptureRelativePanelWatcher);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureRelativePanelWatcher

   function get_RelativePanel
   (
      this : in out MediaCaptureRelativePanelWatcher
   )
   return WinRt.Windows.Devices.Enumeration.Panel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.Panel;
   begin
      Hr := this.m_IMediaCaptureRelativePanelWatcher.all.get_RelativePanel (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Changed
   (
      this : in out MediaCaptureRelativePanelWatcher;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMediaCaptureRelativePanelWatcher.all.add_Changed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Changed
   (
      this : in out MediaCaptureRelativePanelWatcher;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCaptureRelativePanelWatcher.all.remove_Changed (token);
   end;

   procedure Start
   (
      this : in out MediaCaptureRelativePanelWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCaptureRelativePanelWatcher.all.Start;
   end;

   procedure Stop
   (
      this : in out MediaCaptureRelativePanelWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaCaptureRelativePanelWatcher.all.Stop;
   end;

   procedure Close
   (
      this : in out MediaCaptureRelativePanelWatcher
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureRelativePanelWatcher_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureRelativePanelWatcher.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureSettings

   procedure Initialize (this : in out MediaCaptureSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureSettings, IMediaCaptureSettings_Ptr);
   begin
      if this.m_IMediaCaptureSettings /= null then
         if this.m_IMediaCaptureSettings.all /= null then
            RefCount := this.m_IMediaCaptureSettings.all.Release;
            Free (this.m_IMediaCaptureSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureSettings

   function get_AudioDeviceId
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureSettings.all.get_AudioDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_VideoDeviceId
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureSettings.all.get_VideoDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_StreamingCaptureMode
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Media.Capture.StreamingCaptureMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.StreamingCaptureMode;
   begin
      Hr := this.m_IMediaCaptureSettings.all.get_StreamingCaptureMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhotoCaptureSource
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Media.Capture.PhotoCaptureSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.PhotoCaptureSource;
   begin
      Hr := this.m_IMediaCaptureSettings.all.get_PhotoCaptureSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoDeviceCharacteristic
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Media.Capture.VideoDeviceCharacteristic is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.VideoDeviceCharacteristic;
   begin
      Hr := this.m_IMediaCaptureSettings.all.get_VideoDeviceCharacteristic (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ConcurrentRecordAndPhotoSupported
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_ConcurrentRecordAndPhotoSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ConcurrentRecordAndPhotoSequenceSupported
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_ConcurrentRecordAndPhotoSequenceSupported (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_CameraSoundRequiredForRegion
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_CameraSoundRequiredForRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Horizontal35mmEquivalentFocalLength
   (
      this : in out MediaCaptureSettings
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_Horizontal35mmEquivalentFocalLength (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PitchOffsetDegrees
   (
      this : in out MediaCaptureSettings
   )
   return IReference_Int32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_PitchOffsetDegrees (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Vertical35mmEquivalentFocalLength
   (
      this : in out MediaCaptureSettings
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_Vertical35mmEquivalentFocalLength (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MediaCategory
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Media.Capture.MediaCategory is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.MediaCategory;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_MediaCategory (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AudioProcessing
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Media.AudioProcessing is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.AudioProcessing;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings2, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_AudioProcessing (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Direct3D11Device
   (
      this : in out MediaCaptureSettings
   )
   return WinRt.Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureSettings3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureSettings_Interface, WinRt.Windows.Media.Capture.IMediaCaptureSettings3, WinRt.Windows.Media.Capture.IID_IMediaCaptureSettings3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureSettings.all);
      Hr := m_Interface.get_Direct3D11Device (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureStopResult

   procedure Initialize (this : in out MediaCaptureStopResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureStopResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureStopResult, IMediaCaptureStopResult_Ptr);
   begin
      if this.m_IMediaCaptureStopResult /= null then
         if this.m_IMediaCaptureStopResult.all /= null then
            RefCount := this.m_IMediaCaptureStopResult.all.Release;
            Free (this.m_IMediaCaptureStopResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureStopResult

   function get_LastFrame
   (
      this : in out MediaCaptureStopResult
   )
   return WinRt.Windows.Media.VideoFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.IVideoFrame;
   begin
      return RetVal : WinRt.Windows.Media.VideoFrame do
         Hr := this.m_IMediaCaptureStopResult.all.get_LastFrame (m_ComRetVal'Access);
         Retval.m_IVideoFrame := new Windows.Media.IVideoFrame;
         Retval.m_IVideoFrame.all := m_ComRetVal;
      end return;
   end;

   function get_RecordDuration
   (
      this : in out MediaCaptureStopResult
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IMediaCaptureStopResult.all.get_RecordDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out MediaCaptureStopResult
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureStopResult_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureStopResult.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureVideoProfile

   procedure Initialize (this : in out MediaCaptureVideoProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureVideoProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureVideoProfile, IMediaCaptureVideoProfile_Ptr);
   begin
      if this.m_IMediaCaptureVideoProfile /= null then
         if this.m_IMediaCaptureVideoProfile.all /= null then
            RefCount := this.m_IMediaCaptureVideoProfile.all.Release;
            Free (this.m_IMediaCaptureVideoProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureVideoProfile

   function get_Id
   (
      this : in out MediaCaptureVideoProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_VideoDeviceId
   (
      this : in out MediaCaptureVideoProfile
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.get_VideoDeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SupportedPreviewMediaDescription
   (
      this : in out MediaCaptureVideoProfile
   )
   return IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.get_SupportedPreviewMediaDescription (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfileMediaDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedRecordMediaDescription
   (
      this : in out MediaCaptureVideoProfile
   )
   return IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.get_SupportedRecordMediaDescription (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfileMediaDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_SupportedPhotoMediaDescription
   (
      this : in out MediaCaptureVideoProfile
   )
   return IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfileMediaDescription.Kind;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.get_SupportedPhotoMediaDescription (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfileMediaDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetConcurrency
   (
      this : in out MediaCaptureVideoProfile
   )
   return IVectorView_IMediaCaptureVideoProfile.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMediaCaptureVideoProfile.Kind;
   begin
      Hr := this.m_IMediaCaptureVideoProfile.all.GetConcurrency (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMediaCaptureVideoProfile (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_FrameSourceInfos
   (
      this : in out MediaCaptureVideoProfile
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile2, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureVideoProfile.all);
      Hr := m_Interface.get_FrameSourceInfos (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out MediaCaptureVideoProfile
   )
   return IMapView_Guid_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IInspectable.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoProfile2, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureVideoProfile.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMapView_Guid_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaCaptureVideoProfileMediaDescription

   procedure Initialize (this : in out MediaCaptureVideoProfileMediaDescription) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaCaptureVideoProfileMediaDescription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaCaptureVideoProfileMediaDescription, IMediaCaptureVideoProfileMediaDescription_Ptr);
   begin
      if this.m_IMediaCaptureVideoProfileMediaDescription /= null then
         if this.m_IMediaCaptureVideoProfileMediaDescription.all /= null then
            RefCount := this.m_IMediaCaptureVideoProfileMediaDescription.all.Release;
            Free (this.m_IMediaCaptureVideoProfileMediaDescription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaCaptureVideoProfileMediaDescription

   function get_Width
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaCaptureVideoProfileMediaDescription.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Height
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaCaptureVideoProfileMediaDescription.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameRate
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IMediaCaptureVideoProfileMediaDescription.all.get_FrameRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVariablePhotoSequenceSupported
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaCaptureVideoProfileMediaDescription.all.get_IsVariablePhotoSequenceSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsHdrVideoSupported
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMediaCaptureVideoProfileMediaDescription.all.get_IsHdrVideoSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subtype
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription2, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoProfileMediaDescription2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureVideoProfileMediaDescription.all);
      Hr := m_Interface.get_Subtype (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out MediaCaptureVideoProfileMediaDescription
   )
   return IMapView_Guid_IInspectable.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_Guid_IInspectable.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription_Interface, WinRt.Windows.Media.Capture.IMediaCaptureVideoProfileMediaDescription2, WinRt.Windows.Media.Capture.IID_IMediaCaptureVideoProfileMediaDescription2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaCaptureVideoProfileMediaDescription.all);
      Hr := m_Interface.get_Properties (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IMapView_Guid_IInspectable (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for OptionalReferencePhotoCapturedEventArgs

   procedure Initialize (this : in out OptionalReferencePhotoCapturedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out OptionalReferencePhotoCapturedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IOptionalReferencePhotoCapturedEventArgs, IOptionalReferencePhotoCapturedEventArgs_Ptr);
   begin
      if this.m_IOptionalReferencePhotoCapturedEventArgs /= null then
         if this.m_IOptionalReferencePhotoCapturedEventArgs.all /= null then
            RefCount := this.m_IOptionalReferencePhotoCapturedEventArgs.all.Release;
            Free (this.m_IOptionalReferencePhotoCapturedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for OptionalReferencePhotoCapturedEventArgs

   function get_Frame
   (
      this : in out OptionalReferencePhotoCapturedEventArgs
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_IOptionalReferencePhotoCapturedEventArgs.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_Context
   (
      this : in out OptionalReferencePhotoCapturedEventArgs
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.IInspectable;
   begin
      Hr := this.m_IOptionalReferencePhotoCapturedEventArgs.all.get_Context (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoCapturedEventArgs

   procedure Initialize (this : in out PhotoCapturedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoCapturedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoCapturedEventArgs, IPhotoCapturedEventArgs_Ptr);
   begin
      if this.m_IPhotoCapturedEventArgs /= null then
         if this.m_IPhotoCapturedEventArgs.all /= null then
            RefCount := this.m_IPhotoCapturedEventArgs.all.Release;
            Free (this.m_IPhotoCapturedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoCapturedEventArgs

   function get_Frame
   (
      this : in out PhotoCapturedEventArgs
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_IPhotoCapturedEventArgs.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_Thumbnail
   (
      this : in out PhotoCapturedEventArgs
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_IPhotoCapturedEventArgs.all.get_Thumbnail (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_CaptureTimeOffset
   (
      this : in out PhotoCapturedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPhotoCapturedEventArgs.all.get_CaptureTimeOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PhotoConfirmationCapturedEventArgs

   procedure Initialize (this : in out PhotoConfirmationCapturedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PhotoConfirmationCapturedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPhotoConfirmationCapturedEventArgs, IPhotoConfirmationCapturedEventArgs_Ptr);
   begin
      if this.m_IPhotoConfirmationCapturedEventArgs /= null then
         if this.m_IPhotoConfirmationCapturedEventArgs.all /= null then
            RefCount := this.m_IPhotoConfirmationCapturedEventArgs.all.Release;
            Free (this.m_IPhotoConfirmationCapturedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PhotoConfirmationCapturedEventArgs

   function get_Frame
   (
      this : in out PhotoConfirmationCapturedEventArgs
   )
   return WinRt.Windows.Media.Capture.CapturedFrame'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.ICapturedFrame;
   begin
      return RetVal : WinRt.Windows.Media.Capture.CapturedFrame do
         Hr := this.m_IPhotoConfirmationCapturedEventArgs.all.get_Frame (m_ComRetVal'Access);
         Retval.m_ICapturedFrame := new Windows.Media.Capture.ICapturedFrame;
         Retval.m_ICapturedFrame.all := m_ComRetVal;
      end return;
   end;

   function get_CaptureTimeOffset
   (
      this : in out PhotoConfirmationCapturedEventArgs
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IPhotoConfirmationCapturedEventArgs.all.get_CaptureTimeOffset (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate RecordLimitationExceededEventHandler

   function Invoke
   (
      this : access RecordLimitationExceededEventHandler_Delegate;
      sender : Windows.Media.Capture.IMediaCapture
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ScreenCapture

   procedure Initialize (this : in out ScreenCapture) is
   begin
      null;
   end;

   procedure Finalize (this : in out ScreenCapture) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IScreenCapture, IScreenCapture_Ptr);
   begin
      if this.m_IScreenCapture /= null then
         if this.m_IScreenCapture.all /= null then
            RefCount := this.m_IScreenCapture.all.Release;
            Free (this.m_IScreenCapture);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ScreenCapture

   function GetForCurrentView
   return WinRt.Windows.Media.Capture.ScreenCapture is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.Capture.ScreenCapture");
      m_Factory        : access WinRt.Windows.Media.Capture.IScreenCaptureStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Capture.IScreenCapture;
   begin
      return RetVal : WinRt.Windows.Media.Capture.ScreenCapture do
         Hr := RoGetActivationFactory (m_hString, IID_IScreenCaptureStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IScreenCapture := new Windows.Media.Capture.IScreenCapture;
            Retval.m_IScreenCapture.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ScreenCapture

   function get_AudioSource
   (
      this : in out ScreenCapture
   )
   return WinRt.Windows.Media.Core.IMediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource;
   begin
      Hr := this.m_IScreenCapture.all.get_AudioSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_VideoSource
   (
      this : in out ScreenCapture
   )
   return WinRt.Windows.Media.Core.IMediaSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource;
   begin
      Hr := this.m_IScreenCapture.all.get_VideoSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAudioSuspended
   (
      this : in out ScreenCapture
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IScreenCapture.all.get_IsAudioSuspended (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVideoSuspended
   (
      this : in out ScreenCapture
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IScreenCapture.all.get_IsVideoSuspended (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SourceSuspensionChanged
   (
      this : in out ScreenCapture;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IScreenCapture.all.add_SourceSuspensionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SourceSuspensionChanged
   (
      this : in out ScreenCapture;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IScreenCapture.all.remove_SourceSuspensionChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for SourceSuspensionChangedEventArgs

   procedure Initialize (this : in out SourceSuspensionChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out SourceSuspensionChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ISourceSuspensionChangedEventArgs, ISourceSuspensionChangedEventArgs_Ptr);
   begin
      if this.m_ISourceSuspensionChangedEventArgs /= null then
         if this.m_ISourceSuspensionChangedEventArgs.all /= null then
            RefCount := this.m_ISourceSuspensionChangedEventArgs.all.Release;
            Free (this.m_ISourceSuspensionChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for SourceSuspensionChangedEventArgs

   function get_IsAudioSuspended
   (
      this : in out SourceSuspensionChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISourceSuspensionChangedEventArgs.all.get_IsAudioSuspended (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsVideoSuspended
   (
      this : in out SourceSuspensionChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ISourceSuspensionChangedEventArgs.all.get_IsVideoSuspended (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoStreamConfiguration

   procedure Initialize (this : in out VideoStreamConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoStreamConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoStreamConfiguration, IVideoStreamConfiguration_Ptr);
   begin
      if this.m_IVideoStreamConfiguration /= null then
         if this.m_IVideoStreamConfiguration.all /= null then
            RefCount := this.m_IVideoStreamConfiguration.all.Release;
            Free (this.m_IVideoStreamConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoStreamConfiguration

   function get_InputProperties
   (
      this : in out VideoStreamConfiguration
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := this.m_IVideoStreamConfiguration.all.get_InputProperties (m_ComRetVal'Access);
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_OutputProperties
   (
      this : in out VideoStreamConfiguration
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := this.m_IVideoStreamConfiguration.all.get_OutputProperties (m_ComRetVal'Access);
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Numerics;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Gaming.Input.ForceFeedback is

   package IAsyncOperation_ForceFeedbackLoadEffectResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult);
   package AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConditionForceEffect

   procedure Initialize (this : in out ConditionForceEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConditionForceEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IForceFeedbackEffect, IForceFeedbackEffect_Ptr);
   begin
      if this.m_IForceFeedbackEffect /= null then
         if this.m_IForceFeedbackEffect.all /= null then
            RefCount := this.m_IForceFeedbackEffect.all.Release;
            Free (this.m_IForceFeedbackEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConditionForceEffect

   function Constructor
   (
      effectKind : Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind
   )
   return ConditionForceEffect is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Gaming.Input.ForceFeedback.ConditionForceEffect");
      m_Factory    : access IConditionForceEffectFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
   begin
      return RetVal : ConditionForceEffect do
         Hr := RoGetActivationFactory (m_hString, IID_IConditionForceEffectFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (effectKind, m_ComRetVal'Access);
            Retval.m_IForceFeedbackEffect := new Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
            Retval.m_IForceFeedbackEffect.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConditionForceEffect

   function get_Gain
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out ConditionForceEffect;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.put_Gain (value);
   end;

   function get_State
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out ConditionForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Start;
   end;

   procedure Stop
   (
      this : in out ConditionForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Stop;
   end;

   function get_Kind
   (
      this : in out ConditionForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IConditionForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ConditionForceEffectKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IConditionForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IConditionForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetParameters
   (
      this : in out ConditionForceEffect;
      direction : Windows.Foundation.Numerics.Vector3;
      positiveCoefficient : WinRt.Single;
      negativeCoefficient : WinRt.Single;
      maxPositiveMagnitude : WinRt.Single;
      maxNegativeMagnitude : WinRt.Single;
      deadZone : WinRt.Single;
      bias : WinRt.Single
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IConditionForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IConditionForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IConditionForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParameters (direction, positiveCoefficient, negativeCoefficient, maxPositiveMagnitude, maxNegativeMagnitude, deadZone, bias);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ConstantForceEffect

   procedure Initialize (this : in out ConstantForceEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out ConstantForceEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IForceFeedbackEffect, IForceFeedbackEffect_Ptr);
   begin
      if this.m_IForceFeedbackEffect /= null then
         if this.m_IForceFeedbackEffect.all /= null then
            RefCount := this.m_IForceFeedbackEffect.all.Release;
            Free (this.m_IForceFeedbackEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ConstantForceEffect

   function Constructor return ConstantForceEffect is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Gaming.Input.ForceFeedback.ConstantForceEffect");
      m_ComRetVal  : aliased Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
   begin
      return RetVal : ConstantForceEffect do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IForceFeedbackEffect := new Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
            Retval.m_IForceFeedbackEffect.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ConstantForceEffect

   function get_Gain
   (
      this : in out ConstantForceEffect
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out ConstantForceEffect;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.put_Gain (value);
   end;

   function get_State
   (
      this : in out ConstantForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out ConstantForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Start;
   end;

   procedure Stop
   (
      this : in out ConstantForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Stop;
   end;

   procedure SetParameters
   (
      this : in out ConstantForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      duration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IConstantForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IConstantForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IConstantForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParameters (vector, duration);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetParametersWithEnvelope
   (
      this : in out ConstantForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IConstantForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IConstantForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IConstantForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParametersWithEnvelope (vector, attackGain, sustainGain, releaseGain, startDelay, attackDuration, sustainDuration, releaseDuration, repeatCount);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ForceFeedbackMotor

   procedure Initialize (this : in out ForceFeedbackMotor) is
   begin
      null;
   end;

   procedure Finalize (this : in out ForceFeedbackMotor) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IForceFeedbackMotor, IForceFeedbackMotor_Ptr);
   begin
      if this.m_IForceFeedbackMotor /= null then
         if this.m_IForceFeedbackMotor.all /= null then
            RefCount := this.m_IForceFeedbackMotor.all.Release;
            Free (this.m_IForceFeedbackMotor);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ForceFeedbackMotor

   function get_AreEffectsPaused
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IForceFeedbackMotor.all.get_AreEffectsPaused (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MasterGain
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IForceFeedbackMotor.all.get_MasterGain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MasterGain
   (
      this : in out ForceFeedbackMotor;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackMotor.all.put_MasterGain (value);
   end;

   function get_IsEnabled
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IForceFeedbackMotor.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedAxes
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectAxes is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectAxes;
   begin
      Hr := this.m_IForceFeedbackMotor.all.get_SupportedAxes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function LoadEffectAsync
   (
      this : in out ForceFeedbackMotor;
      effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ForceFeedbackLoadEffectResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ForceFeedbackLoadEffectResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult;
      m_IID            : aliased WinRt.IID := (569914620, 59461, 23225, (191, 133, 149, 52, 226, 57, 119, 152 )); -- Windows.Gaming.Input.ForceFeedback.ForceFeedbackLoadEffectResult;
      m_HandlerIID     : aliased WinRt.IID := (4162980417, 63288, 20968, (137, 186, 118, 187, 214, 97, 88, 203 ));
      m_Handler        : AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult.Kind := new AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ForceFeedbackLoadEffectResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult.Kind_Delegate, AsyncOperationCompletedHandler_ForceFeedbackLoadEffectResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IForceFeedbackMotor.all.LoadEffectAsync (effect, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   procedure PauseAllEffects
   (
      this : in out ForceFeedbackMotor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackMotor.all.PauseAllEffects;
   end;

   procedure ResumeAllEffects
   (
      this : in out ForceFeedbackMotor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackMotor.all.ResumeAllEffects;
   end;

   procedure StopAllEffects
   (
      this : in out ForceFeedbackMotor
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackMotor.all.StopAllEffects;
   end;

   function TryDisableAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IForceFeedbackMotor.all.TryDisableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryEnableAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IForceFeedbackMotor.all.TryEnableAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryResetAsync
   (
      this : in out ForceFeedbackMotor
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IForceFeedbackMotor.all.TryResetAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function TryUnloadEffectAsync
   (
      this : in out ForceFeedbackMotor;
      effect : Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IForceFeedbackMotor.all.TryUnloadEffectAsync (effect, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PeriodicForceEffect

   procedure Initialize (this : in out PeriodicForceEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out PeriodicForceEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IForceFeedbackEffect, IForceFeedbackEffect_Ptr);
   begin
      if this.m_IForceFeedbackEffect /= null then
         if this.m_IForceFeedbackEffect.all /= null then
            RefCount := this.m_IForceFeedbackEffect.all.Release;
            Free (this.m_IForceFeedbackEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PeriodicForceEffect

   function Constructor
   (
      effectKind : Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind
   )
   return PeriodicForceEffect is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Gaming.Input.ForceFeedback.PeriodicForceEffect");
      m_Factory    : access IPeriodicForceEffectFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
   begin
      return RetVal : PeriodicForceEffect do
         Hr := RoGetActivationFactory (m_hString, IID_IPeriodicForceEffectFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (effectKind, m_ComRetVal'Access);
            Retval.m_IForceFeedbackEffect := new Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
            Retval.m_IForceFeedbackEffect.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PeriodicForceEffect

   function get_Gain
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out PeriodicForceEffect;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.put_Gain (value);
   end;

   function get_State
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out PeriodicForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Start;
   end;

   procedure Stop
   (
      this : in out PeriodicForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Stop;
   end;

   function get_Kind
   (
      this : in out PeriodicForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.PeriodicForceEffectKind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IPeriodicForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.get_Kind (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetParameters
   (
      this : in out PeriodicForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      frequency : WinRt.Single;
      phase : WinRt.Single;
      bias : WinRt.Single;
      duration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IPeriodicForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParameters (vector, frequency, phase, bias, duration);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetParametersWithEnvelope
   (
      this : in out PeriodicForceEffect;
      vector : Windows.Foundation.Numerics.Vector3;
      frequency : WinRt.Single;
      phase : WinRt.Single;
      bias : WinRt.Single;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IPeriodicForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IPeriodicForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParametersWithEnvelope (vector, frequency, phase, bias, attackGain, sustainGain, releaseGain, startDelay, attackDuration, sustainDuration, releaseDuration, repeatCount);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RampForceEffect

   procedure Initialize (this : in out RampForceEffect) is
   begin
      null;
   end;

   procedure Finalize (this : in out RampForceEffect) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IForceFeedbackEffect, IForceFeedbackEffect_Ptr);
   begin
      if this.m_IForceFeedbackEffect /= null then
         if this.m_IForceFeedbackEffect.all /= null then
            RefCount := this.m_IForceFeedbackEffect.all.Release;
            Free (this.m_IForceFeedbackEffect);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RampForceEffect

   function Constructor return RampForceEffect is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Gaming.Input.ForceFeedback.RampForceEffect");
      m_ComRetVal  : aliased Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
   begin
      return RetVal : RampForceEffect do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IForceFeedbackEffect := new Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect;
            Retval.m_IForceFeedbackEffect.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RampForceEffect

   function get_Gain
   (
      this : in out RampForceEffect
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_Gain (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Gain
   (
      this : in out RampForceEffect;
      value : WinRt.Double
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.put_Gain (value);
   end;

   function get_State
   (
      this : in out RampForceEffect
   )
   return WinRt.Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Gaming.Input.ForceFeedback.ForceFeedbackEffectState;
   begin
      Hr := this.m_IForceFeedbackEffect.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Start
   (
      this : in out RampForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Start;
   end;

   procedure Stop
   (
      this : in out RampForceEffect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IForceFeedbackEffect.all.Stop;
   end;

   procedure SetParameters
   (
      this : in out RampForceEffect;
      startVector : Windows.Foundation.Numerics.Vector3;
      endVector : Windows.Foundation.Numerics.Vector3;
      duration : Windows.Foundation.TimeSpan
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IRampForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IRampForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IRampForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParameters (startVector, endVector, duration);
      m_RefCount := m_Interface.Release;
   end;

   procedure SetParametersWithEnvelope
   (
      this : in out RampForceEffect;
      startVector : Windows.Foundation.Numerics.Vector3;
      endVector : Windows.Foundation.Numerics.Vector3;
      attackGain : WinRt.Single;
      sustainGain : WinRt.Single;
      releaseGain : WinRt.Single;
      startDelay : Windows.Foundation.TimeSpan;
      attackDuration : Windows.Foundation.TimeSpan;
      sustainDuration : Windows.Foundation.TimeSpan;
      releaseDuration : Windows.Foundation.TimeSpan;
      repeatCount : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Gaming.Input.ForceFeedback.IRampForceEffect := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect_Interface, WinRt.Windows.Gaming.Input.ForceFeedback.IRampForceEffect, WinRt.Windows.Gaming.Input.ForceFeedback.IID_IRampForceEffect'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IForceFeedbackEffect.all);
      Hr := m_Interface.SetParametersWithEnvelope (startVector, endVector, attackGain, sustainGain, releaseGain, startDelay, attackDuration, sustainDuration, releaseDuration, repeatCount);
      m_RefCount := m_Interface.Release;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Services.TargetedContent is

   package IAsyncOperation_TargetedContentContainer is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.TargetedContent.ITargetedContentContainer);
   package AsyncOperationCompletedHandler_TargetedContentContainer is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.TargetedContent.ITargetedContentContainer);

   package IAsyncOperation_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);
   package AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType);

   package IAsyncOperation_TargetedContentSubscription is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Services.TargetedContent.ITargetedContentSubscription);
   package AsyncOperationCompletedHandler_TargetedContentSubscription is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Services.TargetedContent.ITargetedContentSubscription);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentAction

   procedure Initialize (this : in out TargetedContentAction) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentAction) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentAction, ITargetedContentAction_Ptr);
   begin
      if this.m_ITargetedContentAction /= null then
         if this.m_ITargetedContentAction.all /= null then
            RefCount := this.m_ITargetedContentAction.all.Release;
            Free (this.m_ITargetedContentAction);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentAction

   procedure InvokeAsync
   (
      this : in out TargetedContentAction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_ITargetedContentAction.all.InvokeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentAvailabilityChangedEventArgs

   procedure Initialize (this : in out TargetedContentAvailabilityChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentAvailabilityChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentAvailabilityChangedEventArgs, ITargetedContentAvailabilityChangedEventArgs_Ptr);
   begin
      if this.m_ITargetedContentAvailabilityChangedEventArgs /= null then
         if this.m_ITargetedContentAvailabilityChangedEventArgs.all /= null then
            RefCount := this.m_ITargetedContentAvailabilityChangedEventArgs.all.Release;
            Free (this.m_ITargetedContentAvailabilityChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentAvailabilityChangedEventArgs

   function GetDeferral
   (
      this : in out TargetedContentAvailabilityChangedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ITargetedContentAvailabilityChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentChangedEventArgs

   procedure Initialize (this : in out TargetedContentChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentChangedEventArgs, ITargetedContentChangedEventArgs_Ptr);
   begin
      if this.m_ITargetedContentChangedEventArgs /= null then
         if this.m_ITargetedContentChangedEventArgs.all /= null then
            RefCount := this.m_ITargetedContentChangedEventArgs.all.Release;
            Free (this.m_ITargetedContentChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentChangedEventArgs

   function GetDeferral
   (
      this : in out TargetedContentChangedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ITargetedContentChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   function get_HasPreviousContentExpired
   (
      this : in out TargetedContentChangedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITargetedContentChangedEventArgs.all.get_HasPreviousContentExpired (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentCollection

   procedure Initialize (this : in out TargetedContentCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentCollection, ITargetedContentCollection_Ptr);
   begin
      if this.m_ITargetedContentCollection /= null then
         if this.m_ITargetedContentCollection.all /= null then
            RefCount := this.m_ITargetedContentCollection.all.Release;
            Free (this.m_ITargetedContentCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentCollection

   function get_Id
   (
      this : in out TargetedContentCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentCollection.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportInteraction
   (
      this : in out TargetedContentCollection;
      interaction : Windows.Services.TargetedContent.TargetedContentInteraction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentCollection.all.ReportInteraction (interaction);
   end;

   procedure ReportCustomInteraction
   (
      this : in out TargetedContentCollection;
      customInteractionName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_customInteractionName : WinRt.HString := To_HString (customInteractionName);
   begin
      Hr := this.m_ITargetedContentCollection.all.ReportCustomInteraction (HStr_customInteractionName);
      Hr := WindowsDeleteString (HStr_customInteractionName);
   end;

   function get_Path
   (
      this : in out TargetedContentCollection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentCollection.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Properties
   (
      this : in out TargetedContentCollection
   )
   return IMapView_HString_ITargetedContentValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_ITargetedContentValue.Kind;
   begin
      Hr := this.m_ITargetedContentCollection.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_ITargetedContentValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Collections
   (
      this : in out TargetedContentCollection
   )
   return IVectorView_ITargetedContentCollection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITargetedContentCollection.Kind;
   begin
      Hr := this.m_ITargetedContentCollection.all.get_Collections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITargetedContentCollection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Items
   (
      this : in out TargetedContentCollection
   )
   return IVectorView_ITargetedContentItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITargetedContentItem.Kind;
   begin
      Hr := this.m_ITargetedContentCollection.all.get_Items (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITargetedContentItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentContainer

   procedure Initialize (this : in out TargetedContentContainer) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentContainer) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentContainer, ITargetedContentContainer_Ptr);
   begin
      if this.m_ITargetedContentContainer /= null then
         if this.m_ITargetedContentContainer.all /= null then
            RefCount := this.m_ITargetedContentContainer.all.Release;
            Free (this.m_ITargetedContentContainer);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TargetedContentContainer

   function GetAsync
   (
      contentId : WinRt.WString
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentContainer is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.TargetedContent.TargetedContentContainer");
      m_Factory        : access WinRt.Windows.Services.TargetedContent.ITargetedContentContainerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_contentId : WinRt.HString := To_HString (contentId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TargetedContentContainer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TargetedContentContainer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.TargetedContent.ITargetedContentContainer;
      m_IID            : aliased WinRt.IID := (3881296124, 310, 24419, (151, 184, 106, 150, 184, 208, 96, 30 )); -- Windows.Services.TargetedContent.TargetedContentContainer;
      m_HandlerIID     : aliased WinRt.IID := (2412166186, 9934, 20661, (151, 187, 252, 200, 12, 160, 135, 29 ));
      m_Handler        : AsyncOperationCompletedHandler_TargetedContentContainer.Kind := new AsyncOperationCompletedHandler_TargetedContentContainer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TargetedContentContainer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TargetedContentContainer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TargetedContentContainer.Kind_Delegate, AsyncOperationCompletedHandler_TargetedContentContainer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentContainer do
         Hr := RoGetActivationFactory (m_hString, IID_ITargetedContentContainerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAsync (HStr_contentId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ITargetedContentContainer := new Windows.Services.TargetedContent.ITargetedContentContainer;
                     Retval.m_ITargetedContentContainer.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_contentId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentContainer

   function get_Id
   (
      this : in out TargetedContentContainer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentContainer.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Timestamp
   (
      this : in out TargetedContentContainer
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_ITargetedContentContainer.all.get_Timestamp (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Availability
   (
      this : in out TargetedContentContainer
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentAvailability is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.TargetedContentAvailability;
   begin
      Hr := this.m_ITargetedContentContainer.all.get_Availability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Content
   (
      this : in out TargetedContentContainer
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentCollection;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentCollection do
         Hr := this.m_ITargetedContentContainer.all.get_Content (m_ComRetVal'Access);
         Retval.m_ITargetedContentCollection := new Windows.Services.TargetedContent.ITargetedContentCollection;
         Retval.m_ITargetedContentCollection.all := m_ComRetVal;
      end return;
   end;

   function SelectSingleObject
   (
      this : in out TargetedContentContainer;
      path : WinRt.WString
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentObject'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentObject;
      HStr_path : WinRt.HString := To_HString (path);
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentObject do
         Hr := this.m_ITargetedContentContainer.all.SelectSingleObject (HStr_path, m_ComRetVal'Access);
         Retval.m_ITargetedContentObject := new Windows.Services.TargetedContent.ITargetedContentObject;
         Retval.m_ITargetedContentObject.all := m_ComRetVal;
         Hr := WindowsDeleteString (HStr_path);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentFile

   procedure Initialize (this : in out TargetedContentFile) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentFile) is
      RefCount : WinRt.UInt32 := 0;
      use type WinRt.Windows.Storage.Streams.IRandomAccessStreamReference;
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Storage.Streams.IRandomAccessStreamReference, WinRt.Windows.Storage.Streams.IRandomAccessStreamReference_Ptr);
   begin
      if this.m_IRandomAccessStreamReference /= null then
         if this.m_IRandomAccessStreamReference.all /= null then
            RefCount := this.m_IRandomAccessStreamReference.all.Release;
            Free (this.m_IRandomAccessStreamReference);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentFile

   function OpenReadAsync
   (
      this : in out TargetedContentFile
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRandomAccessStreamReference.all.OpenReadAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentImage

   procedure Initialize (this : in out TargetedContentImage) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentImage) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentImage, ITargetedContentImage_Ptr);
   begin
      if this.m_ITargetedContentImage /= null then
         if this.m_ITargetedContentImage.all /= null then
            RefCount := this.m_ITargetedContentImage.all.Release;
            Free (this.m_ITargetedContentImage);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentImage

   function get_Height
   (
      this : in out TargetedContentImage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITargetedContentImage.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Width
   (
      this : in out TargetedContentImage
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_ITargetedContentImage.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function OpenReadAsync
   (
      this : in out TargetedContentImage
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Storage.Streams.IRandomAccessStreamReference := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_IRandomAccessStreamWithContentType.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_IRandomAccessStreamWithContentType.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_IID            : aliased WinRt.IID := (3299179614, 12976, 21939, (173, 19, 206, 28, 35, 4, 30, 214 )); -- Windows.Storage.Streams.IRandomAccessStreamWithContentType;
      m_HandlerIID     : aliased WinRt.IID := (1037954292, 7481, 22760, (131, 177, 219, 237, 84, 28, 127, 53 ));
      m_Handler        : AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind := new AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_IRandomAccessStreamWithContentType.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind_Delegate, AsyncOperationCompletedHandler_IRandomAccessStreamWithContentType.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Services.TargetedContent.ITargetedContentImage_Interface, WinRt.Windows.Storage.Streams.IRandomAccessStreamReference, WinRt.Windows.Storage.Streams.IID_IRandomAccessStreamReference'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_ITargetedContentImage.all);
      Hr := m_Interface.OpenReadAsync (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentItem

   procedure Initialize (this : in out TargetedContentItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentItem, ITargetedContentItem_Ptr);
   begin
      if this.m_ITargetedContentItem /= null then
         if this.m_ITargetedContentItem.all /= null then
            RefCount := this.m_ITargetedContentItem.all.Release;
            Free (this.m_ITargetedContentItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentItem

   function get_Path
   (
      this : in out TargetedContentItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentItem.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportInteraction
   (
      this : in out TargetedContentItem;
      interaction : Windows.Services.TargetedContent.TargetedContentInteraction
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentItem.all.ReportInteraction (interaction);
   end;

   procedure ReportCustomInteraction
   (
      this : in out TargetedContentItem;
      customInteractionName : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_customInteractionName : WinRt.HString := To_HString (customInteractionName);
   begin
      Hr := this.m_ITargetedContentItem.all.ReportCustomInteraction (HStr_customInteractionName);
      Hr := WindowsDeleteString (HStr_customInteractionName);
   end;

   function get_State
   (
      this : in out TargetedContentItem
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentItemState'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentItemState;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentItemState do
         Hr := this.m_ITargetedContentItem.all.get_State (m_ComRetVal'Access);
         Retval.m_ITargetedContentItemState := new Windows.Services.TargetedContent.ITargetedContentItemState;
         Retval.m_ITargetedContentItemState.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out TargetedContentItem
   )
   return IMapView_HString_ITargetedContentValue.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMapView_HString_ITargetedContentValue.Kind;
   begin
      Hr := this.m_ITargetedContentItem.all.get_Properties (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMapView_HString_ITargetedContentValue (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Collections
   (
      this : in out TargetedContentItem
   )
   return IVectorView_ITargetedContentCollection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITargetedContentCollection.Kind;
   begin
      Hr := this.m_ITargetedContentItem.all.get_Collections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITargetedContentCollection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentItemState

   procedure Initialize (this : in out TargetedContentItemState) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentItemState) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentItemState, ITargetedContentItemState_Ptr);
   begin
      if this.m_ITargetedContentItemState /= null then
         if this.m_ITargetedContentItemState.all /= null then
            RefCount := this.m_ITargetedContentItemState.all.Release;
            Free (this.m_ITargetedContentItemState);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentItemState

   function get_ShouldDisplay
   (
      this : in out TargetedContentItemState
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITargetedContentItemState.all.get_ShouldDisplay (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AppInstallationState
   (
      this : in out TargetedContentItemState
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentAppInstallationState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.TargetedContentAppInstallationState;
   begin
      Hr := this.m_ITargetedContentItemState.all.get_AppInstallationState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentObject

   procedure Initialize (this : in out TargetedContentObject) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentObject) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentObject, ITargetedContentObject_Ptr);
   begin
      if this.m_ITargetedContentObject /= null then
         if this.m_ITargetedContentObject.all /= null then
            RefCount := this.m_ITargetedContentObject.all.Release;
            Free (this.m_ITargetedContentObject);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentObject

   function get_ObjectKind
   (
      this : in out TargetedContentObject
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentObjectKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.TargetedContentObjectKind;
   begin
      Hr := this.m_ITargetedContentObject.all.get_ObjectKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Collection
   (
      this : in out TargetedContentObject
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentCollection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentCollection;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentCollection do
         Hr := this.m_ITargetedContentObject.all.get_Collection (m_ComRetVal'Access);
         Retval.m_ITargetedContentCollection := new Windows.Services.TargetedContent.ITargetedContentCollection;
         Retval.m_ITargetedContentCollection.all := m_ComRetVal;
      end return;
   end;

   function get_Item
   (
      this : in out TargetedContentObject
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentItem;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentItem do
         Hr := this.m_ITargetedContentObject.all.get_Item (m_ComRetVal'Access);
         Retval.m_ITargetedContentItem := new Windows.Services.TargetedContent.ITargetedContentItem;
         Retval.m_ITargetedContentItem.all := m_ComRetVal;
      end return;
   end;

   function get_Value
   (
      this : in out TargetedContentObject
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentValue'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentValue;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentValue do
         Hr := this.m_ITargetedContentObject.all.get_Value (m_ComRetVal'Access);
         Retval.m_ITargetedContentValue := new Windows.Services.TargetedContent.ITargetedContentValue;
         Retval.m_ITargetedContentValue.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentStateChangedEventArgs

   procedure Initialize (this : in out TargetedContentStateChangedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentStateChangedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentStateChangedEventArgs, ITargetedContentStateChangedEventArgs_Ptr);
   begin
      if this.m_ITargetedContentStateChangedEventArgs /= null then
         if this.m_ITargetedContentStateChangedEventArgs.all /= null then
            RefCount := this.m_ITargetedContentStateChangedEventArgs.all.Release;
            Free (this.m_ITargetedContentStateChangedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentStateChangedEventArgs

   function GetDeferral
   (
      this : in out TargetedContentStateChangedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_ITargetedContentStateChangedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentSubscription

   procedure Initialize (this : in out TargetedContentSubscription) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentSubscription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentSubscription, ITargetedContentSubscription_Ptr);
   begin
      if this.m_ITargetedContentSubscription /= null then
         if this.m_ITargetedContentSubscription.all /= null then
            RefCount := this.m_ITargetedContentSubscription.all.Release;
            Free (this.m_ITargetedContentSubscription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TargetedContentSubscription

   function GetAsync_TargetedContentSubscription
   (
      subscriptionId : WinRt.WString
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentSubscription is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.TargetedContent.TargetedContentSubscription");
      m_Factory        : access WinRt.Windows.Services.TargetedContent.ITargetedContentSubscriptionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_subscriptionId : WinRt.HString := To_HString (subscriptionId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TargetedContentSubscription.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TargetedContentSubscription.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.TargetedContent.ITargetedContentSubscription;
      m_IID            : aliased WinRt.IID := (1190227787, 36545, 23631, (177, 245, 167, 231, 172, 214, 51, 102 )); -- Windows.Services.TargetedContent.TargetedContentSubscription;
      m_HandlerIID     : aliased WinRt.IID := (3826814065, 23182, 22508, (176, 222, 29, 49, 79, 179, 226, 207 ));
      m_Handler        : AsyncOperationCompletedHandler_TargetedContentSubscription.Kind := new AsyncOperationCompletedHandler_TargetedContentSubscription.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TargetedContentSubscription.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TargetedContentSubscription.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TargetedContentSubscription.Kind_Delegate, AsyncOperationCompletedHandler_TargetedContentSubscription.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentSubscription do
         Hr := RoGetActivationFactory (m_hString, IID_ITargetedContentSubscriptionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetAsync (HStr_subscriptionId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_ITargetedContentSubscription := new Windows.Services.TargetedContent.ITargetedContentSubscription;
                     Retval.m_ITargetedContentSubscription.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_subscriptionId);
      end return;
   end;

   function GetOptions
   (
      subscriptionId : WinRt.WString
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentSubscriptionOptions is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Services.TargetedContent.TargetedContentSubscription");
      m_Factory        : access WinRt.Windows.Services.TargetedContent.ITargetedContentSubscriptionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentSubscriptionOptions;
      HStr_subscriptionId : WinRt.HString := To_HString (subscriptionId);
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentSubscriptionOptions do
         Hr := RoGetActivationFactory (m_hString, IID_ITargetedContentSubscriptionStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetOptions (HStr_subscriptionId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_ITargetedContentSubscriptionOptions := new Windows.Services.TargetedContent.ITargetedContentSubscriptionOptions;
            Retval.m_ITargetedContentSubscriptionOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_subscriptionId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentSubscription

   function get_Id
   (
      this : in out TargetedContentSubscription
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentSubscription.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetContentContainerAsync
   (
      this : in out TargetedContentSubscription
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentContainer'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_TargetedContentContainer.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_TargetedContentContainer.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Services.TargetedContent.ITargetedContentContainer;
      m_IID            : aliased WinRt.IID := (3881296124, 310, 24419, (151, 184, 106, 150, 184, 208, 96, 30 )); -- Windows.Services.TargetedContent.TargetedContentContainer;
      m_HandlerIID     : aliased WinRt.IID := (2412166186, 9934, 20661, (151, 187, 252, 200, 12, 160, 135, 29 ));
      m_Handler        : AsyncOperationCompletedHandler_TargetedContentContainer.Kind := new AsyncOperationCompletedHandler_TargetedContentContainer.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_TargetedContentContainer.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_TargetedContentContainer.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_TargetedContentContainer.Kind_Delegate, AsyncOperationCompletedHandler_TargetedContentContainer.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentContainer do
         Hr := this.m_ITargetedContentSubscription.all.GetContentContainerAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_ITargetedContentContainer := new Windows.Services.TargetedContent.ITargetedContentContainer;
                  Retval.m_ITargetedContentContainer.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_ContentChanged
   (
      this : in out TargetedContentSubscription;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITargetedContentSubscription.all.add_ContentChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ContentChanged
   (
      this : in out TargetedContentSubscription;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentSubscription.all.remove_ContentChanged (cookie);
   end;

   function add_AvailabilityChanged
   (
      this : in out TargetedContentSubscription;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITargetedContentSubscription.all.add_AvailabilityChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AvailabilityChanged
   (
      this : in out TargetedContentSubscription;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentSubscription.all.remove_AvailabilityChanged (cookie);
   end;

   function add_StateChanged
   (
      this : in out TargetedContentSubscription;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_ITargetedContentSubscription.all.add_StateChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StateChanged
   (
      this : in out TargetedContentSubscription;
      cookie : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentSubscription.all.remove_StateChanged (cookie);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentSubscriptionOptions

   procedure Initialize (this : in out TargetedContentSubscriptionOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentSubscriptionOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentSubscriptionOptions, ITargetedContentSubscriptionOptions_Ptr);
   begin
      if this.m_ITargetedContentSubscriptionOptions /= null then
         if this.m_ITargetedContentSubscriptionOptions.all /= null then
            RefCount := this.m_ITargetedContentSubscriptionOptions.all.Release;
            Free (this.m_ITargetedContentSubscriptionOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentSubscriptionOptions

   function get_SubscriptionId
   (
      this : in out TargetedContentSubscriptionOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.get_SubscriptionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AllowPartialContentAvailability
   (
      this : in out TargetedContentSubscriptionOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.get_AllowPartialContentAvailability (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowPartialContentAvailability
   (
      this : in out TargetedContentSubscriptionOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.put_AllowPartialContentAvailability (value);
   end;

   function get_CloudQueryParameters
   (
      this : in out TargetedContentSubscriptionOptions
   )
   return IMap_HString_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IMap_HString_HString.Kind;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.get_CloudQueryParameters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IMap_HString_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_LocalFilters
   (
      this : in out TargetedContentSubscriptionOptions
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.get_LocalFilters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Update
   (
      this : in out TargetedContentSubscriptionOptions
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_ITargetedContentSubscriptionOptions.all.Update;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TargetedContentValue

   procedure Initialize (this : in out TargetedContentValue) is
   begin
      null;
   end;

   procedure Finalize (this : in out TargetedContentValue) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ITargetedContentValue, ITargetedContentValue_Ptr);
   begin
      if this.m_ITargetedContentValue /= null then
         if this.m_ITargetedContentValue.all /= null then
            RefCount := this.m_ITargetedContentValue.all.Release;
            Free (this.m_ITargetedContentValue);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TargetedContentValue

   function get_ValueKind
   (
      this : in out TargetedContentValue
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentValueKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.TargetedContentValueKind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_ValueKind (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Path
   (
      this : in out TargetedContentValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Path (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_String
   (
      this : in out TargetedContentValue
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_ITargetedContentValue.all.get_String (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Uri
   (
      this : in out TargetedContentValue
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_ITargetedContentValue.all.get_Uri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   function get_Number
   (
      this : in out TargetedContentValue
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Number (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Boolean
   (
      this : in out TargetedContentValue
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Boolean (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_File
   (
      this : in out TargetedContentValue
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentFile'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentFile do
         Hr := this.m_ITargetedContentValue.all.get_File (m_ComRetVal'Access);
         Retval.m_IRandomAccessStreamReference := new Windows.Storage.Streams.IRandomAccessStreamReference;
         Retval.m_IRandomAccessStreamReference.all := m_ComRetVal;
      end return;
   end;

   function get_ImageFile
   (
      this : in out TargetedContentValue
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentImage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentImage;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentImage do
         Hr := this.m_ITargetedContentValue.all.get_ImageFile (m_ComRetVal'Access);
         Retval.m_ITargetedContentImage := new Windows.Services.TargetedContent.ITargetedContentImage;
         Retval.m_ITargetedContentImage.all := m_ComRetVal;
      end return;
   end;

   function get_Action
   (
      this : in out TargetedContentValue
   )
   return WinRt.Windows.Services.TargetedContent.TargetedContentAction'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Services.TargetedContent.ITargetedContentAction;
   begin
      return RetVal : WinRt.Windows.Services.TargetedContent.TargetedContentAction do
         Hr := this.m_ITargetedContentValue.all.get_Action (m_ComRetVal'Access);
         Retval.m_ITargetedContentAction := new Windows.Services.TargetedContent.ITargetedContentAction;
         Retval.m_ITargetedContentAction.all := m_ComRetVal;
      end return;
   end;

   function get_Strings
   (
      this : in out TargetedContentValue
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Strings (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Uris
   (
      this : in out TargetedContentValue
   )
   return IVectorView_IUriRuntimeClass.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IUriRuntimeClass.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Uris (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IUriRuntimeClass (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Numbers
   (
      this : in out TargetedContentValue
   )
   return IVectorView_Double.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Double.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Numbers (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Double (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Booleans
   (
      this : in out TargetedContentValue
   )
   return IVectorView_Boolean.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_Boolean.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Booleans (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_Boolean (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Files
   (
      this : in out TargetedContentValue
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Files (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImageFiles
   (
      this : in out TargetedContentValue
   )
   return IVectorView_ITargetedContentImage.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITargetedContentImage.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_ImageFiles (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITargetedContentImage (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Actions
   (
      this : in out TargetedContentValue
   )
   return IVectorView_ITargetedContentAction.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_ITargetedContentAction.Kind;
   begin
      Hr := this.m_ITargetedContentValue.all.get_Actions (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_ITargetedContentAction (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

end;

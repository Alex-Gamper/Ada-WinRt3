--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics.Printing;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Scanners is

   package IAsyncOperation_ImageScannerPreviewResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Scanners.IImageScannerPreviewResult);
   package AsyncOperationCompletedHandler_ImageScannerPreviewResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Scanners.IImageScannerPreviewResult);

   package IAsyncOperation_ImageScannerScanResult is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Devices.Scanners.IImageScannerScanResult, GenericObject);
   package AsyncOperationCompletedHandler_ImageScannerScanResult is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Devices.Scanners.IImageScannerScanResult, GenericObject);

   package IAsyncOperation_ImageScanner is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.Scanners.IImageScanner);
   package AsyncOperationCompletedHandler_ImageScanner is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.Scanners.IImageScanner);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScanner

   procedure Initialize (this : in out ImageScanner) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScanner) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScanner, IImageScanner_Ptr);
   begin
      if this.m_IImageScanner /= null then
         if this.m_IImageScanner.all /= null then
            RefCount := this.m_IImageScanner.all.Release;
            Free (this.m_IImageScanner);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ImageScanner

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.Scanners.ImageScanner is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Scanners.ImageScanner");
      m_Factory        : access WinRt.Windows.Devices.Scanners.IImageScannerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageScanner.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageScanner.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Scanners.IImageScanner;
      m_IID            : aliased WinRt.IID := (1977059126, 27730, 21790, (171, 95, 80, 103, 79, 50, 52, 49 )); -- Windows.Devices.Scanners.ImageScanner;
      m_HandlerIID     : aliased WinRt.IID := (3009074868, 3488, 21057, (135, 255, 238, 243, 161, 136, 50, 67 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageScanner.Kind := new AsyncOperationCompletedHandler_ImageScanner.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageScanner.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageScanner.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageScanner.Kind_Delegate, AsyncOperationCompletedHandler_ImageScanner.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScanner do
         Hr := RoGetActivationFactory (m_hString, IID_IImageScannerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IImageScanner := new Windows.Devices.Scanners.IImageScanner;
                     Retval.m_IImageScanner.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   function GetDeviceSelector
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Scanners.ImageScanner");
      m_Factory        : access WinRt.Windows.Devices.Scanners.IImageScannerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IImageScannerStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScanner

   function get_DeviceId
   (
      this : in out ImageScanner
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IImageScanner.all.get_DeviceId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_DefaultScanSource
   (
      this : in out ImageScanner
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerScanSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerScanSource;
   begin
      Hr := this.m_IImageScanner.all.get_DefaultScanSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function IsScanSourceSupported
   (
      this : in out ImageScanner;
      value : Windows.Devices.Scanners.ImageScannerScanSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScanner.all.IsScanSourceSupported (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FlatbedConfiguration
   (
      this : in out ImageScanner
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFlatbedConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.IImageScannerFormatConfiguration;
   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScannerFlatbedConfiguration do
         Hr := this.m_IImageScanner.all.get_FlatbedConfiguration (m_ComRetVal'Access);
         Retval.m_IImageScannerFormatConfiguration := new Windows.Devices.Scanners.IImageScannerFormatConfiguration;
         Retval.m_IImageScannerFormatConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_FeederConfiguration
   (
      this : in out ImageScanner
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFeederConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.IImageScannerFormatConfiguration;
   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScannerFeederConfiguration do
         Hr := this.m_IImageScanner.all.get_FeederConfiguration (m_ComRetVal'Access);
         Retval.m_IImageScannerFormatConfiguration := new Windows.Devices.Scanners.IImageScannerFormatConfiguration;
         Retval.m_IImageScannerFormatConfiguration.all := m_ComRetVal;
      end return;
   end;

   function get_AutoConfiguration
   (
      this : in out ImageScanner
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerAutoConfiguration'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.IImageScannerFormatConfiguration;
   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScannerAutoConfiguration do
         Hr := this.m_IImageScanner.all.get_AutoConfiguration (m_ComRetVal'Access);
         Retval.m_IImageScannerFormatConfiguration := new Windows.Devices.Scanners.IImageScannerFormatConfiguration;
         Retval.m_IImageScannerFormatConfiguration.all := m_ComRetVal;
      end return;
   end;

   function IsPreviewSupported
   (
      this : in out ImageScanner;
      scanSource : Windows.Devices.Scanners.ImageScannerScanSource
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScanner.all.IsPreviewSupported (scanSource, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function ScanPreviewToStreamAsync
   (
      this : in out ImageScanner;
      scanSource : Windows.Devices.Scanners.ImageScannerScanSource;
      targetStream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerPreviewResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageScannerPreviewResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageScannerPreviewResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Scanners.IImageScannerPreviewResult;
      m_IID            : aliased WinRt.IID := (796153711, 1176, 21320, (188, 59, 167, 13, 26, 119, 23, 24 )); -- Windows.Devices.Scanners.ImageScannerPreviewResult;
      m_HandlerIID     : aliased WinRt.IID := (3226772496, 44092, 21331, (177, 238, 232, 94, 120, 250, 243, 241 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageScannerPreviewResult.Kind := new AsyncOperationCompletedHandler_ImageScannerPreviewResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageScannerPreviewResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageScannerPreviewResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageScannerPreviewResult.Kind_Delegate, AsyncOperationCompletedHandler_ImageScannerPreviewResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScannerPreviewResult do
         Hr := this.m_IImageScanner.all.ScanPreviewToStreamAsync (scanSource, targetStream, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IImageScannerPreviewResult := new Windows.Devices.Scanners.IImageScannerPreviewResult;
                  Retval.m_IImageScannerPreviewResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ScanFilesToFolderAsync
   (
      this : in out ImageScanner;
      scanSource : Windows.Devices.Scanners.ImageScannerScanSource;
      storageFolder : Windows.Storage.StorageFolder'Class
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerScanResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ImageScannerScanResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ImageScannerScanResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.Scanners.IImageScannerScanResult;
      m_IID            : aliased WinRt.IID := (1852711562, 63000, 23859, (133, 35, 2, 209, 102, 114, 102, 91 )); -- Windows.Devices.Scanners.ImageScannerScanResult;
      m_HandlerIID     : aliased WinRt.IID := (3180059608, 17818, 21212, (177, 1, 117, 179, 152, 166, 26, 239 ));
      m_Handler        : AsyncOperationCompletedHandler_ImageScannerScanResult.Kind := new AsyncOperationCompletedHandler_ImageScannerScanResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ImageScannerScanResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ImageScannerScanResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ImageScannerScanResult.Kind_Delegate, AsyncOperationCompletedHandler_ImageScannerScanResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.Scanners.ImageScannerScanResult do
         Hr := this.m_IImageScanner.all.ScanFilesToFolderAsync (scanSource, storageFolder.m_IStorageFolder.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IImageScannerScanResult := new Windows.Devices.Scanners.IImageScannerScanResult;
                  Retval.m_IImageScannerScanResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScannerAutoConfiguration

   procedure Initialize (this : in out ImageScannerAutoConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScannerAutoConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScannerFormatConfiguration, IImageScannerFormatConfiguration_Ptr);
   begin
      if this.m_IImageScannerFormatConfiguration /= null then
         if this.m_IImageScannerFormatConfiguration.all /= null then
            RefCount := this.m_IImageScannerFormatConfiguration.all.Release;
            Free (this.m_IImageScannerFormatConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScannerAutoConfiguration

   function get_DefaultFormat
   (
      this : in out ImageScannerAutoConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_DefaultFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out ImageScannerAutoConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out ImageScannerAutoConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.put_Format (value);
   end;

   function IsFormatSupported
   (
      this : in out ImageScannerAutoConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.IsFormatSupported (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScannerFeederConfiguration

   procedure Initialize (this : in out ImageScannerFeederConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScannerFeederConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScannerFormatConfiguration, IImageScannerFormatConfiguration_Ptr);
   begin
      if this.m_IImageScannerFormatConfiguration /= null then
         if this.m_IImageScannerFormatConfiguration.all /= null then
            RefCount := this.m_IImageScannerFormatConfiguration.all.Release;
            Free (this.m_IImageScannerFormatConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScannerFeederConfiguration

   function get_DefaultFormat
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_DefaultFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.put_Format (value);
   end;

   function IsFormatSupported
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.IsFormatSupported (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinScanArea
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinScanArea (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxScanArea
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxScanArea (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectedScanRegion
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_SelectedScanRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SelectedScanRegion
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_SelectedScanRegion (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AutoCroppingMode
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerAutoCroppingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerAutoCroppingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_AutoCroppingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoCroppingMode
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerAutoCroppingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_AutoCroppingMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function IsAutoCroppingModeSupported
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerAutoCroppingMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.IsAutoCroppingModeSupported (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinResolution
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxResolution
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OpticalResolution
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_OpticalResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredResolution
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DesiredResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredResolution
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerResolution
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_DesiredResolution (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ActualResolution
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ActualResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultColorMode
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerColorMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerColorMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultColorMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ColorMode
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerColorMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerColorMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ColorMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorMode
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerColorMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_ColorMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function IsColorModeSupported
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Devices.Scanners.ImageScannerColorMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.IsColorModeSupported (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinBrightness
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxBrightness
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BrightnessStep
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_BrightnessStep (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultBrightness
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Brightness
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_Brightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Brightness
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_Brightness (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MinContrast
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxContrast
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ContrastStep
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ContrastStep (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultContrast
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Contrast
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_Contrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Contrast
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_Contrast (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanAutoDetectPageSize
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_CanAutoDetectPageSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_AutoDetectPageSize
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_AutoDetectPageSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoDetectPageSize
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_AutoDetectPageSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PageSize
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Graphics.Printing.PrintMediaSize is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintMediaSize;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_PageSize (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PageSize
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Graphics.Printing.PrintMediaSize
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_PageSize (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PageOrientation
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Graphics.Printing.PrintOrientation is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.PrintOrientation;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_PageOrientation (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PageOrientation
   (
      this : in out ImageScannerFeederConfiguration;
      value : Windows.Graphics.Printing.PrintOrientation
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_PageOrientation (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PageSizeDimensions
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_PageSizeDimensions (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function IsPageSizeSupported
   (
      this : in out ImageScannerFeederConfiguration;
      pageSize : Windows.Graphics.Printing.PrintMediaSize;
      pageOrientation : Windows.Graphics.Printing.PrintOrientation
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.IsPageSizeSupported (pageSize, pageOrientation, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxNumberOfPages
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxNumberOfPages (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MaxNumberOfPages
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_MaxNumberOfPages (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanScanDuplex
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_CanScanDuplex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Duplex
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_Duplex (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Duplex
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_Duplex (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CanScanAhead
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_CanScanAhead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ScanAhead
   (
      this : in out ImageScannerFeederConfiguration
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ScanAhead (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ScanAhead
   (
      this : in out ImageScannerFeederConfiguration;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerFeederConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerFeederConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_ScanAhead (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScannerFlatbedConfiguration

   procedure Initialize (this : in out ImageScannerFlatbedConfiguration) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScannerFlatbedConfiguration) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScannerFormatConfiguration, IImageScannerFormatConfiguration_Ptr);
   begin
      if this.m_IImageScannerFormatConfiguration /= null then
         if this.m_IImageScannerFormatConfiguration.all /= null then
            RefCount := this.m_IImageScannerFormatConfiguration.all.Release;
            Free (this.m_IImageScannerFormatConfiguration);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScannerFlatbedConfiguration

   function get_DefaultFormat
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_DefaultFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.put_Format (value);
   end;

   function IsFormatSupported
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerFormat
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScannerFormatConfiguration.all.IsFormatSupported (value, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MinScanArea
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinScanArea (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxScanArea
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Foundation.Size is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Size;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxScanArea (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SelectedScanRegion
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Foundation.Rect is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.Rect;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_SelectedScanRegion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_SelectedScanRegion
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Foundation.Rect
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_SelectedScanRegion (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_AutoCroppingMode
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerAutoCroppingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerAutoCroppingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_AutoCroppingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutoCroppingMode
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerAutoCroppingMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_AutoCroppingMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function IsAutoCroppingModeSupported
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerAutoCroppingMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.IsAutoCroppingModeSupported (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinResolution
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxResolution
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_OpticalResolution
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_OpticalResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DesiredResolution
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DesiredResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_DesiredResolution
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerResolution
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_DesiredResolution (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ActualResolution
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerResolution is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerResolution;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ActualResolution (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultColorMode
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerColorMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerColorMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultColorMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ColorMode
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerColorMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerColorMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ColorMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_ColorMode
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerColorMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_ColorMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function IsColorModeSupported
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : Windows.Devices.Scanners.ImageScannerColorMode
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.IsColorModeSupported (value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MinBrightness
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxBrightness
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_BrightnessStep
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_BrightnessStep (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultBrightness
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultBrightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Brightness
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_Brightness (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Brightness
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_Brightness (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_MinContrast
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MinContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_MaxContrast
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_MaxContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ContrastStep
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_ContrastStep (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_DefaultContrast
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_DefaultContrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Contrast
   (
      this : in out ImageScannerFlatbedConfiguration
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.get_Contrast (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_Contrast
   (
      this : in out ImageScannerFlatbedConfiguration;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Scanners.IImageScannerFormatConfiguration_Interface, WinRt.Windows.Devices.Scanners.IImageScannerSourceConfiguration, WinRt.Windows.Devices.Scanners.IID_IImageScannerSourceConfiguration'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageScannerFormatConfiguration.all);
      Hr := m_Interface.put_Contrast (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScannerPreviewResult

   procedure Initialize (this : in out ImageScannerPreviewResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScannerPreviewResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScannerPreviewResult, IImageScannerPreviewResult_Ptr);
   begin
      if this.m_IImageScannerPreviewResult /= null then
         if this.m_IImageScannerPreviewResult.all /= null then
            RefCount := this.m_IImageScannerPreviewResult.all.Release;
            Free (this.m_IImageScannerPreviewResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScannerPreviewResult

   function get_Succeeded
   (
      this : in out ImageScannerPreviewResult
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IImageScannerPreviewResult.all.get_Succeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Format
   (
      this : in out ImageScannerPreviewResult
   )
   return WinRt.Windows.Devices.Scanners.ImageScannerFormat is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Scanners.ImageScannerFormat;
   begin
      Hr := this.m_IImageScannerPreviewResult.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageScannerScanResult

   procedure Initialize (this : in out ImageScannerScanResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageScannerScanResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageScannerScanResult, IImageScannerScanResult_Ptr);
   begin
      if this.m_IImageScannerScanResult /= null then
         if this.m_IImageScannerScanResult.all /= null then
            RefCount := this.m_IImageScannerScanResult.all.Release;
            Free (this.m_IImageScannerScanResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageScannerScanResult

   function get_ScannedFiles
   (
      this : in out ImageScannerScanResult
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IImageScannerScanResult.all.get_ScannedFiles (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

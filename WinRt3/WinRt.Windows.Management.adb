--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Management is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MdmAlert

   procedure Initialize (this : in out MdmAlert) is
   begin
      null;
   end;

   procedure Finalize (this : in out MdmAlert) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMdmAlert, IMdmAlert_Ptr);
   begin
      if this.m_IMdmAlert /= null then
         if this.m_IMdmAlert.all /= null then
            RefCount := this.m_IMdmAlert.all.Release;
            Free (this.m_IMdmAlert);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MdmAlert

   function Constructor return MdmAlert is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Management.MdmAlert");
      m_ComRetVal  : aliased Windows.Management.IMdmAlert;
   begin
      return RetVal : MdmAlert do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMdmAlert := new Windows.Management.IMdmAlert;
            Retval.m_IMdmAlert.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MdmAlert

   function get_Data
   (
      this : in out MdmAlert
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMdmAlert.all.get_Data (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Data
   (
      this : in out MdmAlert;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMdmAlert.all.put_Data (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Format
   (
      this : in out MdmAlert
   )
   return WinRt.Windows.Management.MdmAlertDataType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.MdmAlertDataType;
   begin
      Hr := this.m_IMdmAlert.all.get_Format (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Format
   (
      this : in out MdmAlert;
      value : Windows.Management.MdmAlertDataType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMdmAlert.all.put_Format (value);
   end;

   function get_Mark
   (
      this : in out MdmAlert
   )
   return WinRt.Windows.Management.MdmAlertMark is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.MdmAlertMark;
   begin
      Hr := this.m_IMdmAlert.all.get_Mark (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mark
   (
      this : in out MdmAlert;
      value : Windows.Management.MdmAlertMark
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMdmAlert.all.put_Mark (value);
   end;

   function get_Source
   (
      this : in out MdmAlert
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMdmAlert.all.get_Source (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Source
   (
      this : in out MdmAlert;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMdmAlert.all.put_Source (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Status
   (
      this : in out MdmAlert
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMdmAlert.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Target
   (
      this : in out MdmAlert
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMdmAlert.all.get_Target (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Target
   (
      this : in out MdmAlert;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMdmAlert.all.put_Target (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Type
   (
      this : in out MdmAlert
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMdmAlert.all.get_Type (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Type
   (
      this : in out MdmAlert;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMdmAlert.all.put_Type (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MdmSession

   procedure Initialize (this : in out MdmSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out MdmSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMdmSession, IMdmSession_Ptr);
   begin
      if this.m_IMdmSession /= null then
         if this.m_IMdmSession.all /= null then
            RefCount := this.m_IMdmSession.all.Release;
            Free (this.m_IMdmSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MdmSession

   function get_Alerts
   (
      this : in out MdmSession
   )
   return IVectorView_IMdmAlert.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMdmAlert.Kind;
   begin
      Hr := this.m_IMdmSession.all.get_Alerts (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMdmAlert (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ExtendedError
   (
      this : in out MdmSession
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMdmSession.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Id
   (
      this : in out MdmSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMdmSession.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_State
   (
      this : in out MdmSession
   )
   return WinRt.Windows.Management.MdmSessionState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.MdmSessionState;
   begin
      Hr := this.m_IMdmSession.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure AttachAsync
   (
      this : in out MdmSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMdmSession.all.AttachAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Delete
   (
      this : in out MdmSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMdmSession.all.Delete;
   end;

   procedure StartAsync
   (
      this : in out MdmSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMdmSession.all.StartAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure StartAsync
   (
      this : in out MdmSession;
      alerts : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMdmSession.all.StartAsync (alerts, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MdmSessionManager is

      function get_SessionIds
      return WinRt.GenericObject is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.MdmSessionManager");
         m_Factory        : access WinRt.Windows.Management.IMdmSessionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased GenericObject;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMdmSessionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SessionIds (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function TryCreateSession
      return WinRt.Windows.Management.MdmSession is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.MdmSessionManager");
         m_Factory        : access WinRt.Windows.Management.IMdmSessionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Management.IMdmSession;
      begin
         return RetVal : WinRt.Windows.Management.MdmSession do
            Hr := RoGetActivationFactory (m_hString, IID_IMdmSessionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.TryCreateSession (m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IMdmSession := new Windows.Management.IMdmSession;
               Retval.m_IMdmSession.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
         end return;
      end;

      procedure DeleteSessionById
      (
         sessionId : WinRt.WString
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.MdmSessionManager");
         m_Factory        : access WinRt.Windows.Management.IMdmSessionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         HStr_sessionId : WinRt.HString := To_HString (sessionId);
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMdmSessionManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.DeleteSessionById (HStr_sessionId);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_sessionId);
      end;

      function GetSessionById
      (
         sessionId : WinRt.WString
      )
      return WinRt.Windows.Management.MdmSession is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Management.MdmSessionManager");
         m_Factory        : access WinRt.Windows.Management.IMdmSessionManagerStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Management.IMdmSession;
         HStr_sessionId : WinRt.HString := To_HString (sessionId);
      begin
         return RetVal : WinRt.Windows.Management.MdmSession do
            Hr := RoGetActivationFactory (m_hString, IID_IMdmSessionManagerStatics'Access , m_Factory'Address);
            if Hr = S_OK then
               Hr := m_Factory.GetSessionById (HStr_sessionId, m_ComRetVal'Access);
               m_RefCount := m_Factory.Release;
               Retval.m_IMdmSession := new Windows.Management.IMdmSession;
               Retval.m_IMdmSession.all := m_ComRetVal;
            end if;
            Hr := WindowsDeleteString (m_hString);
            Hr := WindowsDeleteString (HStr_sessionId);
         end return;
      end;

   end MdmSessionManager;

end;

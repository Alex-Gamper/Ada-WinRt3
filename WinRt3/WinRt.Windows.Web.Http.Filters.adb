--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.Security.Cryptography.Certificates;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Web.Http.Filters is

   package IAsyncOperation_HttpResponseMessage is new WinRt.Windows.Foundation.IAsyncOperationWithProgress (WinRt.Windows.Web.Http.IHttpResponseMessage, GenericObject);
   package AsyncOperationCompletedHandler_HttpResponseMessage is new WinRt.Windows.Foundation.AsyncOperationWithProgressCompletedHandler (WinRt.Windows.Web.Http.IHttpResponseMessage, GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpBaseProtocolFilter

   procedure Initialize (this : in out HttpBaseProtocolFilter) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpBaseProtocolFilter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpBaseProtocolFilter, IHttpBaseProtocolFilter_Ptr);
   begin
      if this.m_IHttpBaseProtocolFilter /= null then
         if this.m_IHttpBaseProtocolFilter.all /= null then
            RefCount := this.m_IHttpBaseProtocolFilter.all.Release;
            Free (this.m_IHttpBaseProtocolFilter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for HttpBaseProtocolFilter

   function Constructor return HttpBaseProtocolFilter is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Web.Http.Filters.HttpBaseProtocolFilter");
      m_ComRetVal  : aliased Windows.Web.Http.Filters.IHttpBaseProtocolFilter;
   begin
      return RetVal : HttpBaseProtocolFilter do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IHttpBaseProtocolFilter := new Windows.Web.Http.Filters.IHttpBaseProtocolFilter;
            Retval.m_IHttpBaseProtocolFilter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HttpBaseProtocolFilter

   function CreateForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.Web.Http.Filters.HttpBaseProtocolFilter is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Web.Http.Filters.HttpBaseProtocolFilter");
      m_Factory        : access WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilterStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Filters.IHttpBaseProtocolFilter;
   begin
      return RetVal : WinRt.Windows.Web.Http.Filters.HttpBaseProtocolFilter do
         Hr := RoGetActivationFactory (m_hString, IID_IHttpBaseProtocolFilterStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IHttpBaseProtocolFilter := new Windows.Web.Http.Filters.IHttpBaseProtocolFilter;
            Retval.m_IHttpBaseProtocolFilter.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpBaseProtocolFilter

   function get_AllowAutoRedirect
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_AllowAutoRedirect (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowAutoRedirect
   (
      this : in out HttpBaseProtocolFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_AllowAutoRedirect (value);
   end;

   function get_AllowUI
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_AllowUI (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowUI
   (
      this : in out HttpBaseProtocolFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_AllowUI (value);
   end;

   function get_AutomaticDecompression
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_AutomaticDecompression (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutomaticDecompression
   (
      this : in out HttpBaseProtocolFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_AutomaticDecompression (value);
   end;

   function get_CacheControl
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Web.Http.Filters.HttpCacheControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Filters.IHttpCacheControl;
   begin
      return RetVal : WinRt.Windows.Web.Http.Filters.HttpCacheControl do
         Hr := this.m_IHttpBaseProtocolFilter.all.get_CacheControl (m_ComRetVal'Access);
         Retval.m_IHttpCacheControl := new Windows.Web.Http.Filters.IHttpCacheControl;
         Retval.m_IHttpCacheControl.all := m_ComRetVal;
      end return;
   end;

   function get_CookieManager
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Web.Http.HttpCookieManager'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpCookieManager;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpCookieManager do
         Hr := this.m_IHttpBaseProtocolFilter.all.get_CookieManager (m_ComRetVal'Access);
         Retval.m_IHttpCookieManager := new Windows.Web.Http.IHttpCookieManager;
         Retval.m_IHttpCookieManager.all := m_ComRetVal;
      end return;
   end;

   function get_ClientCertificate
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IHttpBaseProtocolFilter.all.get_ClientCertificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   procedure put_ClientCertificate
   (
      this : in out HttpBaseProtocolFilter;
      value : Windows.Security.Cryptography.Certificates.Certificate'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_ClientCertificate (value.m_ICertificate.all);
   end;

   function get_IgnorableServerCertificateErrors
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_IgnorableServerCertificateErrors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxConnectionsPerServer
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_MaxConnectionsPerServer (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxConnectionsPerServer
   (
      this : in out HttpBaseProtocolFilter;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_MaxConnectionsPerServer (value);
   end;

   function get_ProxyCredential
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IHttpBaseProtocolFilter.all.get_ProxyCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ProxyCredential
   (
      this : in out HttpBaseProtocolFilter;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_ProxyCredential (value.m_IPasswordCredential.all);
   end;

   function get_ServerCredential
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Security.Credentials.PasswordCredential'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Credentials.IPasswordCredential;
   begin
      return RetVal : WinRt.Windows.Security.Credentials.PasswordCredential do
         Hr := this.m_IHttpBaseProtocolFilter.all.get_ServerCredential (m_ComRetVal'Access);
         Retval.m_IPasswordCredential := new Windows.Security.Credentials.IPasswordCredential;
         Retval.m_IPasswordCredential.all := m_ComRetVal;
      end return;
   end;

   procedure put_ServerCredential
   (
      this : in out HttpBaseProtocolFilter;
      value : Windows.Security.Credentials.PasswordCredential'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_ServerCredential (value.m_IPasswordCredential.all);
   end;

   function get_UseProxy
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.get_UseProxy (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_UseProxy
   (
      this : in out HttpBaseProtocolFilter;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpBaseProtocolFilter.all.put_UseProxy (value);
   end;

   function get_MaxVersion
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Web.Http.HttpVersion is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.HttpVersion;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter2, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.get_MaxVersion (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_MaxVersion
   (
      this : in out HttpBaseProtocolFilter;
      value : Windows.Web.Http.HttpVersion
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter2, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.put_MaxVersion (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CookieUsageBehavior
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.Web.Http.Filters.HttpCookieUsageBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Filters.HttpCookieUsageBehavior;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter3, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.get_CookieUsageBehavior (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CookieUsageBehavior
   (
      this : in out HttpBaseProtocolFilter;
      value : Windows.Web.Http.Filters.HttpCookieUsageBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter3, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.put_CookieUsageBehavior (value);
      m_RefCount := m_Interface.Release;
   end;

   function add_ServerCustomValidationRequested
   (
      this : in out HttpBaseProtocolFilter;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.add_ServerCustomValidationRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_ServerCustomValidationRequested
   (
      this : in out HttpBaseProtocolFilter;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.remove_ServerCustomValidationRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   procedure ClearAuthenticationCache
   (
      this : in out HttpBaseProtocolFilter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter4, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.ClearAuthenticationCache;
      m_RefCount := m_Interface.Release;
   end;

   function get_User
   (
      this : in out HttpBaseProtocolFilter
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter5, WinRt.Windows.Web.Http.Filters.IID_IHttpBaseProtocolFilter5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function SendRequestAsync
   (
      this : in out HttpBaseProtocolFilter;
      request : Windows.Web.Http.HttpRequestMessage'Class
   )
   return WinRt.Windows.Web.Http.HttpResponseMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Web.Http.Filters.IHttpFilter := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HttpResponseMessage.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HttpResponseMessage.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Web.Http.IHttpResponseMessage;
      m_IID            : aliased WinRt.IID := (1561609060, 30679, 24266, (139, 9, 147, 106, 105, 68, 102, 82 )); -- Windows.Web.Http.HttpResponseMessage;
      m_HandlerIID     : aliased WinRt.IID := (3199055218, 63907, 24211, (182, 202, 227, 17, 182, 89, 51, 252 ));
      m_Handler        : AsyncOperationCompletedHandler_HttpResponseMessage.Kind := new AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HttpResponseMessage.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HttpResponseMessage.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HttpResponseMessage.Kind_Delegate, AsyncOperationCompletedHandler_HttpResponseMessage.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Web.Http.Filters.IHttpFilter, WinRt.Windows.Web.Http.Filters.IID_IHttpFilter'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpResponseMessage do
         m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
         Hr := m_Interface.SendRequestAsync (request.m_IHttpRequestMessage.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHttpResponseMessage := new Windows.Web.Http.IHttpResponseMessage;
                  Retval.m_IHttpResponseMessage.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out HttpBaseProtocolFilter
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Web.Http.Filters.IHttpBaseProtocolFilter_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHttpBaseProtocolFilter.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpCacheControl

   procedure Initialize (this : in out HttpCacheControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpCacheControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpCacheControl, IHttpCacheControl_Ptr);
   begin
      if this.m_IHttpCacheControl /= null then
         if this.m_IHttpCacheControl.all /= null then
            RefCount := this.m_IHttpCacheControl.all.Release;
            Free (this.m_IHttpCacheControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpCacheControl

   function get_ReadBehavior
   (
      this : in out HttpCacheControl
   )
   return WinRt.Windows.Web.Http.Filters.HttpCacheReadBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Filters.HttpCacheReadBehavior;
   begin
      Hr := this.m_IHttpCacheControl.all.get_ReadBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ReadBehavior
   (
      this : in out HttpCacheControl;
      value : Windows.Web.Http.Filters.HttpCacheReadBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheControl.all.put_ReadBehavior (value);
   end;

   function get_WriteBehavior
   (
      this : in out HttpCacheControl
   )
   return WinRt.Windows.Web.Http.Filters.HttpCacheWriteBehavior is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.Filters.HttpCacheWriteBehavior;
   begin
      Hr := this.m_IHttpCacheControl.all.get_WriteBehavior (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_WriteBehavior
   (
      this : in out HttpCacheControl;
      value : Windows.Web.Http.Filters.HttpCacheWriteBehavior
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpCacheControl.all.put_WriteBehavior (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HttpServerCustomValidationRequestedEventArgs

   procedure Initialize (this : in out HttpServerCustomValidationRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HttpServerCustomValidationRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHttpServerCustomValidationRequestedEventArgs, IHttpServerCustomValidationRequestedEventArgs_Ptr);
   begin
      if this.m_IHttpServerCustomValidationRequestedEventArgs /= null then
         if this.m_IHttpServerCustomValidationRequestedEventArgs.all /= null then
            RefCount := this.m_IHttpServerCustomValidationRequestedEventArgs.all.Release;
            Free (this.m_IHttpServerCustomValidationRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HttpServerCustomValidationRequestedEventArgs

   function get_RequestMessage
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Web.Http.HttpRequestMessage'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Web.Http.IHttpRequestMessage;
   begin
      return RetVal : WinRt.Windows.Web.Http.HttpRequestMessage do
         Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.get_RequestMessage (m_ComRetVal'Access);
         Retval.m_IHttpRequestMessage := new Windows.Web.Http.IHttpRequestMessage;
         Retval.m_IHttpRequestMessage.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificate
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Security.Cryptography.Certificates.Certificate'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Security.Cryptography.Certificates.ICertificate;
   begin
      return RetVal : WinRt.Windows.Security.Cryptography.Certificates.Certificate do
         Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.get_ServerCertificate (m_ComRetVal'Access);
         Retval.m_ICertificate := new Windows.Security.Cryptography.Certificates.ICertificate;
         Retval.m_ICertificate.all := m_ComRetVal;
      end return;
   end;

   function get_ServerCertificateErrorSeverity
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Networking.Sockets.SocketSslErrorSeverity is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.SocketSslErrorSeverity;
   begin
      Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.get_ServerCertificateErrorSeverity (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerCertificateErrors
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.get_ServerCertificateErrors (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServerIntermediateCertificates
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.get_ServerIntermediateCertificates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Reject
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.Reject;
   end;

   function GetDeferral
   (
      this : in out HttpServerCustomValidationRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IHttpServerCustomValidationRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Enumeration;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.WiFiDirect.Services is

   package IAsyncOperation_WiFiDirectServiceProvisioningInfo is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo);
   package AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo);

   package IAsyncOperation_WiFiDirectServiceSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession);
   package AsyncOperationCompletedHandler_WiFiDirectServiceSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession);

   package IAsyncOperation_WiFiDirectService is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectService);
   package AsyncOperationCompletedHandler_WiFiDirectService is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectService);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectService

   procedure Initialize (this : in out WiFiDirectService) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectService) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectService, IWiFiDirectService_Ptr);
   begin
      if this.m_IWiFiDirectService /= null then
         if this.m_IWiFiDirectService.all /= null then
            RefCount := this.m_IWiFiDirectService.all.Release;
            Free (this.m_IWiFiDirectService);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for WiFiDirectService

   function GetSelector
   (
      serviceName : WinRt.WString
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.Services.WiFiDirectService");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetSelector (HStr_serviceName, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_serviceName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetSelector
   (
      serviceName : WinRt.WString;
      serviceInfoFilter : Windows.Storage.Streams.IBuffer
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.Services.WiFiDirectService");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectServiceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetSelector (HStr_serviceName, serviceInfoFilter, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_serviceName);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectService is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.Services.WiFiDirectService");
      m_Factory        : access WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectService.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectService.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectService;
      m_IID            : aliased WinRt.IID := (3304729320, 20471, 23200, (175, 151, 237, 133, 234, 102, 249, 174 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectService;
      m_HandlerIID     : aliased WinRt.IID := (4110787528, 18487, 24078, (138, 77, 30, 42, 245, 71, 126, 92 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectService.Kind := new AsyncOperationCompletedHandler_WiFiDirectService.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectService.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectService.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectService.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectService.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectService do
         Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectServiceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IWiFiDirectService := new Windows.Devices.WiFiDirect.Services.IWiFiDirectService;
                     Retval.m_IWiFiDirectService.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectService

   function get_RemoteServiceInfo
   (
      this : in out WiFiDirectService
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectService.all.get_RemoteServiceInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SupportedConfigurationMethods
   (
      this : in out WiFiDirectService
   )
   return IVectorView_WiFiDirectServiceConfigurationMethod.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_WiFiDirectServiceConfigurationMethod.Kind;
   begin
      Hr := this.m_IWiFiDirectService.all.get_SupportedConfigurationMethods (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_WiFiDirectServiceConfigurationMethod (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PreferGroupOwnerMode
   (
      this : in out WiFiDirectService
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectService.all.get_PreferGroupOwnerMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PreferGroupOwnerMode
   (
      this : in out WiFiDirectService;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectService.all.put_PreferGroupOwnerMode (value);
   end;

   function get_SessionInfo
   (
      this : in out WiFiDirectService
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectService.all.get_SessionInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SessionInfo
   (
      this : in out WiFiDirectService;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectService.all.put_SessionInfo (value);
   end;

   function get_ServiceError
   (
      this : in out WiFiDirectService
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceError;
   begin
      Hr := this.m_IWiFiDirectService.all.get_ServiceError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SessionDeferred
   (
      this : in out WiFiDirectService;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectService.all.add_SessionDeferred (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SessionDeferred
   (
      this : in out WiFiDirectService;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectService.all.remove_SessionDeferred (token);
   end;

   function GetProvisioningInfoAsync
   (
      this : in out WiFiDirectService;
      selectedConfigurationMethod : Windows.Devices.WiFiDirect.Services.WiFiDirectServiceConfigurationMethod
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceProvisioningInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectServiceProvisioningInfo.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectServiceProvisioningInfo.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo;
      m_IID            : aliased WinRt.IID := (3623505348, 18224, 20590, (191, 240, 128, 30, 180, 168, 49, 168 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectServiceProvisioningInfo;
      m_HandlerIID     : aliased WinRt.IID := (2496370024, 1034, 20870, (163, 201, 82, 104, 14, 225, 121, 132 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo.Kind := new AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectServiceProvisioningInfo.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectServiceProvisioningInfo.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceProvisioningInfo do
         Hr := this.m_IWiFiDirectService.all.GetProvisioningInfoAsync (selectedConfigurationMethod, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiDirectServiceProvisioningInfo := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo;
                  Retval.m_IWiFiDirectServiceProvisioningInfo.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiDirectService
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectServiceSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectServiceSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
      m_IID            : aliased WinRt.IID := (3269086871, 29323, 21505, (169, 217, 58, 1, 133, 69, 10, 242 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession;
      m_HandlerIID     : aliased WinRt.IID := (2996692753, 24760, 23002, (143, 77, 252, 121, 216, 204, 212, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind := new AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectServiceSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession do
         Hr := this.m_IWiFiDirectService.all.ConnectAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiDirectServiceSession := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
                  Retval.m_IWiFiDirectServiceSession.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiDirectService;
      pin : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pin : WinRt.HString := To_HString (pin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectServiceSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectServiceSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
      m_IID            : aliased WinRt.IID := (3269086871, 29323, 21505, (169, 217, 58, 1, 133, 69, 10, 242 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession;
      m_HandlerIID     : aliased WinRt.IID := (2996692753, 24760, 23002, (143, 77, 252, 121, 216, 204, 212, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind := new AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectServiceSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession do
         Hr := this.m_IWiFiDirectService.all.ConnectAsync (HStr_pin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiDirectServiceSession := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
                  Retval.m_IWiFiDirectServiceSession.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_pin);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceAdvertiser

   procedure Initialize (this : in out WiFiDirectServiceAdvertiser) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceAdvertiser) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceAdvertiser, IWiFiDirectServiceAdvertiser_Ptr);
   begin
      if this.m_IWiFiDirectServiceAdvertiser /= null then
         if this.m_IWiFiDirectServiceAdvertiser.all /= null then
            RefCount := this.m_IWiFiDirectServiceAdvertiser.all.Release;
            Free (this.m_IWiFiDirectServiceAdvertiser);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for WiFiDirectServiceAdvertiser

   function Constructor
   (
      serviceName : WinRt.WString
   )
   return WiFiDirectServiceAdvertiser is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser");
      m_Factory    : access IWiFiDirectServiceAdvertiserFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceAdvertiser;
      HStr_serviceName : WinRt.HString := To_HString (serviceName);
   begin
      return RetVal : WiFiDirectServiceAdvertiser do
         Hr := RoGetActivationFactory (m_hString, IID_IWiFiDirectServiceAdvertiserFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWiFiDirectServiceAdvertiser (HStr_serviceName, m_ComRetVal'Access);
            Retval.m_IWiFiDirectServiceAdvertiser := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceAdvertiser;
            Retval.m_IWiFiDirectServiceAdvertiser.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_serviceName);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceAdvertiser

   function get_ServiceName
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_ServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ServiceNamePrefixes
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_ServiceNamePrefixes (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServiceInfo
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_ServiceInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServiceInfo
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_ServiceInfo (value);
   end;

   function get_AutoAcceptSession
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_AutoAcceptSession (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoAcceptSession
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_AutoAcceptSession (value);
   end;

   function get_PreferGroupOwnerMode
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_PreferGroupOwnerMode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_PreferGroupOwnerMode
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_PreferGroupOwnerMode (value);
   end;

   function get_PreferredConfigurationMethods
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return IVector_WiFiDirectServiceConfigurationMethod.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_WiFiDirectServiceConfigurationMethod.Kind;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_PreferredConfigurationMethods (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_WiFiDirectServiceConfigurationMethod (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ServiceStatus
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceStatus;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_ServiceStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServiceStatus
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : Windows.Devices.WiFiDirect.Services.WiFiDirectServiceStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_ServiceStatus (value);
   end;

   function get_CustomServiceStatusCode
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_CustomServiceStatusCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_CustomServiceStatusCode
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_CustomServiceStatusCode (value);
   end;

   function get_DeferredSessionInfo
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_DeferredSessionInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_DeferredSessionInfo
   (
      this : in out WiFiDirectServiceAdvertiser;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.put_DeferredSessionInfo (value);
   end;

   function get_AdvertisementStatus
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertisementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertisementStatus;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_AdvertisementStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceError
   (
      this : in out WiFiDirectServiceAdvertiser
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceError;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.get_ServiceError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SessionRequested
   (
      this : in out WiFiDirectServiceAdvertiser;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.add_SessionRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SessionRequested
   (
      this : in out WiFiDirectServiceAdvertiser;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.remove_SessionRequested (token);
   end;

   function add_AutoAcceptSessionConnected
   (
      this : in out WiFiDirectServiceAdvertiser;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.add_AutoAcceptSessionConnected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AutoAcceptSessionConnected
   (
      this : in out WiFiDirectServiceAdvertiser;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.remove_AutoAcceptSessionConnected (token);
   end;

   function add_AdvertisementStatusChanged
   (
      this : in out WiFiDirectServiceAdvertiser;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.add_AdvertisementStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AdvertisementStatusChanged
   (
      this : in out WiFiDirectServiceAdvertiser;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.remove_AdvertisementStatusChanged (token);
   end;

   function ConnectAsync
   (
      this : in out WiFiDirectServiceAdvertiser;
      deviceInfo : Windows.Devices.Enumeration.DeviceInformation'Class
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectServiceSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectServiceSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
      m_IID            : aliased WinRt.IID := (3269086871, 29323, 21505, (169, 217, 58, 1, 133, 69, 10, 242 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession;
      m_HandlerIID     : aliased WinRt.IID := (2996692753, 24760, 23002, (143, 77, 252, 121, 216, 204, 212, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind := new AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectServiceSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession do
         Hr := this.m_IWiFiDirectServiceAdvertiser.all.ConnectAsync (deviceInfo.m_IDeviceInformation.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiDirectServiceSession := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
                  Retval.m_IWiFiDirectServiceSession.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function ConnectAsync
   (
      this : in out WiFiDirectServiceAdvertiser;
      deviceInfo : Windows.Devices.Enumeration.DeviceInformation'Class;
      pin : WinRt.WString
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_pin : WinRt.HString := To_HString (pin);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_WiFiDirectServiceSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_WiFiDirectServiceSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
      m_IID            : aliased WinRt.IID := (3269086871, 29323, 21505, (169, 217, 58, 1, 133, 69, 10, 242 )); -- Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession;
      m_HandlerIID     : aliased WinRt.IID := (2996692753, 24760, 23002, (143, 77, 252, 121, 216, 204, 212, 34 ));
      m_Handler        : AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind := new AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_WiFiDirectServiceSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind_Delegate, AsyncOperationCompletedHandler_WiFiDirectServiceSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession do
         Hr := this.m_IWiFiDirectServiceAdvertiser.all.ConnectAsync (deviceInfo.m_IDeviceInformation.all, HStr_pin, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IWiFiDirectServiceSession := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
                  Retval.m_IWiFiDirectServiceSession.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_pin);
      end return;
   end;

   procedure Start
   (
      this : in out WiFiDirectServiceAdvertiser
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.Start;
   end;

   procedure Stop
   (
      this : in out WiFiDirectServiceAdvertiser
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceAdvertiser.all.Stop;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceAutoAcceptSessionConnectedEventArgs

   procedure Initialize (this : in out WiFiDirectServiceAutoAcceptSessionConnectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceAutoAcceptSessionConnectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs, IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs /= null then
         if this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs.all.Release;
            Free (this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceAutoAcceptSessionConnectedEventArgs

   function get_Session
   (
      this : in out WiFiDirectServiceAutoAcceptSessionConnectedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSession do
         Hr := this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs.all.get_Session (m_ComRetVal'Access);
         Retval.m_IWiFiDirectServiceSession := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession;
         Retval.m_IWiFiDirectServiceSession.all := m_ComRetVal;
      end return;
   end;

   function get_SessionInfo
   (
      this : in out WiFiDirectServiceAutoAcceptSessionConnectedEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs.all.get_SessionInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceProvisioningInfo

   procedure Initialize (this : in out WiFiDirectServiceProvisioningInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceProvisioningInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceProvisioningInfo, IWiFiDirectServiceProvisioningInfo_Ptr);
   begin
      if this.m_IWiFiDirectServiceProvisioningInfo /= null then
         if this.m_IWiFiDirectServiceProvisioningInfo.all /= null then
            RefCount := this.m_IWiFiDirectServiceProvisioningInfo.all.Release;
            Free (this.m_IWiFiDirectServiceProvisioningInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceProvisioningInfo

   function get_SelectedConfigurationMethod
   (
      this : in out WiFiDirectServiceProvisioningInfo
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceConfigurationMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceConfigurationMethod;
   begin
      Hr := this.m_IWiFiDirectServiceProvisioningInfo.all.get_SelectedConfigurationMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGroupFormationNeeded
   (
      this : in out WiFiDirectServiceProvisioningInfo
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IWiFiDirectServiceProvisioningInfo.all.get_IsGroupFormationNeeded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceRemotePortAddedEventArgs

   procedure Initialize (this : in out WiFiDirectServiceRemotePortAddedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceRemotePortAddedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceRemotePortAddedEventArgs, IWiFiDirectServiceRemotePortAddedEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectServiceRemotePortAddedEventArgs /= null then
         if this.m_IWiFiDirectServiceRemotePortAddedEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectServiceRemotePortAddedEventArgs.all.Release;
            Free (this.m_IWiFiDirectServiceRemotePortAddedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceRemotePortAddedEventArgs

   function get_EndpointPairs
   (
      this : in out WiFiDirectServiceRemotePortAddedEventArgs
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWiFiDirectServiceRemotePortAddedEventArgs.all.get_EndpointPairs (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Protocol
   (
      this : in out WiFiDirectServiceRemotePortAddedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceIPProtocol is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceIPProtocol;
   begin
      Hr := this.m_IWiFiDirectServiceRemotePortAddedEventArgs.all.get_Protocol (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceSession

   procedure Initialize (this : in out WiFiDirectServiceSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceSession, IWiFiDirectServiceSession_Ptr);
   begin
      if this.m_IWiFiDirectServiceSession /= null then
         if this.m_IWiFiDirectServiceSession.all /= null then
            RefCount := this.m_IWiFiDirectServiceSession.all.Release;
            Free (this.m_IWiFiDirectServiceSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceSession

   function get_ServiceName
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_ServiceName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Status
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionStatus;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorStatus
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionErrorStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionErrorStatus;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_ErrorStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SessionId
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_SessionId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AdvertisementId
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_AdvertisementId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ServiceAddress
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_ServiceAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SessionAddress
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.get_SessionAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetConnectionEndpointPairs
   (
      this : in out WiFiDirectServiceSession
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.GetConnectionEndpointPairs (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_SessionStatusChanged
   (
      this : in out WiFiDirectServiceSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.add_SessionStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SessionStatusChanged
   (
      this : in out WiFiDirectServiceSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.remove_SessionStatusChanged (token);
   end;

   procedure AddStreamSocketListenerAsync
   (
      this : in out WiFiDirectServiceSession;
      value : Windows.Networking.Sockets.StreamSocketListener'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWiFiDirectServiceSession.all.AddStreamSocketListenerAsync (value.m_IStreamSocketListener.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure AddDatagramSocketAsync
   (
      this : in out WiFiDirectServiceSession;
      value : Windows.Networking.Sockets.DatagramSocket'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IWiFiDirectServiceSession.all.AddDatagramSocketAsync (value.m_IDatagramSocket.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function add_RemotePortAdded
   (
      this : in out WiFiDirectServiceSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.add_RemotePortAdded (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RemotePortAdded
   (
      this : in out WiFiDirectServiceSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IWiFiDirectServiceSession.all.remove_RemotePortAdded (token);
   end;

   procedure Close
   (
      this : in out WiFiDirectServiceSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectServiceSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceSessionDeferredEventArgs

   procedure Initialize (this : in out WiFiDirectServiceSessionDeferredEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceSessionDeferredEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceSessionDeferredEventArgs, IWiFiDirectServiceSessionDeferredEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectServiceSessionDeferredEventArgs /= null then
         if this.m_IWiFiDirectServiceSessionDeferredEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectServiceSessionDeferredEventArgs.all.Release;
            Free (this.m_IWiFiDirectServiceSessionDeferredEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceSessionDeferredEventArgs

   function get_DeferredSessionInfo
   (
      this : in out WiFiDirectServiceSessionDeferredEventArgs
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectServiceSessionDeferredEventArgs.all.get_DeferredSessionInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceSessionRequest

   procedure Initialize (this : in out WiFiDirectServiceSessionRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceSessionRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceSessionRequest, IWiFiDirectServiceSessionRequest_Ptr);
   begin
      if this.m_IWiFiDirectServiceSessionRequest /= null then
         if this.m_IWiFiDirectServiceSessionRequest.all /= null then
            RefCount := this.m_IWiFiDirectServiceSessionRequest.all.Release;
            Free (this.m_IWiFiDirectServiceSessionRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceSessionRequest

   function get_DeviceInformation
   (
      this : in out WiFiDirectServiceSessionRequest
   )
   return WinRt.Windows.Devices.Enumeration.DeviceInformation'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Enumeration.IDeviceInformation;
   begin
      return RetVal : WinRt.Windows.Devices.Enumeration.DeviceInformation do
         Hr := this.m_IWiFiDirectServiceSessionRequest.all.get_DeviceInformation (m_ComRetVal'Access);
         Retval.m_IDeviceInformation := new Windows.Devices.Enumeration.IDeviceInformation;
         Retval.m_IDeviceInformation.all := m_ComRetVal;
      end return;
   end;

   function get_ProvisioningInfo
   (
      this : in out WiFiDirectServiceSessionRequest
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceProvisioningInfo'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceProvisioningInfo do
         Hr := this.m_IWiFiDirectServiceSessionRequest.all.get_ProvisioningInfo (m_ComRetVal'Access);
         Retval.m_IWiFiDirectServiceProvisioningInfo := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceProvisioningInfo;
         Retval.m_IWiFiDirectServiceProvisioningInfo.all := m_ComRetVal;
      end return;
   end;

   function get_SessionInfo
   (
      this : in out WiFiDirectServiceSessionRequest
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IWiFiDirectServiceSessionRequest.all.get_SessionInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure Close
   (
      this : in out WiFiDirectServiceSessionRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSessionRequest_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IWiFiDirectServiceSessionRequest.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for WiFiDirectServiceSessionRequestedEventArgs

   procedure Initialize (this : in out WiFiDirectServiceSessionRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out WiFiDirectServiceSessionRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IWiFiDirectServiceSessionRequestedEventArgs, IWiFiDirectServiceSessionRequestedEventArgs_Ptr);
   begin
      if this.m_IWiFiDirectServiceSessionRequestedEventArgs /= null then
         if this.m_IWiFiDirectServiceSessionRequestedEventArgs.all /= null then
            RefCount := this.m_IWiFiDirectServiceSessionRequestedEventArgs.all.Release;
            Free (this.m_IWiFiDirectServiceSessionRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for WiFiDirectServiceSessionRequestedEventArgs

   function GetSessionRequest
   (
      this : in out WiFiDirectServiceSessionRequestedEventArgs
   )
   return WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSessionRequest;
   begin
      return RetVal : WinRt.Windows.Devices.WiFiDirect.Services.WiFiDirectServiceSessionRequest do
         Hr := this.m_IWiFiDirectServiceSessionRequestedEventArgs.all.GetSessionRequest (m_ComRetVal'Access);
         Retval.m_IWiFiDirectServiceSessionRequest := new Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSessionRequest;
         Retval.m_IWiFiDirectServiceSessionRequest.all := m_ComRetVal;
      end return;
   end;

end;

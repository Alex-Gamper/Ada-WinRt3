--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation;
limited with WinRt.Windows.Storage.Streams;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Storage.Compression is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type ICompressor_Interface is interface and WinRt.IInspectable_Interface;
   type ICompressor is access ICompressor_Interface'Class;
   type ICompressor_Ptr is access all ICompressor;

   type ICompressorFactory_Interface is interface and WinRt.IInspectable_Interface;
   type ICompressorFactory is access ICompressorFactory_Interface'Class;

   type IDecompressor_Interface is interface and WinRt.IInspectable_Interface;
   type IDecompressor is access IDecompressor_Interface'Class;
   type IDecompressor_Ptr is access all IDecompressor;

   type IDecompressorFactory_Interface is interface and WinRt.IInspectable_Interface;
   type IDecompressorFactory is access IDecompressorFactory_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type Compressor is new Ada.Finalization.Limited_Controlled with
      record
         m_ICompressor : access Windows.Storage.Compression.ICompressor;
      end record;
   type Compressor_Ptr is access all Compressor;

   type Decompressor is new Ada.Finalization.Limited_Controlled with
      record
         m_IDecompressor : access Windows.Storage.Compression.IDecompressor;
      end record;
   type Decompressor_Ptr is access all Decompressor;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type CompressAlgorithm is (
      InvalidAlgorithm_e,
      NullAlgorithm_e,
      Mszip_e,
      Xpress_e,
      XpressHuff_e,
      Lzms_e
   );
   for CompressAlgorithm use (
      InvalidAlgorithm_e => 0,
      NullAlgorithm_e => 1,
      Mszip_e => 2,
      Xpress_e => 3,
      XpressHuff_e => 4,
      Lzms_e => 5
   );
   type CompressAlgorithm_Ptr is access all CompressAlgorithm;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type ICompressor is interface and WinRt.IInspectable;

      function FinishAsync
      (
         this : access ICompressor_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      function DetachStream
      (
         this : access ICompressor_Interface;
         RetVal : access Windows.Storage.Streams.IOutputStream
      )
      return WinRt.Hresult is abstract;

      IID_ICompressor : aliased WinRt.IID := (180577370, 22444, 20193, (183, 2, 132, 211, 157, 84, 36, 224 ));

   -----------------------------------------------------------------------------
   -- type ICompressorFactory is interface and WinRt.IInspectable;

      function CreateCompressor
      (
         this : access ICompressorFactory_Interface;
         underlyingStream : Windows.Storage.Streams.IOutputStream;
         RetVal : access Windows.Storage.Compression.ICompressor
      )
      return WinRt.Hresult is abstract;

      function CreateCompressorEx
      (
         this : access ICompressorFactory_Interface;
         underlyingStream : Windows.Storage.Streams.IOutputStream;
         algorithm : Windows.Storage.Compression.CompressAlgorithm;
         blockSize : WinRt.UInt32;
         RetVal : access Windows.Storage.Compression.ICompressor
      )
      return WinRt.Hresult is abstract;

      IID_ICompressorFactory : aliased WinRt.IID := (1597871780, 11515, 17452, (168, 186, 215, 209, 27, 3, 157, 160 ));

   -----------------------------------------------------------------------------
   -- type IDecompressor is interface and WinRt.IInspectable;

      function DetachStream
      (
         this : access IDecompressor_Interface;
         RetVal : access Windows.Storage.Streams.IInputStream
      )
      return WinRt.Hresult is abstract;

      IID_IDecompressor : aliased WinRt.IID := (3095658054, 54922, 19595, (173, 160, 78, 232, 19, 252, 82, 131 ));

   -----------------------------------------------------------------------------
   -- type IDecompressorFactory is interface and WinRt.IInspectable;

      function CreateDecompressor
      (
         this : access IDecompressorFactory_Interface;
         underlyingStream : Windows.Storage.Streams.IInputStream;
         RetVal : access Windows.Storage.Compression.IDecompressor
      )
      return WinRt.Hresult is abstract;

      IID_IDecompressorFactory : aliased WinRt.IID := (1396171346, 7586, 17121, (136, 52, 3, 121, 210, 141, 116, 47 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Compressor

   overriding procedure Initialize (this : in out Compressor);
   overriding procedure Finalize (this : in out Compressor);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Compressor

   function Constructor
   (
      underlyingStream : Windows.Storage.Streams.IOutputStream
   )
   return Compressor;

   function Constructor
   (
      underlyingStream : Windows.Storage.Streams.IOutputStream;
      algorithm : Windows.Storage.Compression.CompressAlgorithm;
      blockSize : WinRt.UInt32
   )
   return Compressor;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Compressor

   function FinishAsync
   (
      this : in out Compressor
   )
   return WinRt.Boolean;

   function DetachStream
   (
      this : in out Compressor
   )
   return WinRt.Windows.Storage.Streams.IOutputStream;

   function WriteAsync
   (
      this : in out Compressor;
      buffer : Windows.Storage.Streams.IBuffer
   )
   return WinRt.UInt32;

   function FlushAsync
   (
      this : in out Compressor
   )
   return WinRt.Boolean;

   procedure Close
   (
      this : in out Compressor
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for Decompressor

   overriding procedure Initialize (this : in out Decompressor);
   overriding procedure Finalize (this : in out Decompressor);

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for Decompressor

   function Constructor
   (
      underlyingStream : Windows.Storage.Streams.IInputStream
   )
   return Decompressor;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for Decompressor

   function DetachStream
   (
      this : in out Decompressor
   )
   return WinRt.Windows.Storage.Streams.IInputStream;

   function ReadAsync
   (
      this : in out Decompressor;
      buffer : Windows.Storage.Streams.IBuffer;
      count : WinRt.UInt32;
      options : Windows.Storage.Streams.InputStreamOptions
   )
   return WinRt.Windows.Storage.Streams.IBuffer;

   procedure Close
   (
      this : in out Decompressor
   );

end;

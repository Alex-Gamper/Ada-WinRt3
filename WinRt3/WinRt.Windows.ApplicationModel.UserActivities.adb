--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Credentials;
with WinRt.Windows.System;
with WinRt.Windows.UI;
with WinRt.Windows.UI.Shell;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.UserActivities is

   package IAsyncOperation_UserActivity is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.UserActivities.IUserActivity);
   package AsyncOperationCompletedHandler_UserActivity is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.UserActivities.IUserActivity);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivity

   procedure Initialize (this : in out UserActivity) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivity) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivity, IUserActivity_Ptr);
   begin
      if this.m_IUserActivity /= null then
         if this.m_IUserActivity.all /= null then
            RefCount := this.m_IUserActivity.all.Release;
            Free (this.m_IUserActivity);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserActivity

   function Constructor
   (
      activityId : WinRt.WString
   )
   return UserActivity is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivity");
      m_Factory    : access IUserActivityFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.UserActivities.IUserActivity;
      HStr_activityId : WinRt.HString := To_HString (activityId);
   begin
      return RetVal : UserActivity do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithActivityId (HStr_activityId, m_ComRetVal'Access);
            Retval.m_IUserActivity := new Windows.ApplicationModel.UserActivities.IUserActivity;
            Retval.m_IUserActivity.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_activityId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserActivity

   function TryParseFromJson
   (
      json : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivity is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivity");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivity;
      HStr_json : WinRt.HString := To_HString (json);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivity do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryParseFromJson (HStr_json, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivity := new Windows.ApplicationModel.UserActivities.IUserActivity;
            Retval.m_IUserActivity.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_json);
      end return;
   end;

   function TryParseFromJsonArray
   (
      json : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivity");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      HStr_json : WinRt.HString := To_HString (json);
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserActivityStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.TryParseFromJsonArray (HStr_json, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      Hr := WindowsDeleteString (HStr_json);
      return m_ComRetVal;
   end;

   function ToJsonArray
   (
      activities : GenericObject
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivity");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserActivityStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.ToJsonArray (activities, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivity

   function get_State
   (
      this : in out UserActivity
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.UserActivityState;
   begin
      Hr := this.m_IUserActivity.all.get_State (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivityId
   (
      this : in out UserActivity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivity.all.get_ActivityId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_VisualElements
   (
      this : in out UserActivity
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityVisualElements'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityVisualElements;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityVisualElements do
         Hr := this.m_IUserActivity.all.get_VisualElements (m_ComRetVal'Access);
         Retval.m_IUserActivityVisualElements := new Windows.ApplicationModel.UserActivities.IUserActivityVisualElements;
         Retval.m_IUserActivityVisualElements.all := m_ComRetVal;
      end return;
   end;

   function get_ContentUri
   (
      this : in out UserActivity
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IUserActivity.all.get_ContentUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ContentUri
   (
      this : in out UserActivity;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivity.all.put_ContentUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ContentType
   (
      this : in out UserActivity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivity.all.get_ContentType (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ContentType
   (
      this : in out UserActivity;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserActivity.all.put_ContentType (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_FallbackUri
   (
      this : in out UserActivity
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IUserActivity.all.get_FallbackUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_FallbackUri
   (
      this : in out UserActivity;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivity.all.put_FallbackUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ActivationUri
   (
      this : in out UserActivity
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IUserActivity.all.get_ActivationUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_ActivationUri
   (
      this : in out UserActivity;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivity.all.put_ActivationUri (value.m_IUriRuntimeClass.all);
   end;

   function get_ContentInfo
   (
      this : in out UserActivity
   )
   return WinRt.Windows.ApplicationModel.UserActivities.IUserActivityContentInfo is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityContentInfo;
   begin
      Hr := this.m_IUserActivity.all.get_ContentInfo (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ContentInfo
   (
      this : in out UserActivity;
      value : Windows.ApplicationModel.UserActivities.IUserActivityContentInfo
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivity.all.put_ContentInfo (value);
   end;

   procedure SaveAsync
   (
      this : in out UserActivity
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserActivity.all.SaveAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function CreateSession
   (
      this : in out UserActivity
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivitySession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivitySession;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivitySession do
         Hr := this.m_IUserActivity.all.CreateSession (m_ComRetVal'Access);
         Retval.m_IUserActivitySession := new Windows.ApplicationModel.UserActivities.IUserActivitySession;
         Retval.m_IUserActivitySession.all := m_ComRetVal;
      end return;
   end;

   function ToJson
   (
      this : in out UserActivity
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivity2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivity_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivity2, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivity2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivity.all);
      Hr := m_Interface.ToJson (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_IsRoamable
   (
      this : in out UserActivity
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivity3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivity_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivity3, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivity3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivity.all);
      Hr := m_Interface.get_IsRoamable (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_IsRoamable
   (
      this : in out UserActivity;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivity3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivity_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivity3, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivity3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivity.all);
      Hr := m_Interface.put_IsRoamable (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityAttribution

   procedure Initialize (this : in out UserActivityAttribution) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityAttribution) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityAttribution, IUserActivityAttribution_Ptr);
   begin
      if this.m_IUserActivityAttribution /= null then
         if this.m_IUserActivityAttribution.all /= null then
            RefCount := this.m_IUserActivityAttribution.all.Release;
            Free (this.m_IUserActivityAttribution);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for UserActivityAttribution

   function Constructor
   (
      iconUri : Windows.Foundation.Uri'Class
   )
   return UserActivityAttribution is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityAttribution");
      m_Factory    : access IUserActivityAttributionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
   begin
      return RetVal : UserActivityAttribution do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityAttributionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithUri (iconUri.m_IUriRuntimeClass.all, m_ComRetVal'Access);
            Retval.m_IUserActivityAttribution := new Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
            Retval.m_IUserActivityAttribution.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return UserActivityAttribution is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityAttribution");
      m_ComRetVal  : aliased Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
   begin
      return RetVal : UserActivityAttribution do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IUserActivityAttribution := new Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
            Retval.m_IUserActivityAttribution.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityAttribution

   function get_IconUri
   (
      this : in out UserActivityAttribution
   )
   return WinRt.Windows.Foundation.Uri'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IUriRuntimeClass;
   begin
      return RetVal : WinRt.Windows.Foundation.Uri do
         Hr := this.m_IUserActivityAttribution.all.get_IconUri (m_ComRetVal'Access);
         Retval.m_IUriRuntimeClass := new Windows.Foundation.IUriRuntimeClass;
         Retval.m_IUriRuntimeClass.all := m_ComRetVal;
      end return;
   end;

   procedure put_IconUri
   (
      this : in out UserActivityAttribution;
      value : Windows.Foundation.Uri'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityAttribution.all.put_IconUri (value.m_IUriRuntimeClass.all);
   end;

   function get_AlternateText
   (
      this : in out UserActivityAttribution
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivityAttribution.all.get_AlternateText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AlternateText
   (
      this : in out UserActivityAttribution;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserActivityAttribution.all.put_AlternateText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AddImageQuery
   (
      this : in out UserActivityAttribution
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IUserActivityAttribution.all.get_AddImageQuery (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AddImageQuery
   (
      this : in out UserActivityAttribution;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityAttribution.all.put_AddImageQuery (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityChannel

   procedure Initialize (this : in out UserActivityChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityChannel, IUserActivityChannel_Ptr);
   begin
      if this.m_IUserActivityChannel /= null then
         if this.m_IUserActivityChannel.all /= null then
            RefCount := this.m_IUserActivityChannel.all.Release;
            Free (this.m_IUserActivityChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserActivityChannel

   function GetDefault
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityChannel");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannelStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityChannel;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityChannelStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetDefault (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivityChannel := new Windows.ApplicationModel.UserActivities.IUserActivityChannel;
            Retval.m_IUserActivityChannel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   procedure DisableAutoSessionCreation is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityChannel");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannelStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IUserActivityChannelStatics2'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.DisableAutoSessionCreation;
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
   end;

   function TryGetForWebAccount
   (
      account : Windows.Security.Credentials.WebAccount'Class
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityChannel");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannelStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityChannel;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityChannelStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.TryGetForWebAccount (account.m_IWebAccount.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivityChannel := new Windows.ApplicationModel.UserActivities.IUserActivityChannel;
            Retval.m_IUserActivityChannel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function GetForUser
   (
      user : Windows.System.User'Class
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityChannel");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannelStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityChannel;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityChannel do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityChannelStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForUser (user.m_IUser.all, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivityChannel := new Windows.ApplicationModel.UserActivities.IUserActivityChannel;
            Retval.m_IUserActivityChannel.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityChannel

   function GetOrCreateUserActivityAsync
   (
      this : in out UserActivityChannel;
      activityId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activityId : WinRt.HString := To_HString (activityId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UserActivity.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UserActivity.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.UserActivities.IUserActivity;
      m_IID            : aliased WinRt.IID := (889805187, 30608, 22900, (166, 96, 28, 45, 189, 210, 239, 167 )); -- Windows.ApplicationModel.UserActivities.UserActivity;
      m_HandlerIID     : aliased WinRt.IID := (1696925639, 3014, 23819, (130, 190, 151, 173, 34, 87, 182, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_UserActivity.Kind := new AsyncOperationCompletedHandler_UserActivity.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UserActivity.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UserActivity.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UserActivity.Kind_Delegate, AsyncOperationCompletedHandler_UserActivity.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivity do
         Hr := this.m_IUserActivityChannel.all.GetOrCreateUserActivityAsync (HStr_activityId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IUserActivity := new Windows.ApplicationModel.UserActivities.IUserActivity;
                  Retval.m_IUserActivity.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_activityId);
      end return;
   end;

   procedure DeleteActivityAsync
   (
      this : in out UserActivityChannel;
      activityId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activityId : WinRt.HString := To_HString (activityId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserActivityChannel.all.DeleteActivityAsync (HStr_activityId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_activityId);
   end;

   procedure DeleteAllActivitiesAsync
   (
      this : in out UserActivityChannel
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IUserActivityChannel.all.DeleteAllActivitiesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function GetRecentUserActivitiesAsync
   (
      this : in out UserActivityChannel;
      maxUniqueActivities : WinRt.Int32
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3503342346, 9564, 21048, (167, 162, 170, 144, 93, 56, 57, 25 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1039563480, 32141, 21181, (152, 146, 15, 249, 191, 147, 252, 128 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel2, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivityChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivityChannel.all);
      Hr := m_Interface.GetRecentUserActivitiesAsync (maxUniqueActivities, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetSessionHistoryItemsForUserActivityAsync
   (
      this : in out UserActivityChannel;
      activityId : WinRt.WString;
      startTime : Windows.Foundation.DateTime
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_activityId : WinRt.HString := To_HString (activityId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (3503342346, 9564, 21048, (167, 162, 170, 144, 93, 56, 57, 25 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (1039563480, 32141, 21181, (152, 146, 15, 249, 191, 147, 252, 128 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivityChannel2, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivityChannel2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivityChannel.all);
      Hr := m_Interface.GetSessionHistoryItemsForUserActivityAsync (HStr_activityId, startTime, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_activityId);
      return m_RetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityContentInfo

   procedure Initialize (this : in out UserActivityContentInfo) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityContentInfo) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityContentInfo, IUserActivityContentInfo_Ptr);
   begin
      if this.m_IUserActivityContentInfo /= null then
         if this.m_IUserActivityContentInfo.all /= null then
            RefCount := this.m_IUserActivityContentInfo.all.Release;
            Free (this.m_IUserActivityContentInfo);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserActivityContentInfo

   function FromJson
   (
      value : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityContentInfo is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityContentInfo");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityContentInfoStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityContentInfo;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityContentInfo do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityContentInfoStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromJson (HStr_value, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivityContentInfo := new Windows.ApplicationModel.UserActivities.IUserActivityContentInfo;
            Retval.m_IUserActivityContentInfo.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_value);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityContentInfo

   function ToJson
   (
      this : in out UserActivityContentInfo
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivityContentInfo.all.ToJson (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityRequest

   procedure Initialize (this : in out UserActivityRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityRequest, IUserActivityRequest_Ptr);
   begin
      if this.m_IUserActivityRequest /= null then
         if this.m_IUserActivityRequest.all /= null then
            RefCount := this.m_IUserActivityRequest.all.Release;
            Free (this.m_IUserActivityRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityRequest

   procedure SetUserActivity
   (
      this : in out UserActivityRequest;
      activity : Windows.ApplicationModel.UserActivities.UserActivity'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityRequest.all.SetUserActivity (activity.m_IUserActivity.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityRequestManager

   procedure Initialize (this : in out UserActivityRequestManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityRequestManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityRequestManager, IUserActivityRequestManager_Ptr);
   begin
      if this.m_IUserActivityRequestManager /= null then
         if this.m_IUserActivityRequestManager.all /= null then
            RefCount := this.m_IUserActivityRequestManager.all.Release;
            Free (this.m_IUserActivityRequestManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for UserActivityRequestManager

   function GetForCurrentView
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityRequestManager is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.ApplicationModel.UserActivities.UserActivityRequestManager");
      m_Factory        : access WinRt.Windows.ApplicationModel.UserActivities.IUserActivityRequestManagerStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityRequestManager;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityRequestManager do
         Hr := RoGetActivationFactory (m_hString, IID_IUserActivityRequestManagerStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.GetForCurrentView (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IUserActivityRequestManager := new Windows.ApplicationModel.UserActivities.IUserActivityRequestManager;
            Retval.m_IUserActivityRequestManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityRequestManager

   function add_UserActivityRequested
   (
      this : in out UserActivityRequestManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IUserActivityRequestManager.all.add_UserActivityRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UserActivityRequested
   (
      this : in out UserActivityRequestManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityRequestManager.all.remove_UserActivityRequested (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityRequestedEventArgs

   procedure Initialize (this : in out UserActivityRequestedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityRequestedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityRequestedEventArgs, IUserActivityRequestedEventArgs_Ptr);
   begin
      if this.m_IUserActivityRequestedEventArgs /= null then
         if this.m_IUserActivityRequestedEventArgs.all /= null then
            RefCount := this.m_IUserActivityRequestedEventArgs.all.Release;
            Free (this.m_IUserActivityRequestedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityRequestedEventArgs

   function get_Request
   (
      this : in out UserActivityRequestedEventArgs
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityRequest do
         Hr := this.m_IUserActivityRequestedEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IUserActivityRequest := new Windows.ApplicationModel.UserActivities.IUserActivityRequest;
         Retval.m_IUserActivityRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out UserActivityRequestedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IUserActivityRequestedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivitySession

   procedure Initialize (this : in out UserActivitySession) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivitySession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivitySession, IUserActivitySession_Ptr);
   begin
      if this.m_IUserActivitySession /= null then
         if this.m_IUserActivitySession.all /= null then
            RefCount := this.m_IUserActivitySession.all.Release;
            Free (this.m_IUserActivitySession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivitySession

   function get_ActivityId
   (
      this : in out UserActivitySession
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivitySession.all.get_ActivityId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure Close
   (
      this : in out UserActivitySession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivitySession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivitySession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivitySessionHistoryItem

   procedure Initialize (this : in out UserActivitySessionHistoryItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivitySessionHistoryItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivitySessionHistoryItem, IUserActivitySessionHistoryItem_Ptr);
   begin
      if this.m_IUserActivitySessionHistoryItem /= null then
         if this.m_IUserActivitySessionHistoryItem.all /= null then
            RefCount := this.m_IUserActivitySessionHistoryItem.all.Release;
            Free (this.m_IUserActivitySessionHistoryItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivitySessionHistoryItem

   function get_UserActivity
   (
      this : in out UserActivitySessionHistoryItem
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivity'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivity;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivity do
         Hr := this.m_IUserActivitySessionHistoryItem.all.get_UserActivity (m_ComRetVal'Access);
         Retval.m_IUserActivity := new Windows.ApplicationModel.UserActivities.IUserActivity;
         Retval.m_IUserActivity.all := m_ComRetVal;
      end return;
   end;

   function get_StartTime
   (
      this : in out UserActivitySessionHistoryItem
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IUserActivitySessionHistoryItem.all.get_StartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_EndTime
   (
      this : in out UserActivitySessionHistoryItem
   )
   return IReference_DateTime.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_DateTime.Kind;
   begin
      Hr := this.m_IUserActivitySessionHistoryItem.all.get_EndTime (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_DateTime (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for UserActivityVisualElements

   procedure Initialize (this : in out UserActivityVisualElements) is
   begin
      null;
   end;

   procedure Finalize (this : in out UserActivityVisualElements) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IUserActivityVisualElements, IUserActivityVisualElements_Ptr);
   begin
      if this.m_IUserActivityVisualElements /= null then
         if this.m_IUserActivityVisualElements.all /= null then
            RefCount := this.m_IUserActivityVisualElements.all.Release;
            Free (this.m_IUserActivityVisualElements);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for UserActivityVisualElements

   function get_DisplayText
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivityVisualElements.all.get_DisplayText (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_DisplayText
   (
      this : in out UserActivityVisualElements;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserActivityVisualElements.all.put_DisplayText (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Description
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IUserActivityVisualElements.all.get_Description (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Description
   (
      this : in out UserActivityVisualElements;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IUserActivityVisualElements.all.put_Description (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_BackgroundColor
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.Windows.UI.Color is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Color;
   begin
      Hr := this.m_IUserActivityVisualElements.all.get_BackgroundColor (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BackgroundColor
   (
      this : in out UserActivityVisualElements;
      value : Windows.UI.Color
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityVisualElements.all.put_BackgroundColor (value);
   end;

   function get_Attribution
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.Windows.ApplicationModel.UserActivities.UserActivityAttribution'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.UserActivities.UserActivityAttribution do
         Hr := this.m_IUserActivityVisualElements.all.get_Attribution (m_ComRetVal'Access);
         Retval.m_IUserActivityAttribution := new Windows.ApplicationModel.UserActivities.IUserActivityAttribution;
         Retval.m_IUserActivityAttribution.all := m_ComRetVal;
      end return;
   end;

   procedure put_Attribution
   (
      this : in out UserActivityVisualElements;
      value : Windows.ApplicationModel.UserActivities.UserActivityAttribution'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityVisualElements.all.put_Attribution (value.m_IUserActivityAttribution.all);
   end;

   procedure put_Content
   (
      this : in out UserActivityVisualElements;
      value : Windows.UI.Shell.IAdaptiveCard
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IUserActivityVisualElements.all.put_Content (value);
   end;

   function get_Content
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.Windows.UI.Shell.IAdaptiveCard is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Shell.IAdaptiveCard;
   begin
      Hr := this.m_IUserActivityVisualElements.all.get_Content (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_AttributionDisplayText
   (
      this : in out UserActivityVisualElements
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements2, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivityVisualElements2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivityVisualElements.all);
      Hr := m_Interface.get_AttributionDisplayText (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AttributionDisplayText
   (
      this : in out UserActivityVisualElements;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements_Interface, WinRt.Windows.ApplicationModel.UserActivities.IUserActivityVisualElements2, WinRt.Windows.ApplicationModel.UserActivities.IID_IUserActivityVisualElements2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IUserActivityVisualElements.all);
      Hr := m_Interface.put_AttributionDisplayText (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

end;

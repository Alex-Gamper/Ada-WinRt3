--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Security.Cryptography.Certificates;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Email.DataProvider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailDataProviderConnection

   procedure Initialize (this : in out EmailDataProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailDataProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailDataProviderConnection, IEmailDataProviderConnection_Ptr);
   begin
      if this.m_IEmailDataProviderConnection /= null then
         if this.m_IEmailDataProviderConnection.all /= null then
            RefCount := this.m_IEmailDataProviderConnection.all.Release;
            Free (this.m_IEmailDataProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailDataProviderConnection

   function add_MailboxSyncRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_MailboxSyncRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MailboxSyncRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_MailboxSyncRequested (token);
   end;

   function add_DownloadMessageRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_DownloadMessageRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadMessageRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_DownloadMessageRequested (token);
   end;

   function add_DownloadAttachmentRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_DownloadAttachmentRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DownloadAttachmentRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_DownloadAttachmentRequested (token);
   end;

   function add_CreateFolderRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_CreateFolderRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_CreateFolderRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_CreateFolderRequested (token);
   end;

   function add_DeleteFolderRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_DeleteFolderRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_DeleteFolderRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_DeleteFolderRequested (token);
   end;

   function add_EmptyFolderRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_EmptyFolderRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_EmptyFolderRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_EmptyFolderRequested (token);
   end;

   function add_MoveFolderRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_MoveFolderRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MoveFolderRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_MoveFolderRequested (token);
   end;

   function add_UpdateMeetingResponseRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_UpdateMeetingResponseRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_UpdateMeetingResponseRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_UpdateMeetingResponseRequested (token);
   end;

   function add_ForwardMeetingRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_ForwardMeetingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ForwardMeetingRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_ForwardMeetingRequested (token);
   end;

   function add_ProposeNewTimeForMeetingRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_ProposeNewTimeForMeetingRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ProposeNewTimeForMeetingRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_ProposeNewTimeForMeetingRequested (token);
   end;

   function add_SetAutoReplySettingsRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_SetAutoReplySettingsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SetAutoReplySettingsRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_SetAutoReplySettingsRequested (token);
   end;

   function add_GetAutoReplySettingsRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_GetAutoReplySettingsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GetAutoReplySettingsRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_GetAutoReplySettingsRequested (token);
   end;

   function add_ResolveRecipientsRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_ResolveRecipientsRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ResolveRecipientsRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_ResolveRecipientsRequested (token);
   end;

   function add_ValidateCertificatesRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_ValidateCertificatesRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ValidateCertificatesRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_ValidateCertificatesRequested (token);
   end;

   function add_ServerSearchReadBatchRequested
   (
      this : in out EmailDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.add_ServerSearchReadBatchRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ServerSearchReadBatchRequested
   (
      this : in out EmailDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.remove_ServerSearchReadBatchRequested (token);
   end;

   procedure Start
   (
      this : in out EmailDataProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IEmailDataProviderConnection.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailDataProviderTriggerDetails

   procedure Initialize (this : in out EmailDataProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailDataProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailDataProviderTriggerDetails, IEmailDataProviderTriggerDetails_Ptr);
   begin
      if this.m_IEmailDataProviderTriggerDetails /= null then
         if this.m_IEmailDataProviderTriggerDetails.all /= null then
            RefCount := this.m_IEmailDataProviderTriggerDetails.all.Release;
            Free (this.m_IEmailDataProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailDataProviderTriggerDetails

   function get_Connection
   (
      this : in out EmailDataProviderTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailDataProviderConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailDataProviderConnection do
         Hr := this.m_IEmailDataProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IEmailDataProviderConnection := new Windows.ApplicationModel.Email.DataProvider.IEmailDataProviderConnection;
         Retval.m_IEmailDataProviderConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxCreateFolderRequest

   procedure Initialize (this : in out EmailMailboxCreateFolderRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxCreateFolderRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxCreateFolderRequest, IEmailMailboxCreateFolderRequest_Ptr);
   begin
      if this.m_IEmailMailboxCreateFolderRequest /= null then
         if this.m_IEmailMailboxCreateFolderRequest.all /= null then
            RefCount := this.m_IEmailMailboxCreateFolderRequest.all.Release;
            Free (this.m_IEmailMailboxCreateFolderRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxCreateFolderRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxCreateFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxCreateFolderRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ParentFolderId
   (
      this : in out EmailMailboxCreateFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxCreateFolderRequest.all.get_ParentFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Name
   (
      this : in out EmailMailboxCreateFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxCreateFolderRequest.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxCreateFolderRequest;
      folder : Windows.ApplicationModel.Email.EmailFolder'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxCreateFolderRequest.all.ReportCompletedAsync (folder.m_IEmailFolder.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxCreateFolderRequest;
      status : Windows.ApplicationModel.Email.EmailMailboxCreateFolderStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxCreateFolderRequest.all.ReportFailedAsync (status, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxCreateFolderRequestEventArgs

   procedure Initialize (this : in out EmailMailboxCreateFolderRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxCreateFolderRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxCreateFolderRequestEventArgs, IEmailMailboxCreateFolderRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxCreateFolderRequestEventArgs /= null then
         if this.m_IEmailMailboxCreateFolderRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxCreateFolderRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxCreateFolderRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxCreateFolderRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxCreateFolderRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxCreateFolderRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxCreateFolderRequest do
         Hr := this.m_IEmailMailboxCreateFolderRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxCreateFolderRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxCreateFolderRequest;
         Retval.m_IEmailMailboxCreateFolderRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxCreateFolderRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxCreateFolderRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDeleteFolderRequest

   procedure Initialize (this : in out EmailMailboxDeleteFolderRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDeleteFolderRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDeleteFolderRequest, IEmailMailboxDeleteFolderRequest_Ptr);
   begin
      if this.m_IEmailMailboxDeleteFolderRequest /= null then
         if this.m_IEmailMailboxDeleteFolderRequest.all /= null then
            RefCount := this.m_IEmailMailboxDeleteFolderRequest.all.Release;
            Free (this.m_IEmailMailboxDeleteFolderRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDeleteFolderRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxDeleteFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDeleteFolderRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailFolderId
   (
      this : in out EmailMailboxDeleteFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDeleteFolderRequest.all.get_EmailFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxDeleteFolderRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDeleteFolderRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxDeleteFolderRequest;
      status : Windows.ApplicationModel.Email.EmailMailboxDeleteFolderStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDeleteFolderRequest.all.ReportFailedAsync (status, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDeleteFolderRequestEventArgs

   procedure Initialize (this : in out EmailMailboxDeleteFolderRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDeleteFolderRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDeleteFolderRequestEventArgs, IEmailMailboxDeleteFolderRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxDeleteFolderRequestEventArgs /= null then
         if this.m_IEmailMailboxDeleteFolderRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxDeleteFolderRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxDeleteFolderRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDeleteFolderRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxDeleteFolderRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDeleteFolderRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDeleteFolderRequest do
         Hr := this.m_IEmailMailboxDeleteFolderRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxDeleteFolderRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDeleteFolderRequest;
         Retval.m_IEmailMailboxDeleteFolderRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxDeleteFolderRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxDeleteFolderRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDownloadAttachmentRequest

   procedure Initialize (this : in out EmailMailboxDownloadAttachmentRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDownloadAttachmentRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDownloadAttachmentRequest, IEmailMailboxDownloadAttachmentRequest_Ptr);
   begin
      if this.m_IEmailMailboxDownloadAttachmentRequest /= null then
         if this.m_IEmailMailboxDownloadAttachmentRequest.all /= null then
            RefCount := this.m_IEmailMailboxDownloadAttachmentRequest.all.Release;
            Free (this.m_IEmailMailboxDownloadAttachmentRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDownloadAttachmentRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxDownloadAttachmentRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDownloadAttachmentRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessageId
   (
      this : in out EmailMailboxDownloadAttachmentRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDownloadAttachmentRequest.all.get_EmailMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailAttachmentId
   (
      this : in out EmailMailboxDownloadAttachmentRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDownloadAttachmentRequest.all.get_EmailAttachmentId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxDownloadAttachmentRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDownloadAttachmentRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxDownloadAttachmentRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDownloadAttachmentRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDownloadAttachmentRequestEventArgs

   procedure Initialize (this : in out EmailMailboxDownloadAttachmentRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDownloadAttachmentRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDownloadAttachmentRequestEventArgs, IEmailMailboxDownloadAttachmentRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxDownloadAttachmentRequestEventArgs /= null then
         if this.m_IEmailMailboxDownloadAttachmentRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxDownloadAttachmentRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxDownloadAttachmentRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDownloadAttachmentRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxDownloadAttachmentRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDownloadAttachmentRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadAttachmentRequest do
         Hr := this.m_IEmailMailboxDownloadAttachmentRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxDownloadAttachmentRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDownloadAttachmentRequest;
         Retval.m_IEmailMailboxDownloadAttachmentRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxDownloadAttachmentRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxDownloadAttachmentRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDownloadMessageRequest

   procedure Initialize (this : in out EmailMailboxDownloadMessageRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDownloadMessageRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDownloadMessageRequest, IEmailMailboxDownloadMessageRequest_Ptr);
   begin
      if this.m_IEmailMailboxDownloadMessageRequest /= null then
         if this.m_IEmailMailboxDownloadMessageRequest.all /= null then
            RefCount := this.m_IEmailMailboxDownloadMessageRequest.all.Release;
            Free (this.m_IEmailMailboxDownloadMessageRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDownloadMessageRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxDownloadMessageRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDownloadMessageRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessageId
   (
      this : in out EmailMailboxDownloadMessageRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxDownloadMessageRequest.all.get_EmailMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxDownloadMessageRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDownloadMessageRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxDownloadMessageRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxDownloadMessageRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxDownloadMessageRequestEventArgs

   procedure Initialize (this : in out EmailMailboxDownloadMessageRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxDownloadMessageRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxDownloadMessageRequestEventArgs, IEmailMailboxDownloadMessageRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxDownloadMessageRequestEventArgs /= null then
         if this.m_IEmailMailboxDownloadMessageRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxDownloadMessageRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxDownloadMessageRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxDownloadMessageRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxDownloadMessageRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDownloadMessageRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxDownloadMessageRequest do
         Hr := this.m_IEmailMailboxDownloadMessageRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxDownloadMessageRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxDownloadMessageRequest;
         Retval.m_IEmailMailboxDownloadMessageRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxDownloadMessageRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxDownloadMessageRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxEmptyFolderRequest

   procedure Initialize (this : in out EmailMailboxEmptyFolderRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxEmptyFolderRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxEmptyFolderRequest, IEmailMailboxEmptyFolderRequest_Ptr);
   begin
      if this.m_IEmailMailboxEmptyFolderRequest /= null then
         if this.m_IEmailMailboxEmptyFolderRequest.all /= null then
            RefCount := this.m_IEmailMailboxEmptyFolderRequest.all.Release;
            Free (this.m_IEmailMailboxEmptyFolderRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxEmptyFolderRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxEmptyFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxEmptyFolderRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailFolderId
   (
      this : in out EmailMailboxEmptyFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxEmptyFolderRequest.all.get_EmailFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxEmptyFolderRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxEmptyFolderRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxEmptyFolderRequest;
      status : Windows.ApplicationModel.Email.EmailMailboxEmptyFolderStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxEmptyFolderRequest.all.ReportFailedAsync (status, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxEmptyFolderRequestEventArgs

   procedure Initialize (this : in out EmailMailboxEmptyFolderRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxEmptyFolderRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxEmptyFolderRequestEventArgs, IEmailMailboxEmptyFolderRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxEmptyFolderRequestEventArgs /= null then
         if this.m_IEmailMailboxEmptyFolderRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxEmptyFolderRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxEmptyFolderRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxEmptyFolderRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxEmptyFolderRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxEmptyFolderRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxEmptyFolderRequest do
         Hr := this.m_IEmailMailboxEmptyFolderRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxEmptyFolderRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxEmptyFolderRequest;
         Retval.m_IEmailMailboxEmptyFolderRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxEmptyFolderRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxEmptyFolderRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxForwardMeetingRequest

   procedure Initialize (this : in out EmailMailboxForwardMeetingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxForwardMeetingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxForwardMeetingRequest, IEmailMailboxForwardMeetingRequest_Ptr);
   begin
      if this.m_IEmailMailboxForwardMeetingRequest /= null then
         if this.m_IEmailMailboxForwardMeetingRequest.all /= null then
            RefCount := this.m_IEmailMailboxForwardMeetingRequest.all.Release;
            Free (this.m_IEmailMailboxForwardMeetingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxForwardMeetingRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessageId
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_EmailMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Recipients
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return IVectorView_IEmailRecipient.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IEmailRecipient.Kind;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_Recipients (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IEmailRecipient (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_Subject
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ForwardHeaderType
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.Windows.ApplicationModel.Email.EmailMessageBodyKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.EmailMessageBodyKind;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_ForwardHeaderType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ForwardHeader
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_ForwardHeader (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out EmailMailboxForwardMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxForwardMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxForwardMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxForwardMeetingRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxForwardMeetingRequestEventArgs

   procedure Initialize (this : in out EmailMailboxForwardMeetingRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxForwardMeetingRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxForwardMeetingRequestEventArgs, IEmailMailboxForwardMeetingRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxForwardMeetingRequestEventArgs /= null then
         if this.m_IEmailMailboxForwardMeetingRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxForwardMeetingRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxForwardMeetingRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxForwardMeetingRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxForwardMeetingRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxForwardMeetingRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxForwardMeetingRequest do
         Hr := this.m_IEmailMailboxForwardMeetingRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxForwardMeetingRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxForwardMeetingRequest;
         Retval.m_IEmailMailboxForwardMeetingRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxForwardMeetingRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxForwardMeetingRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxGetAutoReplySettingsRequest

   procedure Initialize (this : in out EmailMailboxGetAutoReplySettingsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxGetAutoReplySettingsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxGetAutoReplySettingsRequest, IEmailMailboxGetAutoReplySettingsRequest_Ptr);
   begin
      if this.m_IEmailMailboxGetAutoReplySettingsRequest /= null then
         if this.m_IEmailMailboxGetAutoReplySettingsRequest.all /= null then
            RefCount := this.m_IEmailMailboxGetAutoReplySettingsRequest.all.Release;
            Free (this.m_IEmailMailboxGetAutoReplySettingsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxGetAutoReplySettingsRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxGetAutoReplySettingsRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxGetAutoReplySettingsRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_RequestedFormat
   (
      this : in out EmailMailboxGetAutoReplySettingsRequest
   )
   return WinRt.Windows.ApplicationModel.Email.EmailMailboxAutoReplyMessageResponseKind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.EmailMailboxAutoReplyMessageResponseKind;
   begin
      Hr := this.m_IEmailMailboxGetAutoReplySettingsRequest.all.get_RequestedFormat (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxGetAutoReplySettingsRequest;
      autoReplySettings : Windows.ApplicationModel.Email.EmailMailboxAutoReplySettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxGetAutoReplySettingsRequest.all.ReportCompletedAsync (autoReplySettings.m_IEmailMailboxAutoReplySettings.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxGetAutoReplySettingsRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxGetAutoReplySettingsRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxGetAutoReplySettingsRequestEventArgs

   procedure Initialize (this : in out EmailMailboxGetAutoReplySettingsRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxGetAutoReplySettingsRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxGetAutoReplySettingsRequestEventArgs, IEmailMailboxGetAutoReplySettingsRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs /= null then
         if this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxGetAutoReplySettingsRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxGetAutoReplySettingsRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxGetAutoReplySettingsRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxGetAutoReplySettingsRequest do
         Hr := this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxGetAutoReplySettingsRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxGetAutoReplySettingsRequest;
         Retval.m_IEmailMailboxGetAutoReplySettingsRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxGetAutoReplySettingsRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxGetAutoReplySettingsRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxMoveFolderRequest

   procedure Initialize (this : in out EmailMailboxMoveFolderRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxMoveFolderRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxMoveFolderRequest, IEmailMailboxMoveFolderRequest_Ptr);
   begin
      if this.m_IEmailMailboxMoveFolderRequest /= null then
         if this.m_IEmailMailboxMoveFolderRequest.all /= null then
            RefCount := this.m_IEmailMailboxMoveFolderRequest.all.Release;
            Free (this.m_IEmailMailboxMoveFolderRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxMoveFolderRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxMoveFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailFolderId
   (
      this : in out EmailMailboxMoveFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.get_EmailFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NewParentFolderId
   (
      this : in out EmailMailboxMoveFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.get_NewParentFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NewFolderName
   (
      this : in out EmailMailboxMoveFolderRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.get_NewFolderName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxMoveFolderRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxMoveFolderRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxMoveFolderRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxMoveFolderRequestEventArgs

   procedure Initialize (this : in out EmailMailboxMoveFolderRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxMoveFolderRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxMoveFolderRequestEventArgs, IEmailMailboxMoveFolderRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxMoveFolderRequestEventArgs /= null then
         if this.m_IEmailMailboxMoveFolderRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxMoveFolderRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxMoveFolderRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxMoveFolderRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxMoveFolderRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxMoveFolderRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxMoveFolderRequest do
         Hr := this.m_IEmailMailboxMoveFolderRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxMoveFolderRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxMoveFolderRequest;
         Retval.m_IEmailMailboxMoveFolderRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxMoveFolderRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxMoveFolderRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxProposeNewTimeForMeetingRequest

   procedure Initialize (this : in out EmailMailboxProposeNewTimeForMeetingRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxProposeNewTimeForMeetingRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxProposeNewTimeForMeetingRequest, IEmailMailboxProposeNewTimeForMeetingRequest_Ptr);
   begin
      if this.m_IEmailMailboxProposeNewTimeForMeetingRequest /= null then
         if this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all /= null then
            RefCount := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.Release;
            Free (this.m_IEmailMailboxProposeNewTimeForMeetingRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxProposeNewTimeForMeetingRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessageId
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_EmailMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_NewStartTime
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_NewStartTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_NewDuration
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.Windows.Foundation.TimeSpan is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.TimeSpan;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_NewDuration (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subject
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxProposeNewTimeForMeetingRequestEventArgs

   procedure Initialize (this : in out EmailMailboxProposeNewTimeForMeetingRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxProposeNewTimeForMeetingRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxProposeNewTimeForMeetingRequestEventArgs, IEmailMailboxProposeNewTimeForMeetingRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs /= null then
         if this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxProposeNewTimeForMeetingRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxProposeNewTimeForMeetingRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxProposeNewTimeForMeetingRequest do
         Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxProposeNewTimeForMeetingRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxProposeNewTimeForMeetingRequest;
         Retval.m_IEmailMailboxProposeNewTimeForMeetingRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxProposeNewTimeForMeetingRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxProposeNewTimeForMeetingRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxResolveRecipientsRequest

   procedure Initialize (this : in out EmailMailboxResolveRecipientsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxResolveRecipientsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxResolveRecipientsRequest, IEmailMailboxResolveRecipientsRequest_Ptr);
   begin
      if this.m_IEmailMailboxResolveRecipientsRequest /= null then
         if this.m_IEmailMailboxResolveRecipientsRequest.all /= null then
            RefCount := this.m_IEmailMailboxResolveRecipientsRequest.all.Release;
            Free (this.m_IEmailMailboxResolveRecipientsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxResolveRecipientsRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxResolveRecipientsRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxResolveRecipientsRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Recipients
   (
      this : in out EmailMailboxResolveRecipientsRequest
   )
   return IVectorView_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_HString.Kind;
   begin
      Hr := this.m_IEmailMailboxResolveRecipientsRequest.all.get_Recipients (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxResolveRecipientsRequest;
      resolutionResults : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxResolveRecipientsRequest.all.ReportCompletedAsync (resolutionResults, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxResolveRecipientsRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxResolveRecipientsRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxResolveRecipientsRequestEventArgs

   procedure Initialize (this : in out EmailMailboxResolveRecipientsRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxResolveRecipientsRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxResolveRecipientsRequestEventArgs, IEmailMailboxResolveRecipientsRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxResolveRecipientsRequestEventArgs /= null then
         if this.m_IEmailMailboxResolveRecipientsRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxResolveRecipientsRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxResolveRecipientsRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxResolveRecipientsRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxResolveRecipientsRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxResolveRecipientsRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxResolveRecipientsRequest do
         Hr := this.m_IEmailMailboxResolveRecipientsRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxResolveRecipientsRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxResolveRecipientsRequest;
         Retval.m_IEmailMailboxResolveRecipientsRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxResolveRecipientsRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxResolveRecipientsRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxServerSearchReadBatchRequest

   procedure Initialize (this : in out EmailMailboxServerSearchReadBatchRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxServerSearchReadBatchRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxServerSearchReadBatchRequest, IEmailMailboxServerSearchReadBatchRequest_Ptr);
   begin
      if this.m_IEmailMailboxServerSearchReadBatchRequest /= null then
         if this.m_IEmailMailboxServerSearchReadBatchRequest.all /= null then
            RefCount := this.m_IEmailMailboxServerSearchReadBatchRequest.all.Release;
            Free (this.m_IEmailMailboxServerSearchReadBatchRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxServerSearchReadBatchRequest

   function get_SessionId
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.get_SessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMailboxId
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailFolderId
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.get_EmailFolderId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Options
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   )
   return WinRt.Windows.ApplicationModel.Email.EmailQueryOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.IEmailQueryOptions;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.EmailQueryOptions do
         Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.get_Options (m_ComRetVal'Access);
         Retval.m_IEmailQueryOptions := new Windows.ApplicationModel.Email.IEmailQueryOptions;
         Retval.m_IEmailQueryOptions.all := m_ComRetVal;
      end return;
   end;

   function get_SuggestedBatchSize
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.get_SuggestedBatchSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SaveMessageAsync
   (
      this : in out EmailMailboxServerSearchReadBatchRequest;
      message : Windows.ApplicationModel.Email.EmailMessage'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.SaveMessageAsync (message.m_IEmailMessage.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxServerSearchReadBatchRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxServerSearchReadBatchRequest;
      batchStatus : Windows.ApplicationModel.Email.EmailBatchStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxServerSearchReadBatchRequest.all.ReportFailedAsync (batchStatus, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxServerSearchReadBatchRequestEventArgs

   procedure Initialize (this : in out EmailMailboxServerSearchReadBatchRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxServerSearchReadBatchRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxServerSearchReadBatchRequestEventArgs, IEmailMailboxServerSearchReadBatchRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs /= null then
         if this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxServerSearchReadBatchRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxServerSearchReadBatchRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxServerSearchReadBatchRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxServerSearchReadBatchRequest do
         Hr := this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxServerSearchReadBatchRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxServerSearchReadBatchRequest;
         Retval.m_IEmailMailboxServerSearchReadBatchRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxServerSearchReadBatchRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxServerSearchReadBatchRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxSetAutoReplySettingsRequest

   procedure Initialize (this : in out EmailMailboxSetAutoReplySettingsRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxSetAutoReplySettingsRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxSetAutoReplySettingsRequest, IEmailMailboxSetAutoReplySettingsRequest_Ptr);
   begin
      if this.m_IEmailMailboxSetAutoReplySettingsRequest /= null then
         if this.m_IEmailMailboxSetAutoReplySettingsRequest.all /= null then
            RefCount := this.m_IEmailMailboxSetAutoReplySettingsRequest.all.Release;
            Free (this.m_IEmailMailboxSetAutoReplySettingsRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxSetAutoReplySettingsRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxSetAutoReplySettingsRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxSetAutoReplySettingsRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_AutoReplySettings
   (
      this : in out EmailMailboxSetAutoReplySettingsRequest
   )
   return WinRt.Windows.ApplicationModel.Email.EmailMailboxAutoReplySettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.IEmailMailboxAutoReplySettings;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.EmailMailboxAutoReplySettings do
         Hr := this.m_IEmailMailboxSetAutoReplySettingsRequest.all.get_AutoReplySettings (m_ComRetVal'Access);
         Retval.m_IEmailMailboxAutoReplySettings := new Windows.ApplicationModel.Email.IEmailMailboxAutoReplySettings;
         Retval.m_IEmailMailboxAutoReplySettings.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxSetAutoReplySettingsRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxSetAutoReplySettingsRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxSetAutoReplySettingsRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxSetAutoReplySettingsRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxSetAutoReplySettingsRequestEventArgs

   procedure Initialize (this : in out EmailMailboxSetAutoReplySettingsRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxSetAutoReplySettingsRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxSetAutoReplySettingsRequestEventArgs, IEmailMailboxSetAutoReplySettingsRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs /= null then
         if this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxSetAutoReplySettingsRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxSetAutoReplySettingsRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxSetAutoReplySettingsRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxSetAutoReplySettingsRequest do
         Hr := this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxSetAutoReplySettingsRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxSetAutoReplySettingsRequest;
         Retval.m_IEmailMailboxSetAutoReplySettingsRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxSetAutoReplySettingsRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxSetAutoReplySettingsRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxSyncManagerSyncRequest

   procedure Initialize (this : in out EmailMailboxSyncManagerSyncRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxSyncManagerSyncRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxSyncManagerSyncRequest, IEmailMailboxSyncManagerSyncRequest_Ptr);
   begin
      if this.m_IEmailMailboxSyncManagerSyncRequest /= null then
         if this.m_IEmailMailboxSyncManagerSyncRequest.all /= null then
            RefCount := this.m_IEmailMailboxSyncManagerSyncRequest.all.Release;
            Free (this.m_IEmailMailboxSyncManagerSyncRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxSyncManagerSyncRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxSyncManagerSyncRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxSyncManagerSyncRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxSyncManagerSyncRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxSyncManagerSyncRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxSyncManagerSyncRequestEventArgs

   procedure Initialize (this : in out EmailMailboxSyncManagerSyncRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxSyncManagerSyncRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxSyncManagerSyncRequestEventArgs, IEmailMailboxSyncManagerSyncRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxSyncManagerSyncRequestEventArgs /= null then
         if this.m_IEmailMailboxSyncManagerSyncRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxSyncManagerSyncRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxSyncManagerSyncRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxSyncManagerSyncRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxSyncManagerSyncRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxSyncManagerSyncRequest do
         Hr := this.m_IEmailMailboxSyncManagerSyncRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxSyncManagerSyncRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxSyncManagerSyncRequest;
         Retval.m_IEmailMailboxSyncManagerSyncRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxSyncManagerSyncRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxUpdateMeetingResponseRequest

   procedure Initialize (this : in out EmailMailboxUpdateMeetingResponseRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxUpdateMeetingResponseRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxUpdateMeetingResponseRequest, IEmailMailboxUpdateMeetingResponseRequest_Ptr);
   begin
      if this.m_IEmailMailboxUpdateMeetingResponseRequest /= null then
         if this.m_IEmailMailboxUpdateMeetingResponseRequest.all /= null then
            RefCount := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.Release;
            Free (this.m_IEmailMailboxUpdateMeetingResponseRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxUpdateMeetingResponseRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_EmailMessageId
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_EmailMessageId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Response
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.Windows.ApplicationModel.Email.EmailMeetingResponseType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.EmailMeetingResponseType;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_Response (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Subject
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_Subject (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Comment
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_Comment (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_SendUpdate
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.get_SendUpdate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxUpdateMeetingResponseRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxUpdateMeetingResponseRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxUpdateMeetingResponseRequestEventArgs

   procedure Initialize (this : in out EmailMailboxUpdateMeetingResponseRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxUpdateMeetingResponseRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxUpdateMeetingResponseRequestEventArgs, IEmailMailboxUpdateMeetingResponseRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs /= null then
         if this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxUpdateMeetingResponseRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxUpdateMeetingResponseRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxUpdateMeetingResponseRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxUpdateMeetingResponseRequest do
         Hr := this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxUpdateMeetingResponseRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxUpdateMeetingResponseRequest;
         Retval.m_IEmailMailboxUpdateMeetingResponseRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxUpdateMeetingResponseRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxUpdateMeetingResponseRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxValidateCertificatesRequest

   procedure Initialize (this : in out EmailMailboxValidateCertificatesRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxValidateCertificatesRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxValidateCertificatesRequest, IEmailMailboxValidateCertificatesRequest_Ptr);
   begin
      if this.m_IEmailMailboxValidateCertificatesRequest /= null then
         if this.m_IEmailMailboxValidateCertificatesRequest.all /= null then
            RefCount := this.m_IEmailMailboxValidateCertificatesRequest.all.Release;
            Free (this.m_IEmailMailboxValidateCertificatesRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxValidateCertificatesRequest

   function get_EmailMailboxId
   (
      this : in out EmailMailboxValidateCertificatesRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IEmailMailboxValidateCertificatesRequest.all.get_EmailMailboxId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Certificates
   (
      this : in out EmailMailboxValidateCertificatesRequest
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IEmailMailboxValidateCertificatesRequest.all.get_Certificates (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out EmailMailboxValidateCertificatesRequest;
      validationStatuses : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxValidateCertificatesRequest.all.ReportCompletedAsync (validationStatuses, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out EmailMailboxValidateCertificatesRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IEmailMailboxValidateCertificatesRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for EmailMailboxValidateCertificatesRequestEventArgs

   procedure Initialize (this : in out EmailMailboxValidateCertificatesRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out EmailMailboxValidateCertificatesRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IEmailMailboxValidateCertificatesRequestEventArgs, IEmailMailboxValidateCertificatesRequestEventArgs_Ptr);
   begin
      if this.m_IEmailMailboxValidateCertificatesRequestEventArgs /= null then
         if this.m_IEmailMailboxValidateCertificatesRequestEventArgs.all /= null then
            RefCount := this.m_IEmailMailboxValidateCertificatesRequestEventArgs.all.Release;
            Free (this.m_IEmailMailboxValidateCertificatesRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for EmailMailboxValidateCertificatesRequestEventArgs

   function get_Request
   (
      this : in out EmailMailboxValidateCertificatesRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Email.DataProvider.IEmailMailboxValidateCertificatesRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Email.DataProvider.EmailMailboxValidateCertificatesRequest do
         Hr := this.m_IEmailMailboxValidateCertificatesRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IEmailMailboxValidateCertificatesRequest := new Windows.ApplicationModel.Email.DataProvider.IEmailMailboxValidateCertificatesRequest;
         Retval.m_IEmailMailboxValidateCertificatesRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out EmailMailboxValidateCertificatesRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IEmailMailboxValidateCertificatesRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

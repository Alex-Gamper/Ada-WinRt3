--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Contacts.DataProvider is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactDataProviderConnection

   procedure Initialize (this : in out ContactDataProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactDataProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactDataProviderConnection, IContactDataProviderConnection_Ptr);
   begin
      if this.m_IContactDataProviderConnection /= null then
         if this.m_IContactDataProviderConnection.all /= null then
            RefCount := this.m_IContactDataProviderConnection.all.Release;
            Free (this.m_IContactDataProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactDataProviderConnection

   function add_SyncRequested
   (
      this : in out ContactDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactDataProviderConnection.all.add_SyncRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_SyncRequested
   (
      this : in out ContactDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDataProviderConnection.all.remove_SyncRequested (token);
   end;

   function add_ServerSearchReadBatchRequested
   (
      this : in out ContactDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IContactDataProviderConnection.all.add_ServerSearchReadBatchRequested (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ServerSearchReadBatchRequested
   (
      this : in out ContactDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDataProviderConnection.all.remove_ServerSearchReadBatchRequested (token);
   end;

   procedure Start
   (
      this : in out ContactDataProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IContactDataProviderConnection.all.Start;
   end;

   function add_CreateOrUpdateContactRequested
   (
      this : in out ContactDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection_Interface, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IID_IContactDataProviderConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactDataProviderConnection.all);
      Hr := m_Interface.add_CreateOrUpdateContactRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_CreateOrUpdateContactRequested
   (
      this : in out ContactDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection_Interface, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IID_IContactDataProviderConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactDataProviderConnection.all);
      Hr := m_Interface.remove_CreateOrUpdateContactRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   function add_DeleteContactRequested
   (
      this : in out ContactDataProviderConnection;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection_Interface, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IID_IContactDataProviderConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactDataProviderConnection.all);
      Hr := m_Interface.add_DeleteContactRequested (handler, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure remove_DeleteContactRequested
   (
      this : in out ContactDataProviderConnection;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection_Interface, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection2, WinRt.Windows.ApplicationModel.Contacts.DataProvider.IID_IContactDataProviderConnection2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContactDataProviderConnection.all);
      Hr := m_Interface.remove_DeleteContactRequested (token);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactDataProviderTriggerDetails

   procedure Initialize (this : in out ContactDataProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactDataProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactDataProviderTriggerDetails, IContactDataProviderTriggerDetails_Ptr);
   begin
      if this.m_IContactDataProviderTriggerDetails /= null then
         if this.m_IContactDataProviderTriggerDetails.all /= null then
            RefCount := this.m_IContactDataProviderTriggerDetails.all.Release;
            Free (this.m_IContactDataProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactDataProviderTriggerDetails

   function get_Connection
   (
      this : in out ContactDataProviderTriggerDetails
   )
   return WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactDataProviderConnection do
         Hr := this.m_IContactDataProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IContactDataProviderConnection := new Windows.ApplicationModel.Contacts.DataProvider.IContactDataProviderConnection;
         Retval.m_IContactDataProviderConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListCreateOrUpdateContactRequest

   procedure Initialize (this : in out ContactListCreateOrUpdateContactRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListCreateOrUpdateContactRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListCreateOrUpdateContactRequest, IContactListCreateOrUpdateContactRequest_Ptr);
   begin
      if this.m_IContactListCreateOrUpdateContactRequest /= null then
         if this.m_IContactListCreateOrUpdateContactRequest.all /= null then
            RefCount := this.m_IContactListCreateOrUpdateContactRequest.all.Release;
            Free (this.m_IContactListCreateOrUpdateContactRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListCreateOrUpdateContactRequest

   function get_ContactListId
   (
      this : in out ContactListCreateOrUpdateContactRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListCreateOrUpdateContactRequest.all.get_ContactListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Contact
   (
      this : in out ContactListCreateOrUpdateContactRequest
   )
   return WinRt.Windows.ApplicationModel.Contacts.Contact'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContact;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.Contact do
         Hr := this.m_IContactListCreateOrUpdateContactRequest.all.get_Contact (m_ComRetVal'Access);
         Retval.m_IContact := new Windows.ApplicationModel.Contacts.IContact;
         Retval.m_IContact.all := m_ComRetVal;
      end return;
   end;

   procedure ReportCompletedAsync
   (
      this : in out ContactListCreateOrUpdateContactRequest;
      createdOrUpdatedContact : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListCreateOrUpdateContactRequest.all.ReportCompletedAsync (createdOrUpdatedContact.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out ContactListCreateOrUpdateContactRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListCreateOrUpdateContactRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListCreateOrUpdateContactRequestEventArgs

   procedure Initialize (this : in out ContactListCreateOrUpdateContactRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListCreateOrUpdateContactRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListCreateOrUpdateContactRequestEventArgs, IContactListCreateOrUpdateContactRequestEventArgs_Ptr);
   begin
      if this.m_IContactListCreateOrUpdateContactRequestEventArgs /= null then
         if this.m_IContactListCreateOrUpdateContactRequestEventArgs.all /= null then
            RefCount := this.m_IContactListCreateOrUpdateContactRequestEventArgs.all.Release;
            Free (this.m_IContactListCreateOrUpdateContactRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListCreateOrUpdateContactRequestEventArgs

   function get_Request
   (
      this : in out ContactListCreateOrUpdateContactRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.DataProvider.IContactListCreateOrUpdateContactRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListCreateOrUpdateContactRequest do
         Hr := this.m_IContactListCreateOrUpdateContactRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IContactListCreateOrUpdateContactRequest := new Windows.ApplicationModel.Contacts.DataProvider.IContactListCreateOrUpdateContactRequest;
         Retval.m_IContactListCreateOrUpdateContactRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ContactListCreateOrUpdateContactRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IContactListCreateOrUpdateContactRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListDeleteContactRequest

   procedure Initialize (this : in out ContactListDeleteContactRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListDeleteContactRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListDeleteContactRequest, IContactListDeleteContactRequest_Ptr);
   begin
      if this.m_IContactListDeleteContactRequest /= null then
         if this.m_IContactListDeleteContactRequest.all /= null then
            RefCount := this.m_IContactListDeleteContactRequest.all.Release;
            Free (this.m_IContactListDeleteContactRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListDeleteContactRequest

   function get_ContactListId
   (
      this : in out ContactListDeleteContactRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListDeleteContactRequest.all.get_ContactListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactId
   (
      this : in out ContactListDeleteContactRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListDeleteContactRequest.all.get_ContactId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out ContactListDeleteContactRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListDeleteContactRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out ContactListDeleteContactRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListDeleteContactRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListDeleteContactRequestEventArgs

   procedure Initialize (this : in out ContactListDeleteContactRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListDeleteContactRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListDeleteContactRequestEventArgs, IContactListDeleteContactRequestEventArgs_Ptr);
   begin
      if this.m_IContactListDeleteContactRequestEventArgs /= null then
         if this.m_IContactListDeleteContactRequestEventArgs.all /= null then
            RefCount := this.m_IContactListDeleteContactRequestEventArgs.all.Release;
            Free (this.m_IContactListDeleteContactRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListDeleteContactRequestEventArgs

   function get_Request
   (
      this : in out ContactListDeleteContactRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.DataProvider.IContactListDeleteContactRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListDeleteContactRequest do
         Hr := this.m_IContactListDeleteContactRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IContactListDeleteContactRequest := new Windows.ApplicationModel.Contacts.DataProvider.IContactListDeleteContactRequest;
         Retval.m_IContactListDeleteContactRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ContactListDeleteContactRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IContactListDeleteContactRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListServerSearchReadBatchRequest

   procedure Initialize (this : in out ContactListServerSearchReadBatchRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListServerSearchReadBatchRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListServerSearchReadBatchRequest, IContactListServerSearchReadBatchRequest_Ptr);
   begin
      if this.m_IContactListServerSearchReadBatchRequest /= null then
         if this.m_IContactListServerSearchReadBatchRequest.all /= null then
            RefCount := this.m_IContactListServerSearchReadBatchRequest.all.Release;
            Free (this.m_IContactListServerSearchReadBatchRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListServerSearchReadBatchRequest

   function get_SessionId
   (
      this : in out ContactListServerSearchReadBatchRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.get_SessionId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_ContactListId
   (
      this : in out ContactListServerSearchReadBatchRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.get_ContactListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Options
   (
      this : in out ContactListServerSearchReadBatchRequest
   )
   return WinRt.Windows.ApplicationModel.Contacts.ContactQueryOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.IContactQueryOptions;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.ContactQueryOptions do
         Hr := this.m_IContactListServerSearchReadBatchRequest.all.get_Options (m_ComRetVal'Access);
         Retval.m_IContactQueryOptions := new Windows.ApplicationModel.Contacts.IContactQueryOptions;
         Retval.m_IContactQueryOptions.all := m_ComRetVal;
      end return;
   end;

   function get_SuggestedBatchSize
   (
      this : in out ContactListServerSearchReadBatchRequest
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.get_SuggestedBatchSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure SaveContactAsync
   (
      this : in out ContactListServerSearchReadBatchRequest;
      contact : Windows.ApplicationModel.Contacts.Contact'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.SaveContactAsync (contact.m_IContact.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportCompletedAsync
   (
      this : in out ContactListServerSearchReadBatchRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out ContactListServerSearchReadBatchRequest;
      batchStatus : Windows.ApplicationModel.Contacts.ContactBatchStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListServerSearchReadBatchRequest.all.ReportFailedAsync (batchStatus, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListServerSearchReadBatchRequestEventArgs

   procedure Initialize (this : in out ContactListServerSearchReadBatchRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListServerSearchReadBatchRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListServerSearchReadBatchRequestEventArgs, IContactListServerSearchReadBatchRequestEventArgs_Ptr);
   begin
      if this.m_IContactListServerSearchReadBatchRequestEventArgs /= null then
         if this.m_IContactListServerSearchReadBatchRequestEventArgs.all /= null then
            RefCount := this.m_IContactListServerSearchReadBatchRequestEventArgs.all.Release;
            Free (this.m_IContactListServerSearchReadBatchRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListServerSearchReadBatchRequestEventArgs

   function get_Request
   (
      this : in out ContactListServerSearchReadBatchRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.DataProvider.IContactListServerSearchReadBatchRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListServerSearchReadBatchRequest do
         Hr := this.m_IContactListServerSearchReadBatchRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IContactListServerSearchReadBatchRequest := new Windows.ApplicationModel.Contacts.DataProvider.IContactListServerSearchReadBatchRequest;
         Retval.m_IContactListServerSearchReadBatchRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ContactListServerSearchReadBatchRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IContactListServerSearchReadBatchRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListSyncManagerSyncRequest

   procedure Initialize (this : in out ContactListSyncManagerSyncRequest) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListSyncManagerSyncRequest) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListSyncManagerSyncRequest, IContactListSyncManagerSyncRequest_Ptr);
   begin
      if this.m_IContactListSyncManagerSyncRequest /= null then
         if this.m_IContactListSyncManagerSyncRequest.all /= null then
            RefCount := this.m_IContactListSyncManagerSyncRequest.all.Release;
            Free (this.m_IContactListSyncManagerSyncRequest);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListSyncManagerSyncRequest

   function get_ContactListId
   (
      this : in out ContactListSyncManagerSyncRequest
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContactListSyncManagerSyncRequest.all.get_ContactListId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure ReportCompletedAsync
   (
      this : in out ContactListSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListSyncManagerSyncRequest.all.ReportCompletedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure ReportFailedAsync
   (
      this : in out ContactListSyncManagerSyncRequest
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IContactListSyncManagerSyncRequest.all.ReportFailedAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContactListSyncManagerSyncRequestEventArgs

   procedure Initialize (this : in out ContactListSyncManagerSyncRequestEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContactListSyncManagerSyncRequestEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContactListSyncManagerSyncRequestEventArgs, IContactListSyncManagerSyncRequestEventArgs_Ptr);
   begin
      if this.m_IContactListSyncManagerSyncRequestEventArgs /= null then
         if this.m_IContactListSyncManagerSyncRequestEventArgs.all /= null then
            RefCount := this.m_IContactListSyncManagerSyncRequestEventArgs.all.Release;
            Free (this.m_IContactListSyncManagerSyncRequestEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContactListSyncManagerSyncRequestEventArgs

   function get_Request
   (
      this : in out ContactListSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequest'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Contacts.DataProvider.IContactListSyncManagerSyncRequest;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Contacts.DataProvider.ContactListSyncManagerSyncRequest do
         Hr := this.m_IContactListSyncManagerSyncRequestEventArgs.all.get_Request (m_ComRetVal'Access);
         Retval.m_IContactListSyncManagerSyncRequest := new Windows.ApplicationModel.Contacts.DataProvider.IContactListSyncManagerSyncRequest;
         Retval.m_IContactListSyncManagerSyncRequest.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out ContactListSyncManagerSyncRequestEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IContactListSyncManagerSyncRequestEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

end;

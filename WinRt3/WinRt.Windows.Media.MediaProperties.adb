--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.MediaProperties is

   package IAsyncOperation_MediaEncodingProfile is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile);
   package AsyncOperationCompletedHandler_MediaEncodingProfile is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile);

   package IMap_Guid_IInspectable is new WinRt.Windows.Foundation.Collections.IMap (WinRt.Guid, WinRt.IInspectable);
   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AudioEncodingProperties

   procedure Initialize (this : in out AudioEncodingProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out AudioEncodingProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAudioEncodingProperties, IAudioEncodingProperties_Ptr);
   begin
      if this.m_IAudioEncodingProperties /= null then
         if this.m_IAudioEncodingProperties.all /= null then
            RefCount := this.m_IAudioEncodingProperties.all.Release;
            Free (this.m_IAudioEncodingProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AudioEncodingProperties

   function Constructor return AudioEncodingProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : AudioEncodingProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for AudioEncodingProperties

   function CreateAac
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitrate : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAac (sampleRate, channelCount, bitrate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAacAdts
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitrate : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAacAdts (sampleRate, channelCount, bitrate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateMp3
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitrate : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMp3 (sampleRate, channelCount, bitrate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreatePcm
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitsPerSample : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePcm (sampleRate, channelCount, bitsPerSample, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWma
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitrate : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWma (sampleRate, channelCount, bitrate, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAlac
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitsPerSample : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAlac (sampleRate, channelCount, bitsPerSample, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFlac
   (
      sampleRate : WinRt.UInt32;
      channelCount : WinRt.UInt32;
      bitsPerSample : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.AudioEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IAudioEncodingPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFlac (sampleRate, channelCount, bitsPerSample, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
            Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AudioEncodingProperties

   procedure put_Bitrate
   (
      this : in out AudioEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioEncodingProperties.all.put_Bitrate (value);
   end;

   function get_Bitrate
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioEncodingProperties.all.get_Bitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ChannelCount
   (
      this : in out AudioEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioEncodingProperties.all.put_ChannelCount (value);
   end;

   function get_ChannelCount
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioEncodingProperties.all.get_ChannelCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SampleRate
   (
      this : in out AudioEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioEncodingProperties.all.put_SampleRate (value);
   end;

   function get_SampleRate
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioEncodingProperties.all.get_SampleRate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_BitsPerSample
   (
      this : in out AudioEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAudioEncodingProperties.all.put_BitsPerSample (value);
   end;

   function get_BitsPerSample
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IAudioEncodingProperties.all.get_BitsPerSample (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaPropertySet do
         m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtype
   (
      this : in out AudioEncodingProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.put_Subtype (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtype
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.get_Subtype (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetFormatUserData
   (
      this : in out AudioEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesWithFormatUserData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesWithFormatUserData, WinRt.Windows.Media.MediaProperties.IID_IAudioEncodingPropertiesWithFormatUserData'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.SetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   procedure GetFormatUserData
   (
      this : in out AudioEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesWithFormatUserData := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IAudioEncodingPropertiesWithFormatUserData, WinRt.Windows.Media.MediaProperties.IID_IAudioEncodingPropertiesWithFormatUserData'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.GetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   function get_IsSpatial
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IAudioEncodingProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
      Hr := m_Interface.get_IsSpatial (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Copy
   (
      this : in out AudioEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IAudioEncodingProperties3, WinRt.Windows.Media.MediaProperties.IID_IAudioEncodingProperties3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         m_Interface := QInterface (this.m_IAudioEncodingProperties.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContainerEncodingProperties

   procedure Initialize (this : in out ContainerEncodingProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContainerEncodingProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContainerEncodingProperties, IContainerEncodingProperties_Ptr);
   begin
      if this.m_IContainerEncodingProperties /= null then
         if this.m_IContainerEncodingProperties.all /= null then
            RefCount := this.m_IContainerEncodingProperties.all.Release;
            Free (this.m_IContainerEncodingProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ContainerEncodingProperties

   function Constructor return ContainerEncodingProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ContainerEncodingProperties");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IContainerEncodingProperties;
   begin
      return RetVal : ContainerEncodingProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IContainerEncodingProperties := new Windows.Media.MediaProperties.IContainerEncodingProperties;
            Retval.m_IContainerEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContainerEncodingProperties

   function get_Properties
   (
      this : in out ContainerEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaPropertySet do
         m_Interface := QInterface (this.m_IContainerEncodingProperties.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out ContainerEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContainerEncodingProperties.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtype
   (
      this : in out ContainerEncodingProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContainerEncodingProperties.all);
      Hr := m_Interface.put_Subtype (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtype
   (
      this : in out ContainerEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IContainerEncodingProperties.all);
      Hr := m_Interface.get_Subtype (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Copy
   (
      this : in out ContainerEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.ContainerEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IContainerEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IContainerEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IContainerEncodingProperties2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ContainerEncodingProperties do
         m_Interface := QInterface (this.m_IContainerEncodingProperties.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IContainerEncodingProperties := new Windows.Media.MediaProperties.IContainerEncodingProperties;
         Retval.m_IContainerEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body H264ProfileIds is

      function get_ConstrainedBaseline
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_ConstrainedBaseline (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Baseline
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Baseline (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Extended
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Extended (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Main
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Main (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_High
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_High (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_High10
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_High10 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_High422
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_High422 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_High444
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_High444 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_StereoHigh
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_StereoHigh (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_MultiviewHigh
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.H264ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IH264ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IH264ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_MultiviewHigh (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end H264ProfileIds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ImageEncodingProperties

   procedure Initialize (this : in out ImageEncodingProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out ImageEncodingProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IImageEncodingProperties, IImageEncodingProperties_Ptr);
   begin
      if this.m_IImageEncodingProperties /= null then
         if this.m_IImageEncodingProperties.all /= null then
            RefCount := this.m_IImageEncodingProperties.all.Release;
            Free (this.m_IImageEncodingProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for ImageEncodingProperties

   function Constructor return ImageEncodingProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : ImageEncodingProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for ImageEncodingProperties

   function CreateJpeg
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateJpeg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreatePng
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePng (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateJpegXR
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateJpegXR (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateHeif
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateHeif (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateUncompressed
   (
      format : Windows.Media.MediaProperties.MediaPixelFormat
   )
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUncompressed (format, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateBmp
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.ImageEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IImageEncodingPropertiesStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IImageEncodingPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateBmp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
            Retval.m_IImageEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ImageEncodingProperties

   procedure put_Width
   (
      this : in out ImageEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageEncodingProperties.all.put_Width (value);
   end;

   function get_Width
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageEncodingProperties.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Height
   (
      this : in out ImageEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IImageEncodingProperties.all.put_Height (value);
   end;

   function get_Height
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IImageEncodingProperties.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Properties
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IImageEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaPropertySet do
         m_Interface := QInterface (this.m_IImageEncodingProperties.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IImageEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageEncodingProperties.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtype
   (
      this : in out ImageEncodingProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IImageEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageEncodingProperties.all);
      Hr := m_Interface.put_Subtype (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtype
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IImageEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IImageEncodingProperties.all);
      Hr := m_Interface.get_Subtype (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function Copy
   (
      this : in out ImageEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.ImageEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IImageEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IImageEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IImageEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IImageEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IImageEncodingProperties2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ImageEncodingProperties do
         m_Interface := QInterface (this.m_IImageEncodingProperties.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IImageEncodingProperties := new Windows.Media.MediaProperties.IImageEncodingProperties;
         Retval.m_IImageEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaEncodingProfile

   procedure Initialize (this : in out MediaEncodingProfile) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaEncodingProfile) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaEncodingProfile, IMediaEncodingProfile_Ptr);
   begin
      if this.m_IMediaEncodingProfile /= null then
         if this.m_IMediaEncodingProfile.all /= null then
            RefCount := this.m_IMediaEncodingProfile.all.Release;
            Free (this.m_IMediaEncodingProfile);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaEncodingProfile

   function Constructor return MediaEncodingProfile is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : MediaEncodingProfile do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for MediaEncodingProfile

   function CreateAlac
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAlac (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFlac
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFlac (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateHevc
   (
      quality : Windows.Media.MediaProperties.VideoEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics3_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateHevc (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWav
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWav (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateAvi
   (
      quality : Windows.Media.MediaProperties.VideoEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateAvi (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateM4a
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateM4a (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateMp3
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMp3 (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWma
   (
      quality : Windows.Media.MediaProperties.AudioEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWma (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateMp4
   (
      quality : Windows.Media.MediaProperties.VideoEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMp4 (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateWmv
   (
      quality : Windows.Media.MediaProperties.VideoEncodingQuality
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProfile;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWmv (quality, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
            Retval.m_IMediaEncodingProfile.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromFileAsync
   (
      file : Windows.Storage.IStorageFile
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaEncodingProfile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaEncodingProfile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile;
      m_IID            : aliased WinRt.IID := (3573051158, 50895, 22472, (151, 67, 94, 194, 12, 49, 171, 121 )); -- Windows.Media.MediaProperties.MediaEncodingProfile;
      m_HandlerIID     : aliased WinRt.IID := (925462465, 34522, 22688, (144, 192, 200, 7, 189, 148, 57, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaEncodingProfile.Kind := new AsyncOperationCompletedHandler_MediaEncodingProfile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaEncodingProfile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaEncodingProfile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaEncodingProfile.Kind_Delegate, AsyncOperationCompletedHandler_MediaEncodingProfile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromFileAsync (file, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
                     Retval.m_IMediaEncodingProfile.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateFromStreamAsync
   (
      stream : Windows.Storage.Streams.IRandomAccessStream
   )
   return WinRt.Windows.Media.MediaProperties.MediaEncodingProfile is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingProfile");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingProfileStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MediaEncodingProfile.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MediaEncodingProfile.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile;
      m_IID            : aliased WinRt.IID := (3573051158, 50895, 22472, (151, 67, 94, 194, 12, 49, 171, 121 )); -- Windows.Media.MediaProperties.MediaEncodingProfile;
      m_HandlerIID     : aliased WinRt.IID := (925462465, 34522, 22688, (144, 192, 200, 7, 189, 148, 57, 94 ));
      m_Handler        : AsyncOperationCompletedHandler_MediaEncodingProfile.Kind := new AsyncOperationCompletedHandler_MediaEncodingProfile.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MediaEncodingProfile.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MediaEncodingProfile.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MediaEncodingProfile.Kind_Delegate, AsyncOperationCompletedHandler_MediaEncodingProfile.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaEncodingProfile do
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingProfileStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateFromStreamAsync (stream, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IMediaEncodingProfile := new Windows.Media.MediaProperties.IMediaEncodingProfile;
                     Retval.m_IMediaEncodingProfile.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaEncodingProfile

   procedure put_Audio
   (
      this : in out MediaEncodingProfile;
      value : Windows.Media.MediaProperties.AudioEncodingProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaEncodingProfile.all.put_Audio (value.m_IAudioEncodingProperties.all);
   end;

   function get_Audio
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.Windows.Media.MediaProperties.AudioEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IAudioEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.AudioEncodingProperties do
         Hr := this.m_IMediaEncodingProfile.all.get_Audio (m_ComRetVal'Access);
         Retval.m_IAudioEncodingProperties := new Windows.Media.MediaProperties.IAudioEncodingProperties;
         Retval.m_IAudioEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_Video
   (
      this : in out MediaEncodingProfile;
      value : Windows.Media.MediaProperties.VideoEncodingProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaEncodingProfile.all.put_Video (value.m_IVideoEncodingProperties.all);
   end;

   function get_Video
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := this.m_IMediaEncodingProfile.all.get_Video (m_ComRetVal'Access);
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   procedure put_Container
   (
      this : in out MediaEncodingProfile;
      value : Windows.Media.MediaProperties.ContainerEncodingProperties'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaEncodingProfile.all.put_Container (value.m_IContainerEncodingProperties.all);
   end;

   function get_Container
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.Windows.Media.MediaProperties.ContainerEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IContainerEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.ContainerEncodingProperties do
         Hr := this.m_IMediaEncodingProfile.all.get_Container (m_ComRetVal'Access);
         Retval.m_IContainerEncodingProperties := new Windows.Media.MediaProperties.IContainerEncodingProperties;
         Retval.m_IContainerEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   procedure SetAudioTracks
   (
      this : in out MediaEncodingProfile;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.SetAudioTracks (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetAudioTracks
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.GetAudioTracks (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetVideoTracks
   (
      this : in out MediaEncodingProfile;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.SetVideoTracks (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetVideoTracks
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile2, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.GetVideoTracks (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure SetTimedMetadataTracks
   (
      this : in out MediaEncodingProfile;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile3, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.SetTimedMetadataTracks (value);
      m_RefCount := m_Interface.Release;
   end;

   function GetTimedMetadataTracks
   (
      this : in out MediaEncodingProfile
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProfile3, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProfile3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProfile.all);
      Hr := m_Interface.GetTimedMetadataTracks (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body MediaEncodingSubtypes is

      function get_Heif
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics5_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics5'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Heif (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Aac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Aac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AacAdts
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AacAdts (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Ac3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ac3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AmrNb
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AmrNb (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_AmrWb
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_AmrWb (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Argb32
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Argb32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Asf
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Asf (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Avi
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Avi (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Bgra8
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bgra8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Bmp
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Bmp (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Eac3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Eac3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Float
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Float (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Gif
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Gif (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_H263
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_H263 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_H264
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_H264 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_H264Es
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_H264Es (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Hevc
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Hevc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_HevcEs
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_HevcEs (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Iyuv
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Iyuv (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Jpeg
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Jpeg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_JpegXr
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_JpegXr (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mjpg
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mjpg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mpeg
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mpeg (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mpeg1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mpeg1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mpeg2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mpeg2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mp3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mp3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Mpeg4
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Mpeg4 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Nv12
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Nv12 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Pcm
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Pcm (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Png
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Png (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Rgb24
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Rgb24 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Rgb32
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Rgb32 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Tiff
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Tiff (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wave
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wave (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wma8
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wma8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wma9
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wma9 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wmv3
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wmv3 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Wvc1
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Wvc1 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Yuy2
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Yuy2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Yv12
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Yv12 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_P010
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics4_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics4'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_P010 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Alac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Alac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Flac
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics3_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics3'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Flac (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Vp9
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Vp9 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_L8
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_L8 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_L16
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_L16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_D16
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_D16 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Pgs
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics6_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics6'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Pgs (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Srt
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics6_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics6'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Srt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_Ssa
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics6_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics6'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Ssa (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

      function get_VobSub
      return WinRt.WString is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaEncodingSubtypes");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMediaEncodingSubtypesStatics6_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.HString;
         AdaRetval        : WString;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMediaEncodingSubtypesStatics6'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_VobSub (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         AdaRetval := To_Ada (m_ComRetVal);
         Hr := WindowsDeleteString (m_ComRetVal);
         return AdaRetVal;
      end;

   end MediaEncodingSubtypes;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaPropertySet

   procedure Initialize (this : in out MediaPropertySet) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaPropertySet) is
   begin
      null;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MediaPropertySet

   function Constructor return MediaPropertySet is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.MediaPropertySet");
      m_ComRetVal  : aliased GenericObject;
   begin
      return RetVal : MediaPropertySet do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_GenericObject := new GenericObject;
            Retval.m_GenericObject.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaPropertySet

   -- Generic Interface Windows.Foundation.Collections.IMap`2<System.Guid,System.Object>
   function Lookup
   (
      this : in out MediaPropertySet;
      key : WinRt.Guid
   )
   return WinRt.IInspectable is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased IInspectable;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Lookup (key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_Size
   (
      this : in out MediaPropertySet
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.get_Size (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function HasKey
   (
      this : in out MediaPropertySet;
      key : WinRt.Guid
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.HasKey (key, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function GetView
   (
      this : in out MediaPropertySet
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.GetView (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Insert
   (
      this : in out MediaPropertySet;
      key : WinRt.Guid;
      value : WinRt.IInspectable
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Insert (key, value, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure Remove
   (
      this : in out MediaPropertySet;
      key : WinRt.Guid
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Remove (key);
      m_RefCount := m_Interface.Release;
   end;

   procedure Clear
   (
      this : in out MediaPropertySet
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : IMap_Guid_IInspectable.Kind := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_GenericIID     : aliased WinRt.IID := (1591941276, 32191, 22936, (173, 7, 84, 20, 251, 130, 86, 124 ));
      function QInterface is new Generic_QueryInterface (WinRt.GenericObject_Interface, IMap_Guid_IInspectable.Kind, m_GenericIID'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_GenericObject.all);
      Hr := m_Interface.Clear;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MediaRatio

   procedure Initialize (this : in out MediaRatio) is
   begin
      null;
   end;

   procedure Finalize (this : in out MediaRatio) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaRatio, IMediaRatio_Ptr);
   begin
      if this.m_IMediaRatio /= null then
         if this.m_IMediaRatio.all /= null then
            RefCount := this.m_IMediaRatio.all.Release;
            Free (this.m_IMediaRatio);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MediaRatio

   procedure put_Numerator
   (
      this : in out MediaRatio;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaRatio.all.put_Numerator (value);
   end;

   function get_Numerator
   (
      this : in out MediaRatio
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaRatio.all.get_Numerator (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Denominator
   (
      this : in out MediaRatio;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMediaRatio.all.put_Denominator (value);
   end;

   function get_Denominator
   (
      this : in out MediaRatio
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IMediaRatio.all.get_Denominator (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body Mpeg2ProfileIds is

      function get_Simple
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.Mpeg2ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMpeg2ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMpeg2ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Simple (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_Main_Mpeg2ProfileIds
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.Mpeg2ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMpeg2ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMpeg2ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_Main (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SignalNoiseRatioScalable
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.Mpeg2ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMpeg2ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMpeg2ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SignalNoiseRatioScalable (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_SpatiallyScalable
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.Mpeg2ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMpeg2ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMpeg2ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_SpatiallyScalable (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      function get_High_Mpeg2ProfileIds
      return WinRt.Int32 is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.Mpeg2ProfileIds");
         m_Factory        : access WinRt.Windows.Media.MediaProperties.IMpeg2ProfileIdsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased WinRt.Int32;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IMpeg2ProfileIdsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_High (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

   end Mpeg2ProfileIds;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for TimedMetadataEncodingProperties

   procedure Initialize (this : in out TimedMetadataEncodingProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out TimedMetadataEncodingProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMediaEncodingProperties, IMediaEncodingProperties_Ptr);
   begin
      if this.m_IMediaEncodingProperties /= null then
         if this.m_IMediaEncodingProperties.all /= null then
            RefCount := this.m_IMediaEncodingProperties.all.Release;
            Free (this.m_IMediaEncodingProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for TimedMetadataEncodingProperties

   function Constructor return TimedMetadataEncodingProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.TimedMetadataEncodingProperties");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
   begin
      return RetVal : TimedMetadataEncodingProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
            Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for TimedMetadataEncodingProperties

   function CreatePgs
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.TimedMetadataEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreatePgs (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
            Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateSrt
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.TimedMetadataEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSrt (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
            Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateSsa
   (
      formatUserData : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.TimedMetadataEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function Convert_formatUserData is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateSsa (WinRt.UInt32(formatUserData'Length), Convert_formatUserData (formatUserData (formatUserData'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
            Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateVobSub
   (
      formatUserData : WinRt.Byte_Array
   )
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.TimedMetadataEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function Convert_formatUserData is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_ITimedMetadataEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateVobSub (WinRt.UInt32(formatUserData'Length), Convert_formatUserData (formatUserData (formatUserData'First)'Address), m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
            Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for TimedMetadataEncodingProperties

   procedure SetFormatUserData
   (
      this : in out TimedMetadataEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_ITimedMetadataEncodingProperties'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProperties.all);
      Hr := m_Interface.SetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   procedure GetFormatUserData
   (
      this : in out TimedMetadataEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_ITimedMetadataEncodingProperties'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IMediaEncodingProperties.all);
      Hr := m_Interface.GetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   function Copy
   (
      this : in out TimedMetadataEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.ITimedMetadataEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_ITimedMetadataEncodingProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.TimedMetadataEncodingProperties do
         m_Interface := QInterface (this.m_IMediaEncodingProperties.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IMediaEncodingProperties := new Windows.Media.MediaProperties.IMediaEncodingProperties;
         Retval.m_IMediaEncodingProperties.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out TimedMetadataEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaPropertySet do
         Hr := this.m_IMediaEncodingProperties.all.get_Properties (m_ComRetVal'Access);
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out TimedMetadataEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaEncodingProperties.all.get_Type (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtype
   (
      this : in out TimedMetadataEncodingProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMediaEncodingProperties.all.put_Subtype (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtype
   (
      this : in out TimedMetadataEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMediaEncodingProperties.all.get_Subtype (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for VideoEncodingProperties

   procedure Initialize (this : in out VideoEncodingProperties) is
   begin
      null;
   end;

   procedure Finalize (this : in out VideoEncodingProperties) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IVideoEncodingProperties, IVideoEncodingProperties_Ptr);
   begin
      if this.m_IVideoEncodingProperties /= null then
         if this.m_IVideoEncodingProperties.all /= null then
            RefCount := this.m_IVideoEncodingProperties.all.Release;
            Free (this.m_IVideoEncodingProperties);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for VideoEncodingProperties

   function Constructor return VideoEncodingProperties is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.MediaProperties.VideoEncodingProperties");
      m_ComRetVal  : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : VideoEncodingProperties do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
            Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for VideoEncodingProperties

   function CreateHevc
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.VideoEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics2_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEncodingPropertiesStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateHevc (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
            Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateH264
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.VideoEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateH264 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
            Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateMpeg2
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.VideoEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateMpeg2 (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
            Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function CreateUncompressed
   (
      subtype_x : WinRt.WString;
      width : WinRt.UInt32;
      height : WinRt.UInt32
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Media.MediaProperties.VideoEncodingProperties");
      m_Factory        : access WinRt.Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
      HStr_subtype_x : WinRt.HString := To_HString (subtype_x);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         Hr := RoGetActivationFactory (m_hString, IID_IVideoEncodingPropertiesStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateUncompressed (HStr_subtype_x, width, height, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
            Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_subtype_x);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for VideoEncodingProperties

   procedure put_Bitrate
   (
      this : in out VideoEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoEncodingProperties.all.put_Bitrate (value);
   end;

   function get_Bitrate
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVideoEncodingProperties.all.get_Bitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Width
   (
      this : in out VideoEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoEncodingProperties.all.put_Width (value);
   end;

   function get_Width
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVideoEncodingProperties.all.get_Width (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Height
   (
      this : in out VideoEncodingProperties;
      value : WinRt.UInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IVideoEncodingProperties.all.put_Height (value);
   end;

   function get_Height
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IVideoEncodingProperties.all.get_Height (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_FrameRate
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_IVideoEncodingProperties.all.get_FrameRate (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_PixelAspectRatio
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaRatio'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IMediaRatio;
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaRatio do
         Hr := this.m_IVideoEncodingProperties.all.get_PixelAspectRatio (m_ComRetVal'Access);
         Retval.m_IMediaRatio := new Windows.Media.MediaProperties.IMediaRatio;
         Retval.m_IMediaRatio.all := m_ComRetVal;
      end return;
   end;

   function get_Properties
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.MediaPropertySet'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.MediaPropertySet do
         m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
         Hr := m_Interface.get_Properties (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_GenericObject := new GenericObject;
         Retval.m_GenericObject.all := m_ComRetVal;
      end return;
   end;

   function get_Type
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.get_Type (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Subtype
   (
      this : in out VideoEncodingProperties;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.put_Subtype (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Subtype
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IMediaEncodingProperties, WinRt.Windows.Media.MediaProperties.IID_IMediaEncodingProperties'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.get_Subtype (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure SetFormatUserData
   (
      this : in out VideoEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties2'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.SetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   procedure GetFormatUserData
   (
      this : in out VideoEncodingProperties;
      value : WinRt.Byte_Array
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties2'Unchecked_Access);
      function Convert_value is new Ada.Unchecked_Conversion (Address, WinRt.Byte_Ptr);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.GetFormatUserData (WinRt.UInt32(value'Length), Convert_value (value (value'First)'Address));
      m_RefCount := m_Interface.Release;
   end;

   procedure put_ProfileId
   (
      this : in out VideoEncodingProperties;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.put_ProfileId (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_ProfileId
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties2, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.get_ProfileId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_StereoscopicVideoPackingMode
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.StereoscopicVideoPackingMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.StereoscopicVideoPackingMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties3, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.get_StereoscopicVideoPackingMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_SphericalVideoFrameFormat
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.SphericalVideoFrameFormat is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.SphericalVideoFrameFormat;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties4, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
      Hr := m_Interface.get_SphericalVideoFrameFormat (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function Copy
   (
      this : in out VideoEncodingProperties
   )
   return WinRt.Windows.Media.MediaProperties.VideoEncodingProperties'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.MediaProperties.IVideoEncodingProperties;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties_Interface, WinRt.Windows.Media.MediaProperties.IVideoEncodingProperties5, WinRt.Windows.Media.MediaProperties.IID_IVideoEncodingProperties5'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.Media.MediaProperties.VideoEncodingProperties do
         m_Interface := QInterface (this.m_IVideoEncodingProperties.all);
         Hr := m_Interface.Copy (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IVideoEncodingProperties := new Windows.Media.MediaProperties.IVideoEncodingProperties;
         Retval.m_IVideoEncodingProperties.all := m_ComRetVal;
      end return;
   end;

end;

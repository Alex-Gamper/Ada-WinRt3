--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Graphics.Printing;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.UI.Xaml.Printing is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AddPagesEventArgs

   procedure Initialize (this : in out AddPagesEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AddPagesEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAddPagesEventArgs, IAddPagesEventArgs_Ptr);
   begin
      if this.m_IAddPagesEventArgs /= null then
         if this.m_IAddPagesEventArgs.all /= null then
            RefCount := this.m_IAddPagesEventArgs.all.Release;
            Free (this.m_IAddPagesEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AddPagesEventArgs

   function Constructor return AddPagesEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Printing.AddPagesEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Printing.IAddPagesEventArgs;
   begin
      return RetVal : AddPagesEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAddPagesEventArgs := new Windows.UI.Xaml.Printing.IAddPagesEventArgs;
            Retval.m_IAddPagesEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AddPagesEventArgs

   function get_PrintTaskOptions
   (
      this : in out AddPagesEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskOptionsCore;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskOptions do
         Hr := this.m_IAddPagesEventArgs.all.get_PrintTaskOptions (m_ComRetVal'Access);
         Retval.m_IPrintTaskOptionsCore := new Windows.Graphics.Printing.IPrintTaskOptionsCore;
         Retval.m_IPrintTaskOptionsCore.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Delegate AddPagesEventHandler

   function Invoke
   (
      this : access AddPagesEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Printing.IAddPagesEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GetPreviewPageEventArgs

   procedure Initialize (this : in out GetPreviewPageEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out GetPreviewPageEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGetPreviewPageEventArgs, IGetPreviewPageEventArgs_Ptr);
   begin
      if this.m_IGetPreviewPageEventArgs /= null then
         if this.m_IGetPreviewPageEventArgs.all /= null then
            RefCount := this.m_IGetPreviewPageEventArgs.all.Release;
            Free (this.m_IGetPreviewPageEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for GetPreviewPageEventArgs

   function Constructor return GetPreviewPageEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Printing.GetPreviewPageEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Printing.IGetPreviewPageEventArgs;
   begin
      return RetVal : GetPreviewPageEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IGetPreviewPageEventArgs := new Windows.UI.Xaml.Printing.IGetPreviewPageEventArgs;
            Retval.m_IGetPreviewPageEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GetPreviewPageEventArgs

   function get_PageNumber
   (
      this : in out GetPreviewPageEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IGetPreviewPageEventArgs.all.get_PageNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate GetPreviewPageEventHandler

   function Invoke
   (
      this : access GetPreviewPageEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Printing.IGetPreviewPageEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PaginateEventArgs

   procedure Initialize (this : in out PaginateEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out PaginateEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPaginateEventArgs, IPaginateEventArgs_Ptr);
   begin
      if this.m_IPaginateEventArgs /= null then
         if this.m_IPaginateEventArgs.all /= null then
            RefCount := this.m_IPaginateEventArgs.all.Release;
            Free (this.m_IPaginateEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PaginateEventArgs

   function Constructor return PaginateEventArgs is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Printing.PaginateEventArgs");
      m_ComRetVal  : aliased Windows.UI.Xaml.Printing.IPaginateEventArgs;
   begin
      return RetVal : PaginateEventArgs do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IPaginateEventArgs := new Windows.UI.Xaml.Printing.IPaginateEventArgs;
            Retval.m_IPaginateEventArgs.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PaginateEventArgs

   function get_PrintTaskOptions
   (
      this : in out PaginateEventArgs
   )
   return WinRt.Windows.Graphics.Printing.PrintTaskOptions'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintTaskOptionsCore;
   begin
      return RetVal : WinRt.Windows.Graphics.Printing.PrintTaskOptions do
         Hr := this.m_IPaginateEventArgs.all.get_PrintTaskOptions (m_ComRetVal'Access);
         Retval.m_IPrintTaskOptionsCore := new Windows.Graphics.Printing.IPrintTaskOptionsCore;
         Retval.m_IPrintTaskOptionsCore.all := m_ComRetVal;
      end return;
   end;

   function get_CurrentPreviewPageNumber
   (
      this : in out PaginateEventArgs
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IPaginateEventArgs.all.get_CurrentPreviewPageNumber (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Delegate PaginateEventHandler

   function Invoke
   (
      this : access PaginateEventHandler_Delegate;
      sender : WinRt.IInspectable;
      e : Windows.UI.Xaml.Printing.IPaginateEventArgs
   )
   return WinRt.Hresult is
      Hr : WinRt.HResult := S_OK;
   begin
      this.Callback (sender, e);
      return Hr;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for PrintDocument

   procedure Initialize (this : in out PrintDocument) is
   begin
      null;
   end;

   procedure Finalize (this : in out PrintDocument) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IPrintDocument, IPrintDocument_Ptr);
   begin
      if this.m_IPrintDocument /= null then
         if this.m_IPrintDocument.all /= null then
            RefCount := this.m_IPrintDocument.all.Release;
            Free (this.m_IPrintDocument);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for PrintDocument

   function Constructor
   (
      baseInterface : WinRt.IInspectable;
      innerInterface : access WinRt.IInspectable
   )
   return PrintDocument is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.UI.Xaml.Printing.PrintDocument");
      m_Factory    : access IPrintDocumentFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.UI.Xaml.Printing.IPrintDocument;
   begin
      return RetVal : PrintDocument do
         Hr := RoGetActivationFactory (m_hString, IID_IPrintDocumentFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateInstance (baseInterface, innerInterface, m_ComRetVal'Access);
            Retval.m_IPrintDocument := new Windows.UI.Xaml.Printing.IPrintDocument;
            Retval.m_IPrintDocument.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for PrintDocument

   function get_DocumentSourceProperty
   return WinRt.Windows.UI.Xaml.DependencyProperty is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.UI.Xaml.Printing.PrintDocument");
      m_Factory        : access WinRt.Windows.UI.Xaml.Printing.IPrintDocumentStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.UI.Xaml.IDependencyProperty;
   begin
      return RetVal : WinRt.Windows.UI.Xaml.DependencyProperty do
         Hr := RoGetActivationFactory (m_hString, IID_IPrintDocumentStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.get_DocumentSourceProperty (m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            Retval.m_IDependencyProperty := new Windows.UI.Xaml.IDependencyProperty;
            Retval.m_IDependencyProperty.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for PrintDocument

   function get_DocumentSource
   (
      this : in out PrintDocument
   )
   return WinRt.Windows.Graphics.Printing.IPrintDocumentSource is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.Printing.IPrintDocumentSource;
   begin
      Hr := this.m_IPrintDocument.all.get_DocumentSource (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Paginate
   (
      this : in out PrintDocument;
      handler : Windows.UI.Xaml.Printing.PaginateEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintDocument.all.add_Paginate (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Paginate
   (
      this : in out PrintDocument;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.remove_Paginate (token);
   end;

   function add_GetPreviewPage
   (
      this : in out PrintDocument;
      handler : Windows.UI.Xaml.Printing.GetPreviewPageEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintDocument.all.add_GetPreviewPage (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_GetPreviewPage
   (
      this : in out PrintDocument;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.remove_GetPreviewPage (token);
   end;

   function add_AddPages
   (
      this : in out PrintDocument;
      handler : Windows.UI.Xaml.Printing.AddPagesEventHandler
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IPrintDocument.all.add_AddPages (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_AddPages
   (
      this : in out PrintDocument;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.remove_AddPages (token);
   end;

   procedure AddPage
   (
      this : in out PrintDocument;
      pageVisual : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.AddPage (pageVisual.m_IUIElement.all);
   end;

   procedure AddPagesComplete
   (
      this : in out PrintDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.AddPagesComplete;
   end;

   procedure SetPreviewPageCount
   (
      this : in out PrintDocument;
      count : WinRt.Int32;
      type_x : Windows.UI.Xaml.Printing.PreviewPageCountType
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.SetPreviewPageCount (count, type_x);
   end;

   procedure SetPreviewPage
   (
      this : in out PrintDocument;
      pageNumber : WinRt.Int32;
      pageVisual : Windows.UI.Xaml.UIElement'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.SetPreviewPage (pageNumber, pageVisual.m_IUIElement.all);
   end;

   procedure InvalidatePreview
   (
      this : in out PrintDocument
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IPrintDocument.all.InvalidatePreview;
   end;

end;

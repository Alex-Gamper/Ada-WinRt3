--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.ApplicationModel.Core;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Graphics;
with WinRt.Windows.Media.Core;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.Miracast is

   package IAsyncOperation_MiracastReceiverSettings is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverSettings);
   package AsyncOperationCompletedHandler_MiracastReceiverSettings is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverSettings);

   package IAsyncOperation_MiracastReceiverApplySettingsResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverApplySettingsResult);
   package AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverApplySettingsResult);

   package IAsyncOperation_MiracastReceiverStatus is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverStatus);
   package AsyncOperationCompletedHandler_MiracastReceiverStatus is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverStatus);

   package IAsyncOperation_MiracastReceiverSession is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverSession);
   package AsyncOperationCompletedHandler_MiracastReceiverSession is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverSession);

   package IAsyncOperation_MiracastReceiverSessionStartResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverSessionStartResult);
   package AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverSessionStartResult);

   package IAsyncOperation_MiracastReceiverVideoStreamSettings is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings);
   package AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiver

   procedure Initialize (this : in out MiracastReceiver) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiver) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiver, IMiracastReceiver_Ptr);
   begin
      if this.m_IMiracastReceiver /= null then
         if this.m_IMiracastReceiver.all /= null then
            RefCount := this.m_IMiracastReceiver.all.Release;
            Free (this.m_IMiracastReceiver);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for MiracastReceiver

   function Constructor return MiracastReceiver is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.Miracast.MiracastReceiver");
      m_ComRetVal  : aliased Windows.Media.Miracast.IMiracastReceiver;
   begin
      return RetVal : MiracastReceiver do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IMiracastReceiver := new Windows.Media.Miracast.IMiracastReceiver;
            Retval.m_IMiracastReceiver.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiver

   function GetDefaultSettings
   (
      this : in out MiracastReceiver
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverSettings;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSettings do
         Hr := this.m_IMiracastReceiver.all.GetDefaultSettings (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverSettings := new Windows.Media.Miracast.IMiracastReceiverSettings;
         Retval.m_IMiracastReceiverSettings.all := m_ComRetVal;
      end return;
   end;

   function GetCurrentSettings
   (
      this : in out MiracastReceiver
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverSettings;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSettings do
         Hr := this.m_IMiracastReceiver.all.GetCurrentSettings (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverSettings := new Windows.Media.Miracast.IMiracastReceiverSettings;
         Retval.m_IMiracastReceiverSettings.all := m_ComRetVal;
      end return;
   end;

   function GetCurrentSettingsAsync
   (
      this : in out MiracastReceiver
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverSettings.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverSettings.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverSettings;
      m_IID            : aliased WinRt.IID := (2452378919, 17152, 22933, (141, 220, 146, 61, 212, 186, 112, 16 )); -- Windows.Media.Miracast.MiracastReceiverSettings;
      m_HandlerIID     : aliased WinRt.IID := (1586088456, 16609, 21238, (134, 73, 4, 132, 30, 1, 130, 13 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverSettings.Kind := new AsyncOperationCompletedHandler_MiracastReceiverSettings.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverSettings.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverSettings.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverSettings.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverSettings.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSettings do
         Hr := this.m_IMiracastReceiver.all.GetCurrentSettingsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverSettings := new Windows.Media.Miracast.IMiracastReceiverSettings;
                  Retval.m_IMiracastReceiverSettings.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function DisconnectAllAndApplySettings
   (
      this : in out MiracastReceiver;
      settings : Windows.Media.Miracast.MiracastReceiverSettings'Class
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverApplySettingsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverApplySettingsResult;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverApplySettingsResult do
         Hr := this.m_IMiracastReceiver.all.DisconnectAllAndApplySettings (settings.m_IMiracastReceiverSettings.all, m_ComRetVal'Access);
         Retval.m_IMiracastReceiverApplySettingsResult := new Windows.Media.Miracast.IMiracastReceiverApplySettingsResult;
         Retval.m_IMiracastReceiverApplySettingsResult.all := m_ComRetVal;
      end return;
   end;

   function DisconnectAllAndApplySettingsAsync
   (
      this : in out MiracastReceiver;
      settings : Windows.Media.Miracast.MiracastReceiverSettings'Class
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverApplySettingsResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverApplySettingsResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverApplySettingsResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverApplySettingsResult;
      m_IID            : aliased WinRt.IID := (1877766987, 33341, 23302, (173, 129, 4, 85, 249, 127, 85, 111 )); -- Windows.Media.Miracast.MiracastReceiverApplySettingsResult;
      m_HandlerIID     : aliased WinRt.IID := (2949334388, 31427, 22250, (154, 106, 207, 83, 95, 12, 240, 30 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult.Kind := new AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverApplySettingsResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverApplySettingsResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverApplySettingsResult do
         Hr := this.m_IMiracastReceiver.all.DisconnectAllAndApplySettingsAsync (settings.m_IMiracastReceiverSettings.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverApplySettingsResult := new Windows.Media.Miracast.IMiracastReceiverApplySettingsResult;
                  Retval.m_IMiracastReceiverApplySettingsResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetStatus
   (
      this : in out MiracastReceiver
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverStatus;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverStatus do
         Hr := this.m_IMiracastReceiver.all.GetStatus (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverStatus := new Windows.Media.Miracast.IMiracastReceiverStatus;
         Retval.m_IMiracastReceiverStatus.all := m_ComRetVal;
      end return;
   end;

   function GetStatusAsync
   (
      this : in out MiracastReceiver
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverStatus.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverStatus.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverStatus;
      m_IID            : aliased WinRt.IID := (2854642846, 9821, 24185, (142, 239, 167, 254, 137, 77, 201, 242 )); -- Windows.Media.Miracast.MiracastReceiverStatus;
      m_HandlerIID     : aliased WinRt.IID := (2185491134, 33443, 21301, (179, 201, 174, 101, 59, 59, 105, 92 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverStatus.Kind := new AsyncOperationCompletedHandler_MiracastReceiverStatus.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverStatus.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverStatus.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverStatus.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverStatus.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverStatus do
         Hr := this.m_IMiracastReceiver.all.GetStatusAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverStatus := new Windows.Media.Miracast.IMiracastReceiverStatus;
                  Retval.m_IMiracastReceiverStatus.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function add_StatusChanged
   (
      this : in out MiracastReceiver;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiver.all.add_StatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out MiracastReceiver;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiver.all.remove_StatusChanged (token);
   end;

   function CreateSession
   (
      this : in out MiracastReceiver;
      view : Windows.ApplicationModel.Core.CoreApplicationView'Class
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverSession;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSession do
         Hr := this.m_IMiracastReceiver.all.CreateSession (view.m_ICoreApplicationView.all, m_ComRetVal'Access);
         Retval.m_IMiracastReceiverSession := new Windows.Media.Miracast.IMiracastReceiverSession;
         Retval.m_IMiracastReceiverSession.all := m_ComRetVal;
      end return;
   end;

   function CreateSessionAsync
   (
      this : in out MiracastReceiver;
      view : Windows.ApplicationModel.Core.CoreApplicationView'Class
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSession'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverSession.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverSession.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverSession;
      m_IID            : aliased WinRt.IID := (1522041057, 11277, 23855, (191, 149, 3, 117, 21, 98, 74, 140 )); -- Windows.Media.Miracast.MiracastReceiverSession;
      m_HandlerIID     : aliased WinRt.IID := (2638416075, 19407, 23323, (184, 179, 4, 132, 222, 159, 53, 55 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverSession.Kind := new AsyncOperationCompletedHandler_MiracastReceiverSession.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverSession.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverSession.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverSession.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverSession.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSession do
         Hr := this.m_IMiracastReceiver.all.CreateSessionAsync (view.m_ICoreApplicationView.all, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverSession := new Windows.Media.Miracast.IMiracastReceiverSession;
                  Retval.m_IMiracastReceiverSession.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure ClearKnownTransmitters
   (
      this : in out MiracastReceiver
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiver.all.ClearKnownTransmitters;
   end;

   procedure RemoveKnownTransmitter
   (
      this : in out MiracastReceiver;
      transmitter : Windows.Media.Miracast.MiracastTransmitter'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiver.all.RemoveKnownTransmitter (transmitter.m_IMiracastTransmitter.all);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverApplySettingsResult

   procedure Initialize (this : in out MiracastReceiverApplySettingsResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverApplySettingsResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverApplySettingsResult, IMiracastReceiverApplySettingsResult_Ptr);
   begin
      if this.m_IMiracastReceiverApplySettingsResult /= null then
         if this.m_IMiracastReceiverApplySettingsResult.all /= null then
            RefCount := this.m_IMiracastReceiverApplySettingsResult.all.Release;
            Free (this.m_IMiracastReceiverApplySettingsResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverApplySettingsResult

   function get_Status
   (
      this : in out MiracastReceiverApplySettingsResult
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverApplySettingsStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverApplySettingsStatus;
   begin
      Hr := this.m_IMiracastReceiverApplySettingsResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out MiracastReceiverApplySettingsResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMiracastReceiverApplySettingsResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverConnection

   procedure Initialize (this : in out MiracastReceiverConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverConnection, IMiracastReceiverConnection_Ptr);
   begin
      if this.m_IMiracastReceiverConnection /= null then
         if this.m_IMiracastReceiverConnection.all /= null then
            RefCount := this.m_IMiracastReceiverConnection.all.Release;
            Free (this.m_IMiracastReceiverConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverConnection

   procedure Disconnect
   (
      this : in out MiracastReceiverConnection;
      reason : Windows.Media.Miracast.MiracastReceiverDisconnectReason
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverConnection.all.Disconnect (reason);
   end;

   procedure Disconnect
   (
      this : in out MiracastReceiverConnection;
      reason : Windows.Media.Miracast.MiracastReceiverDisconnectReason;
      message : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_message : WinRt.HString := To_HString (message);
   begin
      Hr := this.m_IMiracastReceiverConnection.all.Disconnect (reason, HStr_message);
      Hr := WindowsDeleteString (HStr_message);
   end;

   procedure Pause
   (
      this : in out MiracastReceiverConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverConnection.all.Pause;
   end;

   procedure PauseAsync
   (
      this : in out MiracastReceiverConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMiracastReceiverConnection.all.PauseAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   procedure Resume
   (
      this : in out MiracastReceiverConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverConnection.all.Resume;
   end;

   procedure ResumeAsync
   (
      this : in out MiracastReceiverConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMiracastReceiverConnection.all.ResumeAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_Transmitter
   (
      this : in out MiracastReceiverConnection
   )
   return WinRt.Windows.Media.Miracast.MiracastTransmitter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastTransmitter;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastTransmitter do
         Hr := this.m_IMiracastReceiverConnection.all.get_Transmitter (m_ComRetVal'Access);
         Retval.m_IMiracastTransmitter := new Windows.Media.Miracast.IMiracastTransmitter;
         Retval.m_IMiracastTransmitter.all := m_ComRetVal;
      end return;
   end;

   function get_InputDevices
   (
      this : in out MiracastReceiverConnection
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverInputDevices'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverInputDevices;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverInputDevices do
         Hr := this.m_IMiracastReceiverConnection.all.get_InputDevices (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverInputDevices := new Windows.Media.Miracast.IMiracastReceiverInputDevices;
         Retval.m_IMiracastReceiverInputDevices.all := m_ComRetVal;
      end return;
   end;

   function get_CursorImageChannel
   (
      this : in out MiracastReceiverConnection
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverCursorImageChannel'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverCursorImageChannel;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverCursorImageChannel do
         Hr := this.m_IMiracastReceiverConnection.all.get_CursorImageChannel (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverCursorImageChannel := new Windows.Media.Miracast.IMiracastReceiverCursorImageChannel;
         Retval.m_IMiracastReceiverCursorImageChannel.all := m_ComRetVal;
      end return;
   end;

   function get_StreamControl
   (
      this : in out MiracastReceiverConnection
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverStreamControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverStreamControl;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverStreamControl do
         Hr := this.m_IMiracastReceiverConnection.all.get_StreamControl (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverStreamControl := new Windows.Media.Miracast.IMiracastReceiverStreamControl;
         Retval.m_IMiracastReceiverStreamControl.all := m_ComRetVal;
      end return;
   end;

   procedure Close
   (
      this : in out MiracastReceiverConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Miracast.IMiracastReceiverConnection_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMiracastReceiverConnection.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverConnectionCreatedEventArgs

   procedure Initialize (this : in out MiracastReceiverConnectionCreatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverConnectionCreatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverConnectionCreatedEventArgs, IMiracastReceiverConnectionCreatedEventArgs_Ptr);
   begin
      if this.m_IMiracastReceiverConnectionCreatedEventArgs /= null then
         if this.m_IMiracastReceiverConnectionCreatedEventArgs.all /= null then
            RefCount := this.m_IMiracastReceiverConnectionCreatedEventArgs.all.Release;
            Free (this.m_IMiracastReceiverConnectionCreatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverConnectionCreatedEventArgs

   function get_Connection
   (
      this : in out MiracastReceiverConnectionCreatedEventArgs
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverConnection;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverConnection do
         Hr := this.m_IMiracastReceiverConnectionCreatedEventArgs.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverConnection := new Windows.Media.Miracast.IMiracastReceiverConnection;
         Retval.m_IMiracastReceiverConnection.all := m_ComRetVal;
      end return;
   end;

   function get_Pin
   (
      this : in out MiracastReceiverConnectionCreatedEventArgs
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastReceiverConnectionCreatedEventArgs.all.get_Pin (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeferral
   (
      this : in out MiracastReceiverConnectionCreatedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMiracastReceiverConnectionCreatedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverCursorImageChannel

   procedure Initialize (this : in out MiracastReceiverCursorImageChannel) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverCursorImageChannel) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverCursorImageChannel, IMiracastReceiverCursorImageChannel_Ptr);
   begin
      if this.m_IMiracastReceiverCursorImageChannel /= null then
         if this.m_IMiracastReceiverCursorImageChannel.all /= null then
            RefCount := this.m_IMiracastReceiverCursorImageChannel.all.Release;
            Free (this.m_IMiracastReceiverCursorImageChannel);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverCursorImageChannel

   function get_IsEnabled
   (
      this : in out MiracastReceiverCursorImageChannel
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxImageSize
   (
      this : in out MiracastReceiverCursorImageChannel
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.get_MaxImageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Position
   (
      this : in out MiracastReceiverCursorImageChannel
   )
   return WinRt.Windows.Graphics.PointInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.PointInt32;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.get_Position (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ImageStream
   (
      this : in out MiracastReceiverCursorImageChannel
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamWithContentType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamWithContentType;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.get_ImageStream (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_ImageStreamChanged
   (
      this : in out MiracastReceiverCursorImageChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.add_ImageStreamChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ImageStreamChanged
   (
      this : in out MiracastReceiverCursorImageChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.remove_ImageStreamChanged (token);
   end;

   function add_PositionChanged
   (
      this : in out MiracastReceiverCursorImageChannel;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.add_PositionChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_PositionChanged
   (
      this : in out MiracastReceiverCursorImageChannel;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannel.all.remove_PositionChanged (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverCursorImageChannelSettings

   procedure Initialize (this : in out MiracastReceiverCursorImageChannelSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverCursorImageChannelSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverCursorImageChannelSettings, IMiracastReceiverCursorImageChannelSettings_Ptr);
   begin
      if this.m_IMiracastReceiverCursorImageChannelSettings /= null then
         if this.m_IMiracastReceiverCursorImageChannelSettings.all /= null then
            RefCount := this.m_IMiracastReceiverCursorImageChannelSettings.all.Release;
            Free (this.m_IMiracastReceiverCursorImageChannelSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverCursorImageChannelSettings

   function get_IsEnabled
   (
      this : in out MiracastReceiverCursorImageChannelSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannelSettings.all.get_IsEnabled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsEnabled
   (
      this : in out MiracastReceiverCursorImageChannelSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannelSettings.all.put_IsEnabled (value);
   end;

   function get_MaxImageSize
   (
      this : in out MiracastReceiverCursorImageChannelSettings
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannelSettings.all.get_MaxImageSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxImageSize
   (
      this : in out MiracastReceiverCursorImageChannelSettings;
      value : Windows.Graphics.SizeInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverCursorImageChannelSettings.all.put_MaxImageSize (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverDisconnectedEventArgs

   procedure Initialize (this : in out MiracastReceiverDisconnectedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverDisconnectedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverDisconnectedEventArgs, IMiracastReceiverDisconnectedEventArgs_Ptr);
   begin
      if this.m_IMiracastReceiverDisconnectedEventArgs /= null then
         if this.m_IMiracastReceiverDisconnectedEventArgs.all /= null then
            RefCount := this.m_IMiracastReceiverDisconnectedEventArgs.all.Release;
            Free (this.m_IMiracastReceiverDisconnectedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverDisconnectedEventArgs

   function get_Connection
   (
      this : in out MiracastReceiverDisconnectedEventArgs
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverConnection;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverConnection do
         Hr := this.m_IMiracastReceiverDisconnectedEventArgs.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverConnection := new Windows.Media.Miracast.IMiracastReceiverConnection;
         Retval.m_IMiracastReceiverConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverGameControllerDevice

   procedure Initialize (this : in out MiracastReceiverGameControllerDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverGameControllerDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverGameControllerDevice, IMiracastReceiverGameControllerDevice_Ptr);
   begin
      if this.m_IMiracastReceiverGameControllerDevice /= null then
         if this.m_IMiracastReceiverGameControllerDevice.all /= null then
            RefCount := this.m_IMiracastReceiverGameControllerDevice.all.Release;
            Free (this.m_IMiracastReceiverGameControllerDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverGameControllerDevice

   function get_TransmitInput
   (
      this : in out MiracastReceiverGameControllerDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.get_TransmitInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransmitInput
   (
      this : in out MiracastReceiverGameControllerDevice;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.put_TransmitInput (value);
   end;

   function get_IsRequestedByTransmitter
   (
      this : in out MiracastReceiverGameControllerDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.get_IsRequestedByTransmitter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTransmittingInput
   (
      this : in out MiracastReceiverGameControllerDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.get_IsTransmittingInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Mode
   (
      this : in out MiracastReceiverGameControllerDevice
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverGameControllerDeviceUsageMode is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverGameControllerDeviceUsageMode;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.get_Mode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Mode
   (
      this : in out MiracastReceiverGameControllerDevice;
      value : Windows.Media.Miracast.MiracastReceiverGameControllerDeviceUsageMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.put_Mode (value);
   end;

   function add_Changed
   (
      this : in out MiracastReceiverGameControllerDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.add_Changed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Changed
   (
      this : in out MiracastReceiverGameControllerDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverGameControllerDevice.all.remove_Changed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverInputDevices

   procedure Initialize (this : in out MiracastReceiverInputDevices) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverInputDevices) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverInputDevices, IMiracastReceiverInputDevices_Ptr);
   begin
      if this.m_IMiracastReceiverInputDevices /= null then
         if this.m_IMiracastReceiverInputDevices.all /= null then
            RefCount := this.m_IMiracastReceiverInputDevices.all.Release;
            Free (this.m_IMiracastReceiverInputDevices);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverInputDevices

   function get_Keyboard
   (
      this : in out MiracastReceiverInputDevices
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverKeyboardDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverKeyboardDevice;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverKeyboardDevice do
         Hr := this.m_IMiracastReceiverInputDevices.all.get_Keyboard (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverKeyboardDevice := new Windows.Media.Miracast.IMiracastReceiverKeyboardDevice;
         Retval.m_IMiracastReceiverKeyboardDevice.all := m_ComRetVal;
      end return;
   end;

   function get_GameController
   (
      this : in out MiracastReceiverInputDevices
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverGameControllerDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverGameControllerDevice;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverGameControllerDevice do
         Hr := this.m_IMiracastReceiverInputDevices.all.get_GameController (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverGameControllerDevice := new Windows.Media.Miracast.IMiracastReceiverGameControllerDevice;
         Retval.m_IMiracastReceiverGameControllerDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverKeyboardDevice

   procedure Initialize (this : in out MiracastReceiverKeyboardDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverKeyboardDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverKeyboardDevice, IMiracastReceiverKeyboardDevice_Ptr);
   begin
      if this.m_IMiracastReceiverKeyboardDevice /= null then
         if this.m_IMiracastReceiverKeyboardDevice.all /= null then
            RefCount := this.m_IMiracastReceiverKeyboardDevice.all.Release;
            Free (this.m_IMiracastReceiverKeyboardDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverKeyboardDevice

   function get_TransmitInput
   (
      this : in out MiracastReceiverKeyboardDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.get_TransmitInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_TransmitInput
   (
      this : in out MiracastReceiverKeyboardDevice;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.put_TransmitInput (value);
   end;

   function get_IsRequestedByTransmitter
   (
      this : in out MiracastReceiverKeyboardDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.get_IsRequestedByTransmitter (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsTransmittingInput
   (
      this : in out MiracastReceiverKeyboardDevice
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.get_IsTransmittingInput (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function add_Changed
   (
      this : in out MiracastReceiverKeyboardDevice;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.add_Changed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Changed
   (
      this : in out MiracastReceiverKeyboardDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverKeyboardDevice.all.remove_Changed (token);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverMediaSourceCreatedEventArgs

   procedure Initialize (this : in out MiracastReceiverMediaSourceCreatedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverMediaSourceCreatedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverMediaSourceCreatedEventArgs, IMiracastReceiverMediaSourceCreatedEventArgs_Ptr);
   begin
      if this.m_IMiracastReceiverMediaSourceCreatedEventArgs /= null then
         if this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all /= null then
            RefCount := this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all.Release;
            Free (this.m_IMiracastReceiverMediaSourceCreatedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverMediaSourceCreatedEventArgs

   function get_Connection
   (
      this : in out MiracastReceiverMediaSourceCreatedEventArgs
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverConnection;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverConnection do
         Hr := this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverConnection := new Windows.Media.Miracast.IMiracastReceiverConnection;
         Retval.m_IMiracastReceiverConnection.all := m_ComRetVal;
      end return;
   end;

   function get_MediaSource
   (
      this : in out MiracastReceiverMediaSourceCreatedEventArgs
   )
   return WinRt.Windows.Media.Core.MediaSource'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Core.IMediaSource2;
   begin
      return RetVal : WinRt.Windows.Media.Core.MediaSource do
         Hr := this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all.get_MediaSource (m_ComRetVal'Access);
         Retval.m_IMediaSource2 := new Windows.Media.Core.IMediaSource2;
         Retval.m_IMediaSource2.all := m_ComRetVal;
      end return;
   end;

   function get_CursorImageChannelSettings
   (
      this : in out MiracastReceiverMediaSourceCreatedEventArgs
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverCursorImageChannelSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverCursorImageChannelSettings;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverCursorImageChannelSettings do
         Hr := this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all.get_CursorImageChannelSettings (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverCursorImageChannelSettings := new Windows.Media.Miracast.IMiracastReceiverCursorImageChannelSettings;
         Retval.m_IMiracastReceiverCursorImageChannelSettings.all := m_ComRetVal;
      end return;
   end;

   function GetDeferral
   (
      this : in out MiracastReceiverMediaSourceCreatedEventArgs
   )
   return WinRt.Windows.Foundation.Deferral'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.IDeferral;
   begin
      return RetVal : WinRt.Windows.Foundation.Deferral do
         Hr := this.m_IMiracastReceiverMediaSourceCreatedEventArgs.all.GetDeferral (m_ComRetVal'Access);
         Retval.m_IDeferral := new Windows.Foundation.IDeferral;
         Retval.m_IDeferral.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverSession

   procedure Initialize (this : in out MiracastReceiverSession) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverSession) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverSession, IMiracastReceiverSession_Ptr);
   begin
      if this.m_IMiracastReceiverSession /= null then
         if this.m_IMiracastReceiverSession.all /= null then
            RefCount := this.m_IMiracastReceiverSession.all.Release;
            Free (this.m_IMiracastReceiverSession);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverSession

   function add_ConnectionCreated
   (
      this : in out MiracastReceiverSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverSession.all.add_ConnectionCreated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ConnectionCreated
   (
      this : in out MiracastReceiverSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSession.all.remove_ConnectionCreated (token);
   end;

   function add_MediaSourceCreated
   (
      this : in out MiracastReceiverSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverSession.all.add_MediaSourceCreated (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_MediaSourceCreated
   (
      this : in out MiracastReceiverSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSession.all.remove_MediaSourceCreated (token);
   end;

   function add_Disconnected
   (
      this : in out MiracastReceiverSession;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IMiracastReceiverSession.all.add_Disconnected (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Disconnected
   (
      this : in out MiracastReceiverSession;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSession.all.remove_Disconnected (token);
   end;

   function get_AllowConnectionTakeover
   (
      this : in out MiracastReceiverSession
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverSession.all.get_AllowConnectionTakeover (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowConnectionTakeover
   (
      this : in out MiracastReceiverSession;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSession.all.put_AllowConnectionTakeover (value);
   end;

   function get_MaxSimultaneousConnections
   (
      this : in out MiracastReceiverSession
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMiracastReceiverSession.all.get_MaxSimultaneousConnections (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MaxSimultaneousConnections
   (
      this : in out MiracastReceiverSession;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSession.all.put_MaxSimultaneousConnections (value);
   end;

   function Start
   (
      this : in out MiracastReceiverSession
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSessionStartResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverSessionStartResult;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSessionStartResult do
         Hr := this.m_IMiracastReceiverSession.all.Start (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverSessionStartResult := new Windows.Media.Miracast.IMiracastReceiverSessionStartResult;
         Retval.m_IMiracastReceiverSessionStartResult.all := m_ComRetVal;
      end return;
   end;

   function StartAsync
   (
      this : in out MiracastReceiverSession
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSessionStartResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverSessionStartResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverSessionStartResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverSessionStartResult;
      m_IID            : aliased WinRt.IID := (2756841248, 6532, 21221, (155, 112, 21, 169, 206, 148, 174, 248 )); -- Windows.Media.Miracast.MiracastReceiverSessionStartResult;
      m_HandlerIID     : aliased WinRt.IID := (3945881299, 63819, 24524, (149, 18, 152, 172, 157, 138, 66, 63 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult.Kind := new AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverSessionStartResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverSessionStartResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverSessionStartResult do
         Hr := this.m_IMiracastReceiverSession.all.StartAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverSessionStartResult := new Windows.Media.Miracast.IMiracastReceiverSessionStartResult;
                  Retval.m_IMiracastReceiverSessionStartResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure Close
   (
      this : in out MiracastReceiverSession
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Media.Miracast.IMiracastReceiverSession_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IMiracastReceiverSession.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverSessionStartResult

   procedure Initialize (this : in out MiracastReceiverSessionStartResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverSessionStartResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverSessionStartResult, IMiracastReceiverSessionStartResult_Ptr);
   begin
      if this.m_IMiracastReceiverSessionStartResult /= null then
         if this.m_IMiracastReceiverSessionStartResult.all /= null then
            RefCount := this.m_IMiracastReceiverSessionStartResult.all.Release;
            Free (this.m_IMiracastReceiverSessionStartResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverSessionStartResult

   function get_Status
   (
      this : in out MiracastReceiverSessionStartResult
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverSessionStartStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverSessionStartStatus;
   begin
      Hr := this.m_IMiracastReceiverSessionStartResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ExtendedError
   (
      this : in out MiracastReceiverSessionStartResult
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IMiracastReceiverSessionStartResult.all.get_ExtendedError (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverSettings

   procedure Initialize (this : in out MiracastReceiverSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverSettings, IMiracastReceiverSettings_Ptr);
   begin
      if this.m_IMiracastReceiverSettings /= null then
         if this.m_IMiracastReceiverSettings.all /= null then
            RefCount := this.m_IMiracastReceiverSettings.all.Release;
            Free (this.m_IMiracastReceiverSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverSettings

   function get_FriendlyName
   (
      this : in out MiracastReceiverSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.get_FriendlyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_FriendlyName
   (
      this : in out MiracastReceiverSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMiracastReceiverSettings.all.put_FriendlyName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ModelName
   (
      this : in out MiracastReceiverSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.get_ModelName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ModelName
   (
      this : in out MiracastReceiverSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMiracastReceiverSettings.all.put_ModelName (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ModelNumber
   (
      this : in out MiracastReceiverSettings
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.get_ModelNumber (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ModelNumber
   (
      this : in out MiracastReceiverSettings;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMiracastReceiverSettings.all.put_ModelNumber (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AuthorizationMethod
   (
      this : in out MiracastReceiverSettings
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverAuthorizationMethod is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverAuthorizationMethod;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.get_AuthorizationMethod (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AuthorizationMethod
   (
      this : in out MiracastReceiverSettings;
      value : Windows.Media.Miracast.MiracastReceiverAuthorizationMethod
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.put_AuthorizationMethod (value);
   end;

   function get_RequireAuthorizationFromKnownTransmitters
   (
      this : in out MiracastReceiverSettings
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.get_RequireAuthorizationFromKnownTransmitters (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_RequireAuthorizationFromKnownTransmitters
   (
      this : in out MiracastReceiverSettings;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverSettings.all.put_RequireAuthorizationFromKnownTransmitters (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverStatus

   procedure Initialize (this : in out MiracastReceiverStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverStatus, IMiracastReceiverStatus_Ptr);
   begin
      if this.m_IMiracastReceiverStatus /= null then
         if this.m_IMiracastReceiverStatus.all /= null then
            RefCount := this.m_IMiracastReceiverStatus.all.Release;
            Free (this.m_IMiracastReceiverStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverStatus

   function get_ListeningStatus
   (
      this : in out MiracastReceiverStatus
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverListeningStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverListeningStatus;
   begin
      Hr := this.m_IMiracastReceiverStatus.all.get_ListeningStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_WiFiStatus
   (
      this : in out MiracastReceiverStatus
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverWiFiStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastReceiverWiFiStatus;
   begin
      Hr := this.m_IMiracastReceiverStatus.all.get_WiFiStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsConnectionTakeoverSupported
   (
      this : in out MiracastReceiverStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverStatus.all.get_IsConnectionTakeoverSupported (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_MaxSimultaneousConnections
   (
      this : in out MiracastReceiverStatus
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMiracastReceiverStatus.all.get_MaxSimultaneousConnections (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_KnownTransmitters
   (
      this : in out MiracastReceiverStatus
   )
   return IVectorView_IMiracastTransmitter.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMiracastTransmitter.Kind;
   begin
      Hr := this.m_IMiracastReceiverStatus.all.get_KnownTransmitters (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMiracastTransmitter (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverStreamControl

   procedure Initialize (this : in out MiracastReceiverStreamControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverStreamControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverStreamControl, IMiracastReceiverStreamControl_Ptr);
   begin
      if this.m_IMiracastReceiverStreamControl /= null then
         if this.m_IMiracastReceiverStreamControl.all /= null then
            RefCount := this.m_IMiracastReceiverStreamControl.all.Release;
            Free (this.m_IMiracastReceiverStreamControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverStreamControl

   function GetVideoStreamSettings
   (
      this : in out MiracastReceiverStreamControl
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverVideoStreamSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings;
   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverVideoStreamSettings do
         Hr := this.m_IMiracastReceiverStreamControl.all.GetVideoStreamSettings (m_ComRetVal'Access);
         Retval.m_IMiracastReceiverVideoStreamSettings := new Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings;
         Retval.m_IMiracastReceiverVideoStreamSettings.all := m_ComRetVal;
      end return;
   end;

   function GetVideoStreamSettingsAsync
   (
      this : in out MiracastReceiverStreamControl
   )
   return WinRt.Windows.Media.Miracast.MiracastReceiverVideoStreamSettings'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_MiracastReceiverVideoStreamSettings.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_MiracastReceiverVideoStreamSettings.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings;
      m_IID            : aliased WinRt.IID := (1741302075, 51217, 22450, (180, 252, 0, 123, 126, 251, 100, 160 )); -- Windows.Media.Miracast.MiracastReceiverVideoStreamSettings;
      m_HandlerIID     : aliased WinRt.IID := (3096231058, 46614, 22481, (159, 155, 107, 186, 93, 90, 207, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings.Kind := new AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_MiracastReceiverVideoStreamSettings.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings.Kind_Delegate, AsyncOperationCompletedHandler_MiracastReceiverVideoStreamSettings.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.Miracast.MiracastReceiverVideoStreamSettings do
         Hr := this.m_IMiracastReceiverStreamControl.all.GetVideoStreamSettingsAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IMiracastReceiverVideoStreamSettings := new Windows.Media.Miracast.IMiracastReceiverVideoStreamSettings;
                  Retval.m_IMiracastReceiverVideoStreamSettings.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   procedure SuggestVideoStreamSettings
   (
      this : in out MiracastReceiverStreamControl;
      settings : Windows.Media.Miracast.MiracastReceiverVideoStreamSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverStreamControl.all.SuggestVideoStreamSettings (settings.m_IMiracastReceiverVideoStreamSettings.all);
   end;

   procedure SuggestVideoStreamSettingsAsync
   (
      this : in out MiracastReceiverStreamControl;
      settings : Windows.Media.Miracast.MiracastReceiverVideoStreamSettings'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Windows.Foundation.IAsyncAction := null;

      procedure IAsyncAction_Callback (asyncInfo : WinRt.Windows.Foundation.IAsyncAction; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            Hr := asyncInfo.GetResults;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      m_CompletedHandler : WinRt.Windows.Foundation.AsyncActionCompletedHandler := new WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate'(IAsyncAction_Callback'Access, 1, null);
      procedure Free is new Ada.Unchecked_Deallocation (WinRt.Windows.Foundation.AsyncActionCompletedHandler_Delegate, WinRt.Windows.Foundation.AsyncActionCompletedHandler);

   begin
      Hr := this.m_IMiracastReceiverStreamControl.all.SuggestVideoStreamSettingsAsync (settings.m_IMiracastReceiverVideoStreamSettings.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_Captured := m_Completed;
         Hr := m_ComRetVal.Put_Completed (m_CompletedHandler);
         while m_Captured = m_Compare loop
            m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
            m_Captured := m_Completed;
         end loop;
         m_RefCount := m_ComRetVal.Release;
         m_RefCount := m_CompletedHandler.Release;
         if m_RefCount = 0 then
            Free (m_CompletedHandler);
         end if;
      end if;
   end;

   function get_MuteAudio
   (
      this : in out MiracastReceiverStreamControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IMiracastReceiverStreamControl.all.get_MuteAudio (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_MuteAudio
   (
      this : in out MiracastReceiverStreamControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverStreamControl.all.put_MuteAudio (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastReceiverVideoStreamSettings

   procedure Initialize (this : in out MiracastReceiverVideoStreamSettings) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastReceiverVideoStreamSettings) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastReceiverVideoStreamSettings, IMiracastReceiverVideoStreamSettings_Ptr);
   begin
      if this.m_IMiracastReceiverVideoStreamSettings /= null then
         if this.m_IMiracastReceiverVideoStreamSettings.all /= null then
            RefCount := this.m_IMiracastReceiverVideoStreamSettings.all.Release;
            Free (this.m_IMiracastReceiverVideoStreamSettings);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastReceiverVideoStreamSettings

   function get_Size
   (
      this : in out MiracastReceiverVideoStreamSettings
   )
   return WinRt.Windows.Graphics.SizeInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Graphics.SizeInt32;
   begin
      Hr := this.m_IMiracastReceiverVideoStreamSettings.all.get_Size (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Size
   (
      this : in out MiracastReceiverVideoStreamSettings;
      value : Windows.Graphics.SizeInt32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverVideoStreamSettings.all.put_Size (value);
   end;

   function get_Bitrate
   (
      this : in out MiracastReceiverVideoStreamSettings
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IMiracastReceiverVideoStreamSettings.all.get_Bitrate (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Bitrate
   (
      this : in out MiracastReceiverVideoStreamSettings;
      value : WinRt.Int32
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastReceiverVideoStreamSettings.all.put_Bitrate (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for MiracastTransmitter

   procedure Initialize (this : in out MiracastTransmitter) is
   begin
      null;
   end;

   procedure Finalize (this : in out MiracastTransmitter) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IMiracastTransmitter, IMiracastTransmitter_Ptr);
   begin
      if this.m_IMiracastTransmitter /= null then
         if this.m_IMiracastTransmitter.all /= null then
            RefCount := this.m_IMiracastTransmitter.all.Release;
            Free (this.m_IMiracastTransmitter);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for MiracastTransmitter

   function get_Name
   (
      this : in out MiracastTransmitter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastTransmitter.all.get_Name (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Name
   (
      this : in out MiracastTransmitter;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IMiracastTransmitter.all.put_Name (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AuthorizationStatus
   (
      this : in out MiracastTransmitter
   )
   return WinRt.Windows.Media.Miracast.MiracastTransmitterAuthorizationStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.Miracast.MiracastTransmitterAuthorizationStatus;
   begin
      Hr := this.m_IMiracastTransmitter.all.get_AuthorizationStatus (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AuthorizationStatus
   (
      this : in out MiracastTransmitter;
      value : Windows.Media.Miracast.MiracastTransmitterAuthorizationStatus
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IMiracastTransmitter.all.put_AuthorizationStatus (value);
   end;

   function GetConnections
   (
      this : in out MiracastTransmitter
   )
   return IVectorView_IMiracastReceiverConnection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IMiracastReceiverConnection.Kind;
   begin
      Hr := this.m_IMiracastTransmitter.all.GetConnections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IMiracastReceiverConnection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_MacAddress
   (
      this : in out MiracastTransmitter
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IMiracastTransmitter.all.get_MacAddress (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_LastConnectionTime
   (
      this : in out MiracastTransmitter
   )
   return WinRt.Windows.Foundation.DateTime is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.DateTime;
   begin
      Hr := this.m_IMiracastTransmitter.all.get_LastConnectionTime (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

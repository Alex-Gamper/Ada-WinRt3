--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Devices.Bluetooth.Advertisement;
with WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile;
with WinRt.Windows.Devices.Bluetooth.Rfcomm;
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Networking.Sockets;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.Bluetooth.Background is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementPublisherTriggerDetails

   procedure Initialize (this : in out BluetoothLEAdvertisementPublisherTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementPublisherTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementPublisherTriggerDetails, IBluetoothLEAdvertisementPublisherTriggerDetails_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementPublisherTriggerDetails /= null then
         if this.m_IBluetoothLEAdvertisementPublisherTriggerDetails.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementPublisherTriggerDetails.all.Release;
            Free (this.m_IBluetoothLEAdvertisementPublisherTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementPublisherTriggerDetails

   function get_Status
   (
      this : in out BluetoothLEAdvertisementPublisherTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatus;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisherTriggerDetails.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Error
   (
      this : in out BluetoothLEAdvertisementPublisherTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IBluetoothLEAdvertisementPublisherTriggerDetails.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SelectedTransmitPowerLevelInDBm
   (
      this : in out BluetoothLEAdvertisementPublisherTriggerDetails
   )
   return IReference_Int16.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Background.IBluetoothLEAdvertisementPublisherTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_Int16.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Background.IBluetoothLEAdvertisementPublisherTriggerDetails_Interface, WinRt.Windows.Devices.Bluetooth.Background.IBluetoothLEAdvertisementPublisherTriggerDetails2, WinRt.Windows.Devices.Bluetooth.Background.IID_IBluetoothLEAdvertisementPublisherTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IBluetoothLEAdvertisementPublisherTriggerDetails.all);
      Hr := m_Interface.get_SelectedTransmitPowerLevelInDBm (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IReference_Int16 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BluetoothLEAdvertisementWatcherTriggerDetails

   procedure Initialize (this : in out BluetoothLEAdvertisementWatcherTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out BluetoothLEAdvertisementWatcherTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBluetoothLEAdvertisementWatcherTriggerDetails, IBluetoothLEAdvertisementWatcherTriggerDetails_Ptr);
   begin
      if this.m_IBluetoothLEAdvertisementWatcherTriggerDetails /= null then
         if this.m_IBluetoothLEAdvertisementWatcherTriggerDetails.all /= null then
            RefCount := this.m_IBluetoothLEAdvertisementWatcherTriggerDetails.all.Release;
            Free (this.m_IBluetoothLEAdvertisementWatcherTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BluetoothLEAdvertisementWatcherTriggerDetails

   function get_Error
   (
      this : in out BluetoothLEAdvertisementWatcherTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTriggerDetails.all.get_Error (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Advertisements
   (
      this : in out BluetoothLEAdvertisementWatcherTriggerDetails
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := this.m_IBluetoothLEAdvertisementWatcherTriggerDetails.all.get_Advertisements (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_SignalStrengthFilter
   (
      this : in out BluetoothLEAdvertisementWatcherTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter do
         Hr := this.m_IBluetoothLEAdvertisementWatcherTriggerDetails.all.get_SignalStrengthFilter (m_ComRetVal'Access);
         Retval.m_IBluetoothSignalStrengthFilter := new Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter;
         Retval.m_IBluetoothSignalStrengthFilter.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattCharacteristicNotificationTriggerDetails

   procedure Initialize (this : in out GattCharacteristicNotificationTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattCharacteristicNotificationTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattCharacteristicNotificationTriggerDetails, IGattCharacteristicNotificationTriggerDetails_Ptr);
   begin
      if this.m_IGattCharacteristicNotificationTriggerDetails /= null then
         if this.m_IGattCharacteristicNotificationTriggerDetails.all /= null then
            RefCount := this.m_IGattCharacteristicNotificationTriggerDetails.all.Release;
            Free (this.m_IGattCharacteristicNotificationTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattCharacteristicNotificationTriggerDetails

   function get_Characteristic
   (
      this : in out GattCharacteristicNotificationTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic do
         Hr := this.m_IGattCharacteristicNotificationTriggerDetails.all.get_Characteristic (m_ComRetVal'Access);
         Retval.m_IGattCharacteristic := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic;
         Retval.m_IGattCharacteristic.all := m_ComRetVal;
      end return;
   end;

   function get_Value
   (
      this : in out GattCharacteristicNotificationTriggerDetails
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IGattCharacteristicNotificationTriggerDetails.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Error
   (
      this : in out GattCharacteristicNotificationTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothError is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothError;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails_Interface, WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2, WinRt.Windows.Devices.Bluetooth.Background.IID_IGattCharacteristicNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattCharacteristicNotificationTriggerDetails.all);
      Hr := m_Interface.get_Error (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_EventTriggeringMode
   (
      this : in out GattCharacteristicNotificationTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Background.BluetoothEventTriggeringMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails_Interface, WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2, WinRt.Windows.Devices.Bluetooth.Background.IID_IGattCharacteristicNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattCharacteristicNotificationTriggerDetails.all);
      Hr := m_Interface.get_EventTriggeringMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_ValueChangedEvents
   (
      this : in out GattCharacteristicNotificationTriggerDetails
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails_Interface, WinRt.Windows.Devices.Bluetooth.Background.IGattCharacteristicNotificationTriggerDetails2, WinRt.Windows.Devices.Bluetooth.Background.IID_IGattCharacteristicNotificationTriggerDetails2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IGattCharacteristicNotificationTriggerDetails.all);
      Hr := m_Interface.get_ValueChangedEvents (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderConnection

   procedure Initialize (this : in out GattServiceProviderConnection) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderConnection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderConnection, IGattServiceProviderConnection_Ptr);
   begin
      if this.m_IGattServiceProviderConnection /= null then
         if this.m_IGattServiceProviderConnection.all /= null then
            RefCount := this.m_IGattServiceProviderConnection.all.Release;
            Free (this.m_IGattServiceProviderConnection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for GattServiceProviderConnection

   function get_AllServices
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.Bluetooth.Background.GattServiceProviderConnection");
      m_Factory        : access WinRt.Windows.Devices.Bluetooth.Background.IGattServiceProviderConnectionStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IGattServiceProviderConnectionStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.get_AllServices (m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderConnection

   function get_TriggerId
   (
      this : in out GattServiceProviderConnection
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IGattServiceProviderConnection.all.get_TriggerId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_Service
   (
      this : in out GattServiceProviderConnection
   )
   return WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.GenericAttributeProfile.GattLocalService do
         Hr := this.m_IGattServiceProviderConnection.all.get_Service (m_ComRetVal'Access);
         Retval.m_IGattLocalService := new Windows.Devices.Bluetooth.GenericAttributeProfile.IGattLocalService;
         Retval.m_IGattLocalService.all := m_ComRetVal;
      end return;
   end;

   procedure Start
   (
      this : in out GattServiceProviderConnection
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IGattServiceProviderConnection.all.Start;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GattServiceProviderTriggerDetails

   procedure Initialize (this : in out GattServiceProviderTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out GattServiceProviderTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGattServiceProviderTriggerDetails, IGattServiceProviderTriggerDetails_Ptr);
   begin
      if this.m_IGattServiceProviderTriggerDetails /= null then
         if this.m_IGattServiceProviderTriggerDetails.all /= null then
            RefCount := this.m_IGattServiceProviderTriggerDetails.all.Release;
            Free (this.m_IGattServiceProviderTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GattServiceProviderTriggerDetails

   function get_Connection
   (
      this : in out GattServiceProviderTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.Background.GattServiceProviderConnection'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Background.IGattServiceProviderConnection;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Background.GattServiceProviderConnection do
         Hr := this.m_IGattServiceProviderTriggerDetails.all.get_Connection (m_ComRetVal'Access);
         Retval.m_IGattServiceProviderConnection := new Windows.Devices.Bluetooth.Background.IGattServiceProviderConnection;
         Retval.m_IGattServiceProviderConnection.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommConnectionTriggerDetails

   procedure Initialize (this : in out RfcommConnectionTriggerDetails) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommConnectionTriggerDetails) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommConnectionTriggerDetails, IRfcommConnectionTriggerDetails_Ptr);
   begin
      if this.m_IRfcommConnectionTriggerDetails /= null then
         if this.m_IRfcommConnectionTriggerDetails.all /= null then
            RefCount := this.m_IRfcommConnectionTriggerDetails.all.Release;
            Free (this.m_IRfcommConnectionTriggerDetails);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommConnectionTriggerDetails

   function get_Socket
   (
      this : in out RfcommConnectionTriggerDetails
   )
   return WinRt.Windows.Networking.Sockets.StreamSocket'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Networking.Sockets.IStreamSocket;
   begin
      return RetVal : WinRt.Windows.Networking.Sockets.StreamSocket do
         Hr := this.m_IRfcommConnectionTriggerDetails.all.get_Socket (m_ComRetVal'Access);
         Retval.m_IStreamSocket := new Windows.Networking.Sockets.IStreamSocket;
         Retval.m_IStreamSocket.all := m_ComRetVal;
      end return;
   end;

   function get_Incoming
   (
      this : in out RfcommConnectionTriggerDetails
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IRfcommConnectionTriggerDetails.all.get_Incoming (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_RemoteDevice
   (
      this : in out RfcommConnectionTriggerDetails
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothDevice'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.IBluetoothDevice;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.BluetoothDevice do
         Hr := this.m_IRfcommConnectionTriggerDetails.all.get_RemoteDevice (m_ComRetVal'Access);
         Retval.m_IBluetoothDevice := new Windows.Devices.Bluetooth.IBluetoothDevice;
         Retval.m_IBluetoothDevice.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommInboundConnectionInformation

   procedure Initialize (this : in out RfcommInboundConnectionInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommInboundConnectionInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommInboundConnectionInformation, IRfcommInboundConnectionInformation_Ptr);
   begin
      if this.m_IRfcommInboundConnectionInformation /= null then
         if this.m_IRfcommInboundConnectionInformation.all /= null then
            RefCount := this.m_IRfcommInboundConnectionInformation.all.Release;
            Free (this.m_IRfcommInboundConnectionInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommInboundConnectionInformation

   function get_SdpRecord
   (
      this : in out RfcommInboundConnectionInformation
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IRfcommInboundConnectionInformation.all.get_SdpRecord (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_SdpRecord
   (
      this : in out RfcommInboundConnectionInformation;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommInboundConnectionInformation.all.put_SdpRecord (value);
   end;

   function get_LocalServiceId
   (
      this : in out RfcommInboundConnectionInformation
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := this.m_IRfcommInboundConnectionInformation.all.get_LocalServiceId (m_ComRetVal'Access);
         Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
         Retval.m_IRfcommServiceId.all := m_ComRetVal;
      end return;
   end;

   procedure put_LocalServiceId
   (
      this : in out RfcommInboundConnectionInformation;
      value : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommInboundConnectionInformation.all.put_LocalServiceId (value.m_IRfcommServiceId.all);
   end;

   function get_ServiceCapabilities
   (
      this : in out RfcommInboundConnectionInformation
   )
   return WinRt.Windows.Devices.Bluetooth.BluetoothServiceCapabilities is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.BluetoothServiceCapabilities;
   begin
      Hr := this.m_IRfcommInboundConnectionInformation.all.get_ServiceCapabilities (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ServiceCapabilities
   (
      this : in out RfcommInboundConnectionInformation;
      value : Windows.Devices.Bluetooth.BluetoothServiceCapabilities
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommInboundConnectionInformation.all.put_ServiceCapabilities (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RfcommOutboundConnectionInformation

   procedure Initialize (this : in out RfcommOutboundConnectionInformation) is
   begin
      null;
   end;

   procedure Finalize (this : in out RfcommOutboundConnectionInformation) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRfcommOutboundConnectionInformation, IRfcommOutboundConnectionInformation_Ptr);
   begin
      if this.m_IRfcommOutboundConnectionInformation /= null then
         if this.m_IRfcommOutboundConnectionInformation.all /= null then
            RefCount := this.m_IRfcommOutboundConnectionInformation.all.Release;
            Free (this.m_IRfcommOutboundConnectionInformation);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RfcommOutboundConnectionInformation

   function get_RemoteServiceId
   (
      this : in out RfcommOutboundConnectionInformation
   )
   return WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
   begin
      return RetVal : WinRt.Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId do
         Hr := this.m_IRfcommOutboundConnectionInformation.all.get_RemoteServiceId (m_ComRetVal'Access);
         Retval.m_IRfcommServiceId := new Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceId;
         Retval.m_IRfcommServiceId.all := m_ComRetVal;
      end return;
   end;

   procedure put_RemoteServiceId
   (
      this : in out RfcommOutboundConnectionInformation;
      value : Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRfcommOutboundConnectionInformation.all.put_RemoteServiceId (value.m_IRfcommServiceId.all);
   end;

end;

--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Media.ContentRestrictions is

   package IAsyncOperation_ContentRestrictionsBrowsePolicy is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.ContentRestrictions.IContentRestrictionsBrowsePolicy);
   package AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.ContentRestrictions.IContentRestrictionsBrowsePolicy);

   package IAsyncOperation_ContentAccessRestrictionLevel is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Media.ContentRestrictions.ContentAccessRestrictionLevel);
   package AsyncOperationCompletedHandler_ContentAccessRestrictionLevel is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Media.ContentRestrictions.ContentAccessRestrictionLevel);

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for ContentRestrictionsBrowsePolicy

   procedure Initialize (this : in out ContentRestrictionsBrowsePolicy) is
   begin
      null;
   end;

   procedure Finalize (this : in out ContentRestrictionsBrowsePolicy) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IContentRestrictionsBrowsePolicy, IContentRestrictionsBrowsePolicy_Ptr);
   begin
      if this.m_IContentRestrictionsBrowsePolicy /= null then
         if this.m_IContentRestrictionsBrowsePolicy.all /= null then
            RefCount := this.m_IContentRestrictionsBrowsePolicy.all.Release;
            Free (this.m_IContentRestrictionsBrowsePolicy);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for ContentRestrictionsBrowsePolicy

   function get_GeographicRegion
   (
      this : in out ContentRestrictionsBrowsePolicy
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IContentRestrictionsBrowsePolicy.all.get_GeographicRegion (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_MaxBrowsableAgeRating
   (
      this : in out ContentRestrictionsBrowsePolicy
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IContentRestrictionsBrowsePolicy.all.get_MaxBrowsableAgeRating (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_PreferredAgeRating
   (
      this : in out ContentRestrictionsBrowsePolicy
   )
   return IReference_UInt32.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IReference_UInt32.Kind;
   begin
      Hr := this.m_IContentRestrictionsBrowsePolicy.all.get_PreferredAgeRating (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IReference_UInt32 (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RatedContentDescription

   procedure Initialize (this : in out RatedContentDescription) is
   begin
      null;
   end;

   procedure Finalize (this : in out RatedContentDescription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRatedContentDescription, IRatedContentDescription_Ptr);
   begin
      if this.m_IRatedContentDescription /= null then
         if this.m_IRatedContentDescription.all /= null then
            RefCount := this.m_IRatedContentDescription.all.Release;
            Free (this.m_IRatedContentDescription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RatedContentDescription

   function Constructor
   (
      id : WinRt.WString;
      title : WinRt.WString;
      category : Windows.Media.ContentRestrictions.RatedContentCategory
   )
   return RatedContentDescription is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.ContentRestrictions.RatedContentDescription");
      m_Factory    : access IRatedContentDescriptionFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.ContentRestrictions.IRatedContentDescription;
      HStr_id : WinRt.HString := To_HString (id);
      HStr_title : WinRt.HString := To_HString (title);
   begin
      return RetVal : RatedContentDescription do
         Hr := RoGetActivationFactory (m_hString, IID_IRatedContentDescriptionFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.Create (HStr_id, HStr_title, category, m_ComRetVal'Access);
            Retval.m_IRatedContentDescription := new Windows.Media.ContentRestrictions.IRatedContentDescription;
            Retval.m_IRatedContentDescription.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_id);
         Hr := WindowsDeleteString (HStr_title);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RatedContentDescription

   function get_Id
   (
      this : in out RatedContentDescription
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRatedContentDescription.all.get_Id (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Id
   (
      this : in out RatedContentDescription;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IRatedContentDescription.all.put_Id (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Title
   (
      this : in out RatedContentDescription
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IRatedContentDescription.all.get_Title (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_Title
   (
      this : in out RatedContentDescription;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IRatedContentDescription.all.put_Title (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_Image
   (
      this : in out RatedContentDescription
   )
   return WinRt.Windows.Storage.Streams.IRandomAccessStreamReference is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IRandomAccessStreamReference;
   begin
      Hr := this.m_IRatedContentDescription.all.get_Image (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Image
   (
      this : in out RatedContentDescription;
      value : Windows.Storage.Streams.IRandomAccessStreamReference
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRatedContentDescription.all.put_Image (value);
   end;

   function get_Category
   (
      this : in out RatedContentDescription
   )
   return WinRt.Windows.Media.ContentRestrictions.RatedContentCategory is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Media.ContentRestrictions.RatedContentCategory;
   begin
      Hr := this.m_IRatedContentDescription.all.get_Category (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Category
   (
      this : in out RatedContentDescription;
      value : Windows.Media.ContentRestrictions.RatedContentCategory
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRatedContentDescription.all.put_Category (value);
   end;

   function get_Ratings
   (
      this : in out RatedContentDescription
   )
   return IVector_HString.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVector_HString.Kind;
   begin
      Hr := this.m_IRatedContentDescription.all.get_Ratings (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVector_HString (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure put_Ratings
   (
      this : in out RatedContentDescription;
      value : GenericObject
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRatedContentDescription.all.put_Ratings (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for RatedContentRestrictions

   procedure Initialize (this : in out RatedContentRestrictions) is
   begin
      null;
   end;

   procedure Finalize (this : in out RatedContentRestrictions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IRatedContentRestrictions, IRatedContentRestrictions_Ptr);
   begin
      if this.m_IRatedContentRestrictions /= null then
         if this.m_IRatedContentRestrictions.all /= null then
            RefCount := this.m_IRatedContentRestrictions.all.Release;
            Free (this.m_IRatedContentRestrictions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for RatedContentRestrictions

   function Constructor
   (
      maxAgeRating : WinRt.UInt32
   )
   return RatedContentRestrictions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.ContentRestrictions.RatedContentRestrictions");
      m_Factory    : access IRatedContentRestrictionsFactory_Interface'Class := null;
      m_RefCount   : WinRt.UInt32 := 0;
      m_ComRetVal  : aliased Windows.Media.ContentRestrictions.IRatedContentRestrictions;
   begin
      return RetVal : RatedContentRestrictions do
         Hr := RoGetActivationFactory (m_hString, IID_IRatedContentRestrictionsFactory'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.CreateWithMaxAgeRating (maxAgeRating, m_ComRetVal'Access);
            Retval.m_IRatedContentRestrictions := new Windows.Media.ContentRestrictions.IRatedContentRestrictions;
            Retval.m_IRatedContentRestrictions.all := m_ComRetVal;
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   function Constructor return RatedContentRestrictions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.Media.ContentRestrictions.RatedContentRestrictions");
      m_ComRetVal  : aliased Windows.Media.ContentRestrictions.IRatedContentRestrictions;
   begin
      return RetVal : RatedContentRestrictions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IRatedContentRestrictions := new Windows.Media.ContentRestrictions.IRatedContentRestrictions;
            Retval.m_IRatedContentRestrictions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for RatedContentRestrictions

   function GetBrowsePolicyAsync
   (
      this : in out RatedContentRestrictions
   )
   return WinRt.Windows.Media.ContentRestrictions.ContentRestrictionsBrowsePolicy'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContentRestrictionsBrowsePolicy.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContentRestrictionsBrowsePolicy.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.ContentRestrictions.IContentRestrictionsBrowsePolicy;
      m_IID            : aliased WinRt.IID := (2922617266, 51157, 24347, (159, 185, 248, 189, 129, 233, 249, 190 )); -- Windows.Media.ContentRestrictions.ContentRestrictionsBrowsePolicy;
      m_HandlerIID     : aliased WinRt.IID := (1924012566, 50949, 21735, (177, 196, 252, 5, 160, 224, 122, 119 ));
      m_Handler        : AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy.Kind := new AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContentRestrictionsBrowsePolicy.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy.Kind_Delegate, AsyncOperationCompletedHandler_ContentRestrictionsBrowsePolicy.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Media.ContentRestrictions.ContentRestrictionsBrowsePolicy do
         Hr := this.m_IRatedContentRestrictions.all.GetBrowsePolicyAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IContentRestrictionsBrowsePolicy := new Windows.Media.ContentRestrictions.IContentRestrictionsBrowsePolicy;
                  Retval.m_IContentRestrictionsBrowsePolicy.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetRestrictionLevelAsync
   (
      this : in out RatedContentRestrictions;
      RatedContentDescription_p : Windows.Media.ContentRestrictions.RatedContentDescription'Class
   )
   return WinRt.Windows.Media.ContentRestrictions.ContentAccessRestrictionLevel is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_ContentAccessRestrictionLevel.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_ContentAccessRestrictionLevel.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Media.ContentRestrictions.ContentAccessRestrictionLevel;
      m_IID            : aliased WinRt.IID := (2248933753, 48641, 21613, (169, 206, 89, 86, 70, 76, 152, 171 )); -- Windows.Media.ContentRestrictions.ContentAccessRestrictionLevel;
      m_HandlerIID     : aliased WinRt.IID := (3479289437, 16579, 21636, (132, 106, 63, 130, 184, 186, 87, 56 ));
      m_Handler        : AsyncOperationCompletedHandler_ContentAccessRestrictionLevel.Kind := new AsyncOperationCompletedHandler_ContentAccessRestrictionLevel.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_ContentAccessRestrictionLevel.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_ContentAccessRestrictionLevel.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_ContentAccessRestrictionLevel.Kind_Delegate, AsyncOperationCompletedHandler_ContentAccessRestrictionLevel.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRatedContentRestrictions.all.GetRestrictionLevelAsync (RatedContentDescription_p.m_IRatedContentDescription.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function RequestContentAccessAsync
   (
      this : in out RatedContentRestrictions;
      RatedContentDescription_p : Windows.Media.ContentRestrictions.RatedContentDescription'Class
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IRatedContentRestrictions.all.RequestContentAccessAsync (RatedContentDescription_p.m_IRatedContentDescription.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function add_RestrictionsChanged
   (
      this : in out RatedContentRestrictions;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IRatedContentRestrictions.all.add_RestrictionsChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_RestrictionsChanged
   (
      this : in out RatedContentRestrictions;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IRatedContentRestrictions.all.remove_RestrictionsChanged (token);
   end;

end;

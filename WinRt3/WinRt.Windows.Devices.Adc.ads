--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with WinRt.Windows.Devices.Adc.Provider;
with WinRt.Windows.Foundation;
with Ada.Finalization;
--------------------------------------------------------------------------------
package WinRt.Windows.Devices.Adc is

   pragma PreElaborate;

   -----------------------------------------------------------------------------
   -- Forward Interface declarations
   -----------------------------------------------------------------------------

   type IAdcChannel_Interface is interface and WinRt.IInspectable_Interface;
   type IAdcChannel is access IAdcChannel_Interface'Class;
   type IAdcChannel_Ptr is access all IAdcChannel;

   type IAdcController_Interface is interface and WinRt.IInspectable_Interface;
   type IAdcController is access IAdcController_Interface'Class;
   type IAdcController_Ptr is access all IAdcController;

   type IAdcControllerStatics_Interface is interface and WinRt.IInspectable_Interface;
   type IAdcControllerStatics is access IAdcControllerStatics_Interface'Class;

   type IAdcControllerStatics2_Interface is interface and WinRt.IInspectable_Interface;
   type IAdcControllerStatics2 is access IAdcControllerStatics2_Interface'Class;

   -----------------------------------------------------------------------------
   -- Class declarations
   -----------------------------------------------------------------------------

   type AdcChannel is new Ada.Finalization.Limited_Controlled with
      record
         m_IAdcChannel : access Windows.Devices.Adc.IAdcChannel;
      end record;
   type AdcChannel_Ptr is access all AdcChannel;

   type AdcController is new Ada.Finalization.Limited_Controlled with
      record
         m_IAdcController : access Windows.Devices.Adc.IAdcController;
      end record;
   type AdcController_Ptr is access all AdcController;

   -----------------------------------------------------------------------------
   -- Enum declarations
   -----------------------------------------------------------------------------

   type AdcChannelMode is (
      SingleEnded_e,
      Differential_e
   );
   for AdcChannelMode use (
      SingleEnded_e => 0,
      Differential_e => 1
   );
   type AdcChannelMode_Ptr is access AdcChannelMode;

   -----------------------------------------------------------------------------
   -- Interface declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- type IAdcChannel is interface and WinRt.IInspectable;

      function get_Controller
      (
         this : access IAdcChannel_Interface;
         RetVal : access Windows.Devices.Adc.IAdcController
      )
      return WinRt.Hresult is abstract;

      function ReadValue
      (
         this : access IAdcChannel_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function ReadRatio
      (
         this : access IAdcChannel_Interface;
         RetVal : access WinRt.Double
      )
      return WinRt.Hresult is abstract;

      IID_IAdcChannel : aliased WinRt.IID := (67892244, 9608, 19030, (171, 239, 115, 162, 96, 172, 198, 10 ));

   -----------------------------------------------------------------------------
   -- type IAdcController is interface and WinRt.IInspectable;

      function get_ChannelCount
      (
         this : access IAdcController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_ResolutionInBits
      (
         this : access IAdcController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_MinValue
      (
         this : access IAdcController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_MaxValue
      (
         this : access IAdcController_Interface;
         RetVal : access WinRt.Int32
      )
      return WinRt.Hresult is abstract;

      function get_ChannelMode
      (
         this : access IAdcController_Interface;
         RetVal : access Windows.Devices.Adc.AdcChannelMode
      )
      return WinRt.Hresult is abstract;

      function put_ChannelMode
      (
         this : access IAdcController_Interface;
         value : Windows.Devices.Adc.AdcChannelMode
      )
      return WinRt.Hresult is abstract;

      function IsChannelModeSupported
      (
         this : access IAdcController_Interface;
         channelMode : Windows.Devices.Adc.AdcChannelMode;
         RetVal : access WinRt.Boolean
      )
      return WinRt.Hresult is abstract;

      function OpenChannel
      (
         this : access IAdcController_Interface;
         channelNumber : WinRt.Int32;
         RetVal : access Windows.Devices.Adc.IAdcChannel
      )
      return WinRt.Hresult is abstract;

      IID_IAdcController : aliased WinRt.IID := (712434864, 43158, 16921, (134, 182, 234, 140, 220, 233, 143, 86 ));

   -----------------------------------------------------------------------------
   -- type IAdcControllerStatics is interface and WinRt.IInspectable;

      function GetControllersAsync
      (
         this : access IAdcControllerStatics_Interface;
         provider : Windows.Devices.Adc.Provider.IAdcProvider;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IAdcControllerStatics : aliased WinRt.IID := (3437858316, 504, 18577, (188, 59, 190, 83, 239, 39, 156, 164 ));

   -----------------------------------------------------------------------------
   -- type IAdcControllerStatics2 is interface and WinRt.IInspectable;

      function GetDefaultAsync
      (
         this : access IAdcControllerStatics2_Interface;
         RetVal : access GenericObject
      )
      return WinRt.Hresult is abstract;

      IID_IAdcControllerStatics2 : aliased WinRt.IID := (2730048285, 38779, 20314, (165, 254, 166, 171, 175, 254, 100, 132 ));

   -----------------------------------------------------------------------------
   -- Class method declarations
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdcChannel

   overriding procedure Initialize (this : in out AdcChannel);
   overriding procedure Finalize (this : in out AdcChannel);

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdcChannel

   function get_Controller
   (
      this : in out AdcChannel
   )
   return WinRt.Windows.Devices.Adc.AdcController'Class;

   function ReadValue
   (
      this : in out AdcChannel
   )
   return WinRt.Int32;

   function ReadRatio
   (
      this : in out AdcChannel
   )
   return WinRt.Double;

   procedure Close
   (
      this : in out AdcChannel
   );

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AdcController

   overriding procedure Initialize (this : in out AdcController);
   overriding procedure Finalize (this : in out AdcController);

   -----------------------------------------------------------------------------
   -- Static Interfaces for AdcController

   function GetDefaultAsync
   return WinRt.Windows.Devices.Adc.AdcController;

   function GetControllersAsync
   (
      provider : Windows.Devices.Adc.Provider.IAdcProvider
   )
   return WinRt.GenericObject;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AdcController

   function get_ChannelCount
   (
      this : in out AdcController
   )
   return WinRt.Int32;

   function get_ResolutionInBits
   (
      this : in out AdcController
   )
   return WinRt.Int32;

   function get_MinValue
   (
      this : in out AdcController
   )
   return WinRt.Int32;

   function get_MaxValue
   (
      this : in out AdcController
   )
   return WinRt.Int32;

   function get_ChannelMode
   (
      this : in out AdcController
   )
   return WinRt.Windows.Devices.Adc.AdcChannelMode;

   procedure put_ChannelMode
   (
      this : in out AdcController;
      value : Windows.Devices.Adc.AdcChannelMode
   );

   function IsChannelModeSupported
   (
      this : in out AdcController;
      channelMode : Windows.Devices.Adc.AdcChannelMode
   )
   return WinRt.Boolean;

   function OpenChannel
   (
      this : in out AdcController;
      channelNumber : WinRt.Int32
   )
   return WinRt.Windows.Devices.Adc.AdcChannel'Class;

end;

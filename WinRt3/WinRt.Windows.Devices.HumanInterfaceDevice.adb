--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Storage;
with WinRt.Windows.Storage.Streams;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Devices.HumanInterfaceDevice is

   package IAsyncOperation_HidInputReport is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.HumanInterfaceDevice.IHidInputReport);
   package AsyncOperationCompletedHandler_HidInputReport is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.HumanInterfaceDevice.IHidInputReport);

   package IAsyncOperation_HidFeatureReport is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.HumanInterfaceDevice.IHidFeatureReport);
   package AsyncOperationCompletedHandler_HidFeatureReport is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.HumanInterfaceDevice.IHidFeatureReport);

   package IAsyncOperation_UInt32 is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.UInt32);
   package AsyncOperationCompletedHandler_UInt32 is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.UInt32);

   package IAsyncOperation_HidDevice is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.Devices.HumanInterfaceDevice.IHidDevice);
   package AsyncOperationCompletedHandler_HidDevice is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.Devices.HumanInterfaceDevice.IHidDevice);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidBooleanControl

   procedure Initialize (this : in out HidBooleanControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidBooleanControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidBooleanControl, IHidBooleanControl_Ptr);
   begin
      if this.m_IHidBooleanControl /= null then
         if this.m_IHidBooleanControl.all /= null then
            RefCount := this.m_IHidBooleanControl.all.Release;
            Free (this.m_IHidBooleanControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidBooleanControl

   function get_Id
   (
      this : in out HidBooleanControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidBooleanControl.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidBooleanControl
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidBooleanControl.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidBooleanControl
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidBooleanControl.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsActive
   (
      this : in out HidBooleanControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHidBooleanControl.all.get_IsActive (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_IsActive
   (
      this : in out HidBooleanControl;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidBooleanControl.all.put_IsActive (value);
   end;

   function get_ControlDescription
   (
      this : in out HidBooleanControl
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControlDescription;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription do
         Hr := this.m_IHidBooleanControl.all.get_ControlDescription (m_ComRetVal'Access);
         Retval.m_IHidBooleanControlDescription := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControlDescription;
         Retval.m_IHidBooleanControlDescription.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidBooleanControlDescription

   procedure Initialize (this : in out HidBooleanControlDescription) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidBooleanControlDescription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidBooleanControlDescription, IHidBooleanControlDescription_Ptr);
   begin
      if this.m_IHidBooleanControlDescription /= null then
         if this.m_IHidBooleanControlDescription.all /= null then
            RefCount := this.m_IHidBooleanControlDescription.all.Release;
            Free (this.m_IHidBooleanControlDescription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidBooleanControlDescription

   function get_Id
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportId
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_ReportId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportType
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidReportType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.HidReportType;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_ReportType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ParentCollections
   (
      this : in out HidBooleanControlDescription
   )
   return IVectorView_IHidCollection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidCollection.Kind;
   begin
      Hr := this.m_IHidBooleanControlDescription.all.get_ParentCollections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidCollection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_IsAbsolute
   (
      this : in out HidBooleanControlDescription
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Devices.HumanInterfaceDevice.IHidBooleanControlDescription2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.HumanInterfaceDevice.IHidBooleanControlDescription_Interface, WinRt.Windows.Devices.HumanInterfaceDevice.IHidBooleanControlDescription2, WinRt.Windows.Devices.HumanInterfaceDevice.IID_IHidBooleanControlDescription2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidBooleanControlDescription.all);
      Hr := m_Interface.get_IsAbsolute (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidCollection

   procedure Initialize (this : in out HidCollection) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidCollection) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidCollection, IHidCollection_Ptr);
   begin
      if this.m_IHidCollection /= null then
         if this.m_IHidCollection.all /= null then
            RefCount := this.m_IHidCollection.all.Release;
            Free (this.m_IHidCollection);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidCollection

   function get_Id
   (
      this : in out HidCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidCollection.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Type
   (
      this : in out HidCollection
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidCollectionType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.HidCollectionType;
   begin
      Hr := this.m_IHidCollection.all.get_Type (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidCollection.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidCollection
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidCollection.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidDevice

   procedure Initialize (this : in out HidDevice) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidDevice) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidDevice, IHidDevice_Ptr);
   begin
      if this.m_IHidDevice /= null then
         if this.m_IHidDevice.all /= null then
            RefCount := this.m_IHidDevice.all.Release;
            Free (this.m_IHidDevice);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Static Interfaces for HidDevice

   function GetDeviceSelector
   (
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.HumanInterfaceDevice.HidDevice");
      m_Factory        : access WinRt.Windows.Devices.HumanInterfaceDevice.IHidDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHidDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (usagePage, usageId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function GetDeviceSelector
   (
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16;
      vendorId : WinRt.UInt16;
      productId : WinRt.UInt16
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.HumanInterfaceDevice.HidDevice");
      m_Factory        : access WinRt.Windows.Devices.HumanInterfaceDevice.IHidDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := RoGetActivationFactory (m_hString, IID_IHidDeviceStatics'Access , m_Factory'Address);
      if Hr = S_OK then
         Hr := m_Factory.GetDeviceSelector (usagePage, usageId, vendorId, productId, m_ComRetVal'Access);
         m_RefCount := m_Factory.Release;
      end if;
      Hr := WindowsDeleteString (m_hString);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function FromIdAsync
   (
      deviceId : WinRt.WString;
      accessMode : Windows.Storage.FileAccessMode
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidDevice is
      Hr               : WinRt.HResult := S_OK;
      m_hString        : WinRt.HString := To_HString ("Windows.Devices.HumanInterfaceDevice.HidDevice");
      m_Factory        : access WinRt.Windows.Devices.HumanInterfaceDevice.IHidDeviceStatics_Interface'Class := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_deviceId : WinRt.HString := To_HString (deviceId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HidDevice.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HidDevice.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.HumanInterfaceDevice.IHidDevice;
      m_IID            : aliased WinRt.IID := (2808762303, 20855, 21078, (132, 168, 179, 26, 141, 207, 16, 72 )); -- Windows.Devices.HumanInterfaceDevice.HidDevice;
      m_HandlerIID     : aliased WinRt.IID := (2968052041, 3254, 21927, (188, 193, 217, 150, 50, 77, 101, 196 ));
      m_Handler        : AsyncOperationCompletedHandler_HidDevice.Kind := new AsyncOperationCompletedHandler_HidDevice.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HidDevice.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HidDevice.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HidDevice.Kind_Delegate, AsyncOperationCompletedHandler_HidDevice.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidDevice do
         Hr := RoGetActivationFactory (m_hString, IID_IHidDeviceStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.FromIdAsync (HStr_deviceId, accessMode, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
            if Hr = S_OK then
               m_AsyncOperation := QI (m_ComRetVal);
               m_RefCount := m_ComRetVal.Release;
               if m_AsyncOperation /= null then
                  Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
                  while m_Captured = m_Compare loop
                     m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                     m_Captured := m_Completed;
                  end loop;
                  if m_AsyncStatus = Completed_e then
                     Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                     Retval.m_IHidDevice := new Windows.Devices.HumanInterfaceDevice.IHidDevice;
                     Retval.m_IHidDevice.all := m_RetVal;
                  end if;
                  m_RefCount := m_AsyncOperation.Release;
                  m_RefCount := m_Handler.Release;
                  if m_RefCount = 0 then
                     Free (m_Handler);
                  end if;
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (m_hString);
         Hr := WindowsDeleteString (HStr_deviceId);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidDevice

   function get_VendorId
   (
      this : in out HidDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidDevice.all.get_VendorId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ProductId
   (
      this : in out HidDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidDevice.all.get_ProductId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Version
   (
      this : in out HidDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidDevice.all.get_Version (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidDevice.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidDevice
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidDevice.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetInputReportAsync
   (
      this : in out HidDevice
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HidInputReport.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HidInputReport.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.HumanInterfaceDevice.IHidInputReport;
      m_IID            : aliased WinRt.IID := (3017967895, 52552, 22451, (160, 177, 50, 20, 50, 232, 91, 214 )); -- Windows.Devices.HumanInterfaceDevice.HidInputReport;
      m_HandlerIID     : aliased WinRt.IID := (29898608, 939, 21878, (152, 180, 141, 117, 206, 26, 152, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_HidInputReport.Kind := new AsyncOperationCompletedHandler_HidInputReport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HidInputReport.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HidInputReport.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HidInputReport.Kind_Delegate, AsyncOperationCompletedHandler_HidInputReport.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport do
         Hr := this.m_IHidDevice.all.GetInputReportAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHidInputReport := new Windows.Devices.HumanInterfaceDevice.IHidInputReport;
                  Retval.m_IHidInputReport.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetInputReportAsync
   (
      this : in out HidDevice;
      reportId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HidInputReport.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HidInputReport.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.HumanInterfaceDevice.IHidInputReport;
      m_IID            : aliased WinRt.IID := (3017967895, 52552, 22451, (160, 177, 50, 20, 50, 232, 91, 214 )); -- Windows.Devices.HumanInterfaceDevice.HidInputReport;
      m_HandlerIID     : aliased WinRt.IID := (29898608, 939, 21878, (152, 180, 141, 117, 206, 26, 152, 133 ));
      m_Handler        : AsyncOperationCompletedHandler_HidInputReport.Kind := new AsyncOperationCompletedHandler_HidInputReport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HidInputReport.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HidInputReport.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HidInputReport.Kind_Delegate, AsyncOperationCompletedHandler_HidInputReport.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport do
         Hr := this.m_IHidDevice.all.GetInputReportAsync (reportId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHidInputReport := new Windows.Devices.HumanInterfaceDevice.IHidInputReport;
                  Retval.m_IHidInputReport.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetFeatureReportAsync
   (
      this : in out HidDevice
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HidFeatureReport.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HidFeatureReport.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
      m_IID            : aliased WinRt.IID := (3610228473, 17142, 24389, (191, 227, 41, 175, 36, 124, 46, 133 )); -- Windows.Devices.HumanInterfaceDevice.HidFeatureReport;
      m_HandlerIID     : aliased WinRt.IID := (3680777557, 15638, 22526, (183, 239, 43, 219, 215, 25, 253, 191 ));
      m_Handler        : AsyncOperationCompletedHandler_HidFeatureReport.Kind := new AsyncOperationCompletedHandler_HidFeatureReport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HidFeatureReport.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HidFeatureReport.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HidFeatureReport.Kind_Delegate, AsyncOperationCompletedHandler_HidFeatureReport.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport do
         Hr := this.m_IHidDevice.all.GetFeatureReportAsync (m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHidFeatureReport := new Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
                  Retval.m_IHidFeatureReport.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function GetFeatureReportAsync
   (
      this : in out HidDevice;
      reportId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_HidFeatureReport.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_HidFeatureReport.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
      m_IID            : aliased WinRt.IID := (3610228473, 17142, 24389, (191, 227, 41, 175, 36, 124, 46, 133 )); -- Windows.Devices.HumanInterfaceDevice.HidFeatureReport;
      m_HandlerIID     : aliased WinRt.IID := (3680777557, 15638, 22526, (183, 239, 43, 219, 215, 25, 253, 191 ));
      m_Handler        : AsyncOperationCompletedHandler_HidFeatureReport.Kind := new AsyncOperationCompletedHandler_HidFeatureReport.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_HidFeatureReport.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_HidFeatureReport.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_HidFeatureReport.Kind_Delegate, AsyncOperationCompletedHandler_HidFeatureReport.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport do
         Hr := this.m_IHidDevice.all.GetFeatureReportAsync (reportId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IHidFeatureReport := new Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
                  Retval.m_IHidFeatureReport.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
      end return;
   end;

   function CreateOutputReport
   (
      this : in out HidDevice
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidOutputReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidOutputReport;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidOutputReport do
         Hr := this.m_IHidDevice.all.CreateOutputReport (m_ComRetVal'Access);
         Retval.m_IHidOutputReport := new Windows.Devices.HumanInterfaceDevice.IHidOutputReport;
         Retval.m_IHidOutputReport.all := m_ComRetVal;
      end return;
   end;

   function CreateOutputReport
   (
      this : in out HidDevice;
      reportId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidOutputReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidOutputReport;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidOutputReport do
         Hr := this.m_IHidDevice.all.CreateOutputReport (reportId, m_ComRetVal'Access);
         Retval.m_IHidOutputReport := new Windows.Devices.HumanInterfaceDevice.IHidOutputReport;
         Retval.m_IHidOutputReport.all := m_ComRetVal;
      end return;
   end;

   function CreateFeatureReport
   (
      this : in out HidDevice
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport do
         Hr := this.m_IHidDevice.all.CreateFeatureReport (m_ComRetVal'Access);
         Retval.m_IHidFeatureReport := new Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
         Retval.m_IHidFeatureReport.all := m_ComRetVal;
      end return;
   end;

   function CreateFeatureReport
   (
      this : in out HidDevice;
      reportId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidFeatureReport do
         Hr := this.m_IHidDevice.all.CreateFeatureReport (reportId, m_ComRetVal'Access);
         Retval.m_IHidFeatureReport := new Windows.Devices.HumanInterfaceDevice.IHidFeatureReport;
         Retval.m_IHidFeatureReport.all := m_ComRetVal;
      end return;
   end;

   function SendOutputReportAsync
   (
      this : in out HidDevice;
      outputReport : Windows.Devices.HumanInterfaceDevice.HidOutputReport'Class
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHidDevice.all.SendOutputReportAsync (outputReport.m_IHidOutputReport.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function SendFeatureReportAsync
   (
      this : in out HidDevice;
      featureReport : Windows.Devices.HumanInterfaceDevice.HidFeatureReport'Class
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_UInt32.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_UInt32.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.UInt32;
      m_IID            : aliased WinRt.IID := (4016060511, 48760, 22603, (170, 239, 120, 41, 173, 162, 176, 222 )); -- UInt32;
      m_HandlerIID     : aliased WinRt.IID := (2470688487, 58322, 24138, (171, 45, 43, 206, 73, 25, 166, 164 ));
      m_Handler        : AsyncOperationCompletedHandler_UInt32.Kind := new AsyncOperationCompletedHandler_UInt32.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_UInt32.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_UInt32.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_UInt32.Kind_Delegate, AsyncOperationCompletedHandler_UInt32.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IHidDevice.all.SendFeatureReportAsync (featureReport.m_IHidFeatureReport.all, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function GetBooleanControlDescriptions
   (
      this : in out HidDevice;
      reportType : Windows.Devices.HumanInterfaceDevice.HidReportType;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return IVectorView_IHidBooleanControlDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidBooleanControlDescription.Kind;
   begin
      Hr := this.m_IHidDevice.all.GetBooleanControlDescriptions (reportType, usagePage, usageId, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidBooleanControlDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetNumericControlDescriptions
   (
      this : in out HidDevice;
      reportType : Windows.Devices.HumanInterfaceDevice.HidReportType;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return IVectorView_IHidNumericControlDescription.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidNumericControlDescription.Kind;
   begin
      Hr := this.m_IHidDevice.all.GetNumericControlDescriptions (reportType, usagePage, usageId, m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidNumericControlDescription (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function add_InputReportReceived
   (
      this : in out HidDevice;
      reportHandler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IHidDevice.all.add_InputReportReceived (reportHandler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_InputReportReceived
   (
      this : in out HidDevice;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidDevice.all.remove_InputReportReceived (token);
   end;

   procedure Close
   (
      this : in out HidDevice
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.Foundation.IClosable := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.Devices.HumanInterfaceDevice.IHidDevice_Interface, WinRt.Windows.Foundation.IClosable, WinRt.Windows.Foundation.IID_IClosable'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IHidDevice.all);
      Hr := m_Interface.Close;
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidFeatureReport

   procedure Initialize (this : in out HidFeatureReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidFeatureReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidFeatureReport, IHidFeatureReport_Ptr);
   begin
      if this.m_IHidFeatureReport /= null then
         if this.m_IHidFeatureReport.all /= null then
            RefCount := this.m_IHidFeatureReport.all.Release;
            Free (this.m_IHidFeatureReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidFeatureReport

   function get_Id
   (
      this : in out HidFeatureReport
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidFeatureReport.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out HidFeatureReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHidFeatureReport.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Data
   (
      this : in out HidFeatureReport;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidFeatureReport.all.put_Data (value);
   end;

   function GetBooleanControl
   (
      this : in out HidFeatureReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidFeatureReport.all.GetBooleanControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetBooleanControlByDescription
   (
      this : in out HidFeatureReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidFeatureReport.all.GetBooleanControlByDescription (controlDescription.m_IHidBooleanControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControl
   (
      this : in out HidFeatureReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidFeatureReport.all.GetNumericControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControlByDescription
   (
      this : in out HidFeatureReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidFeatureReport.all.GetNumericControlByDescription (controlDescription.m_IHidNumericControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidInputReport

   procedure Initialize (this : in out HidInputReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidInputReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidInputReport, IHidInputReport_Ptr);
   begin
      if this.m_IHidInputReport /= null then
         if this.m_IHidInputReport.all /= null then
            RefCount := this.m_IHidInputReport.all.Release;
            Free (this.m_IHidInputReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidInputReport

   function get_Id
   (
      this : in out HidInputReport
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidInputReport.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out HidInputReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHidInputReport.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ActivatedBooleanControls
   (
      this : in out HidInputReport
   )
   return IVectorView_IHidBooleanControl.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidBooleanControl.Kind;
   begin
      Hr := this.m_IHidInputReport.all.get_ActivatedBooleanControls (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidBooleanControl (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_TransitionedBooleanControls
   (
      this : in out HidInputReport
   )
   return IVectorView_IHidBooleanControl.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidBooleanControl.Kind;
   begin
      Hr := this.m_IHidInputReport.all.get_TransitionedBooleanControls (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidBooleanControl (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function GetBooleanControl
   (
      this : in out HidInputReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidInputReport.all.GetBooleanControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetBooleanControlByDescription
   (
      this : in out HidInputReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidInputReport.all.GetBooleanControlByDescription (controlDescription.m_IHidBooleanControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControl
   (
      this : in out HidInputReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidInputReport.all.GetNumericControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControlByDescription
   (
      this : in out HidInputReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidInputReport.all.GetNumericControlByDescription (controlDescription.m_IHidNumericControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidInputReportReceivedEventArgs

   procedure Initialize (this : in out HidInputReportReceivedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidInputReportReceivedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidInputReportReceivedEventArgs, IHidInputReportReceivedEventArgs_Ptr);
   begin
      if this.m_IHidInputReportReceivedEventArgs /= null then
         if this.m_IHidInputReportReceivedEventArgs.all /= null then
            RefCount := this.m_IHidInputReportReceivedEventArgs.all.Release;
            Free (this.m_IHidInputReportReceivedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidInputReportReceivedEventArgs

   function get_Report
   (
      this : in out HidInputReportReceivedEventArgs
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidInputReport;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidInputReport do
         Hr := this.m_IHidInputReportReceivedEventArgs.all.get_Report (m_ComRetVal'Access);
         Retval.m_IHidInputReport := new Windows.Devices.HumanInterfaceDevice.IHidInputReport;
         Retval.m_IHidInputReport.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidNumericControl

   procedure Initialize (this : in out HidNumericControl) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidNumericControl) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidNumericControl, IHidNumericControl_Ptr);
   begin
      if this.m_IHidNumericControl /= null then
         if this.m_IHidNumericControl.all /= null then
            RefCount := this.m_IHidNumericControl.all.Release;
            Free (this.m_IHidNumericControl);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidNumericControl

   function get_Id
   (
      this : in out HidNumericControl
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControl.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsGrouped
   (
      this : in out HidNumericControl
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHidNumericControl.all.get_IsGrouped (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidNumericControl
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidNumericControl.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidNumericControl
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidNumericControl.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Value
   (
      this : in out HidNumericControl
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IHidNumericControl.all.get_Value (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Value
   (
      this : in out HidNumericControl;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidNumericControl.all.put_Value (value);
   end;

   function get_ScaledValue
   (
      this : in out HidNumericControl
   )
   return WinRt.Int64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int64;
   begin
      Hr := this.m_IHidNumericControl.all.get_ScaledValue (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ScaledValue
   (
      this : in out HidNumericControl;
      value : WinRt.Int64
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidNumericControl.all.put_ScaledValue (value);
   end;

   function get_ControlDescription
   (
      this : in out HidNumericControl
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControlDescription;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription do
         Hr := this.m_IHidNumericControl.all.get_ControlDescription (m_ComRetVal'Access);
         Retval.m_IHidNumericControlDescription := new Windows.Devices.HumanInterfaceDevice.IHidNumericControlDescription;
         Retval.m_IHidNumericControlDescription.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidNumericControlDescription

   procedure Initialize (this : in out HidNumericControlDescription) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidNumericControlDescription) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidNumericControlDescription, IHidNumericControlDescription_Ptr);
   begin
      if this.m_IHidNumericControlDescription /= null then
         if this.m_IHidNumericControlDescription.all /= null then
            RefCount := this.m_IHidNumericControlDescription.all.Release;
            Free (this.m_IHidNumericControlDescription);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidNumericControlDescription

   function get_Id
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportId
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_ReportId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportType
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidReportType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.HidReportType;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_ReportType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportSize
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_ReportSize (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ReportCount
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_ReportCount (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsagePage
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_UsagePage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UsageId
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_UsageId (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LogicalMinimum
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_LogicalMinimum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_LogicalMaximum
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_LogicalMaximum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhysicalMinimum
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_PhysicalMinimum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PhysicalMaximum
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Int32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Int32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_PhysicalMaximum (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_UnitExponent
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_UnitExponent (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Unit
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.UInt32 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt32;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_Unit (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsAbsolute
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_IsAbsolute (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_HasNull
   (
      this : in out HidNumericControlDescription
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_HasNull (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ParentCollections
   (
      this : in out HidNumericControlDescription
   )
   return IVectorView_IHidCollection.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IHidCollection.Kind;
   begin
      Hr := this.m_IHidNumericControlDescription.all.get_ParentCollections (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IHidCollection (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for HidOutputReport

   procedure Initialize (this : in out HidOutputReport) is
   begin
      null;
   end;

   procedure Finalize (this : in out HidOutputReport) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IHidOutputReport, IHidOutputReport_Ptr);
   begin
      if this.m_IHidOutputReport /= null then
         if this.m_IHidOutputReport.all /= null then
            RefCount := this.m_IHidOutputReport.all.Release;
            Free (this.m_IHidOutputReport);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for HidOutputReport

   function get_Id
   (
      this : in out HidOutputReport
   )
   return WinRt.UInt16 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt16;
   begin
      Hr := this.m_IHidOutputReport.all.get_Id (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_Data
   (
      this : in out HidOutputReport
   )
   return WinRt.Windows.Storage.Streams.IBuffer is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Storage.Streams.IBuffer;
   begin
      Hr := this.m_IHidOutputReport.all.get_Data (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Data
   (
      this : in out HidOutputReport;
      value : Windows.Storage.Streams.IBuffer
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IHidOutputReport.all.put_Data (value);
   end;

   function GetBooleanControl
   (
      this : in out HidOutputReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidOutputReport.all.GetBooleanControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetBooleanControlByDescription
   (
      this : in out HidOutputReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidBooleanControl do
         Hr := this.m_IHidOutputReport.all.GetBooleanControlByDescription (controlDescription.m_IHidBooleanControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidBooleanControl := new Windows.Devices.HumanInterfaceDevice.IHidBooleanControl;
         Retval.m_IHidBooleanControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControl
   (
      this : in out HidOutputReport;
      usagePage : WinRt.UInt16;
      usageId : WinRt.UInt16
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidOutputReport.all.GetNumericControl (usagePage, usageId, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

   function GetNumericControlByDescription
   (
      this : in out HidOutputReport;
      controlDescription : Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription'Class
   )
   return WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
   begin
      return RetVal : WinRt.Windows.Devices.HumanInterfaceDevice.HidNumericControl do
         Hr := this.m_IHidOutputReport.all.GetNumericControlByDescription (controlDescription.m_IHidNumericControlDescription.all, m_ComRetVal'Access);
         Retval.m_IHidNumericControl := new Windows.Devices.HumanInterfaceDevice.IHidNumericControl;
         Retval.m_IHidNumericControl.all := m_ComRetVal;
      end return;
   end;

end;

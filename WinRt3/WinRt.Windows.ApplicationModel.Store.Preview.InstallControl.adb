--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with WinRt.Windows.Foundation.Collections;
with WinRt.Windows.Management.Deployment;
with WinRt.Windows.System;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.ApplicationModel.Store.Preview.InstallControl is

   package IAsyncOperation_Boolean is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Boolean);
   package AsyncOperationCompletedHandler_Boolean is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Boolean);

   package IAsyncOperation_AppInstallItem is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem);
   package AsyncOperationCompletedHandler_AppInstallItem is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem);

   package IAsyncOperation_GenericObject is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.GenericObject);
   package AsyncOperationCompletedHandler_GenericObject is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.GenericObject);

   package IAsyncOperation_GetEntitlementResult is new WinRt.Windows.Foundation.IAsyncOperation (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult);
   package AsyncOperationCompletedHandler_GetEntitlementResult is new WinRt.Windows.Foundation.AsyncOperationCompletedHandler (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult);

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallItem

   procedure Initialize (this : in out AppInstallItem) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallItem) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallItem, IAppInstallItem_Ptr);
   begin
      if this.m_IAppInstallItem /= null then
         if this.m_IAppInstallItem.all /= null then
            RefCount := this.m_IAppInstallItem.all.Release;
            Free (this.m_IAppInstallItem);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallItem

   function get_ProductId
   (
      this : in out AppInstallItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInstallItem.all.get_ProductId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_PackageFamilyName
   (
      this : in out AppInstallItem
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInstallItem.all.get_PackageFamilyName (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   function get_InstallType
   (
      this : in out AppInstallItem
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType;
   begin
      Hr := this.m_IAppInstallItem.all.get_InstallType (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_IsUserInitiated
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstallItem.all.get_IsUserInitiated (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function GetCurrentStatus
   (
      this : in out AppInstallItem
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus do
         Hr := this.m_IAppInstallItem.all.GetCurrentStatus (m_ComRetVal'Access);
         Retval.m_IAppInstallStatus := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus;
         Retval.m_IAppInstallStatus.all := m_ComRetVal;
      end return;
   end;

   procedure Cancel
   (
      this : in out AppInstallItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallItem.all.Cancel;
   end;

   procedure Pause
   (
      this : in out AppInstallItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallItem.all.Pause;
   end;

   procedure Restart
   (
      this : in out AppInstallItem
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallItem.all.Restart;
   end;

   function add_Completed
   (
      this : in out AppInstallItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppInstallItem.all.add_Completed (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_Completed
   (
      this : in out AppInstallItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallItem.all.remove_Completed (token);
   end;

   function add_StatusChanged
   (
      this : in out AppInstallItem;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppInstallItem.all.add_StatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_StatusChanged
   (
      this : in out AppInstallItem;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallItem.all.remove_StatusChanged (token);
   end;

   procedure Cancel
   (
      this : in out AppInstallItem;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.Cancel (HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   procedure Pause
   (
      this : in out AppInstallItem;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.Pause (HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   procedure Restart
   (
      this : in out AppInstallItem;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.Restart (HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   function get_Children
   (
      this : in out AppInstallItem
   )
   return IVectorView_IAppInstallItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppInstallItem.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_Children (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAppInstallItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function get_ItemOperationsMightAffectOtherItems
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_ItemOperationsMightAffectOtherItems (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_LaunchAfterInstall
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_LaunchAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_LaunchAfterInstall
   (
      this : in out AppInstallItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem4'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_LaunchAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PinToDesktopAfterInstall
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_PinToDesktopAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToDesktopAfterInstall
   (
      this : in out AppInstallItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_PinToDesktopAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PinToStartAfterInstall
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_PinToStartAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToStartAfterInstall
   (
      this : in out AppInstallItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_PinToStartAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PinToTaskbarAfterInstall
   (
      this : in out AppInstallItem
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_PinToTaskbarAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToTaskbarAfterInstall
   (
      this : in out AppInstallItem;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_PinToTaskbarAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CompletedInstallToastNotificationMode
   (
      this : in out AppInstallItem
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_CompletedInstallToastNotificationMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CompletedInstallToastNotificationMode
   (
      this : in out AppInstallItem;
      value : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_CompletedInstallToastNotificationMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstallInProgressToastNotificationMode
   (
      this : in out AppInstallItem
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.get_InstallInProgressToastNotificationMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_InstallInProgressToastNotificationMode
   (
      this : in out AppInstallItem;
      value : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallItem5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallItem.all);
      Hr := m_Interface.put_InstallInProgressToastNotificationMode (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallManager

   procedure Initialize (this : in out AppInstallManager) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallManager) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallManager, IAppInstallManager_Ptr);
   begin
      if this.m_IAppInstallManager /= null then
         if this.m_IAppInstallManager.all /= null then
            RefCount := this.m_IAppInstallManager.all.Release;
            Free (this.m_IAppInstallManager);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppInstallManager

   function Constructor return AppInstallManager is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager");
      m_ComRetVal  : aliased Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager;
   begin
      return RetVal : AppInstallManager do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppInstallManager := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager;
            Retval.m_IAppInstallManager.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallManager

   function get_AppInstallItems
   (
      this : in out AppInstallManager
   )
   return IVectorView_IAppInstallItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppInstallItem.Kind;
   begin
      Hr := this.m_IAppInstallManager.all.get_AppInstallItems (m_ComRetVal'Access);
      m_GenericRetVal := QInterface_IVectorView_IAppInstallItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   procedure Cancel
   (
      this : in out AppInstallManager;
      productId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
   begin
      Hr := this.m_IAppInstallManager.all.Cancel (HStr_productId);
      Hr := WindowsDeleteString (HStr_productId);
   end;

   procedure Pause
   (
      this : in out AppInstallManager;
      productId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
   begin
      Hr := this.m_IAppInstallManager.all.Pause (HStr_productId);
      Hr := WindowsDeleteString (HStr_productId);
   end;

   procedure Restart
   (
      this : in out AppInstallManager;
      productId : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
   begin
      Hr := this.m_IAppInstallManager.all.Restart (HStr_productId);
      Hr := WindowsDeleteString (HStr_productId);
   end;

   function add_ItemCompleted
   (
      this : in out AppInstallManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppInstallManager.all.add_ItemCompleted (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemCompleted
   (
      this : in out AppInstallManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallManager.all.remove_ItemCompleted (token);
   end;

   function add_ItemStatusChanged
   (
      this : in out AppInstallManager;
      handler : GenericObject
   )
   return WinRt.Windows.Foundation.EventRegistrationToken is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
   begin
      Hr := this.m_IAppInstallManager.all.add_ItemStatusChanged (handler, m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure remove_ItemStatusChanged
   (
      this : in out AppInstallManager;
      token : Windows.Foundation.EventRegistrationToken
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallManager.all.remove_ItemStatusChanged (token);
   end;

   function get_AutoUpdateSetting
   (
      this : in out AppInstallManager
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting;
   begin
      Hr := this.m_IAppInstallManager.all.get_AutoUpdateSetting (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AutoUpdateSetting
   (
      this : in out AppInstallManager;
      value : Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallManager.all.put_AutoUpdateSetting (value);
   end;

   function get_AcquisitionIdentity
   (
      this : in out AppInstallManager
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInstallManager.all.get_AcquisitionIdentity (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_AcquisitionIdentity
   (
      this : in out AppInstallManager;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppInstallManager.all.put_AcquisitionIdentity (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function GetIsApplicableAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppInstallManager.all.GetIsApplicableAsync (HStr_productId, HStr_skuId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_skuId);
      return m_RetVal;
   end;

   function StartAppInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      repair : WinRt.Boolean;
      forceUseOfNonRemovableStorage : WinRt.Boolean
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         Hr := this.m_IAppInstallManager.all.StartAppInstallAsync (HStr_productId, HStr_skuId, repair, forceUseOfNonRemovableStorage, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
      end return;
   end;

   function UpdateAppByPackageFamilyNameAsync
   (
      this : in out AppInstallManager;
      packageFamilyName : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         Hr := this.m_IAppInstallManager.all.UpdateAppByPackageFamilyNameAsync (HStr_packageFamilyName, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFamilyName);
      end return;
   end;

   function SearchForUpdatesAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         Hr := this.m_IAppInstallManager.all.SearchForUpdatesAsync (HStr_productId, HStr_skuId, m_ComRetVal'Access);
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
      end return;
   end;

   function SearchForAllUpdatesAsync
   (
      this : in out AppInstallManager
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppInstallManager.all.SearchForAllUpdatesAsync (m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      return m_RetVal;
   end;

   function IsStoreBlockedByPolicyAsync
   (
      this : in out AppInstallManager;
      storeClientName : WinRt.WString;
      storeClientPublisher : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeClientName : WinRt.HString := To_HString (storeClientName);
      HStr_storeClientPublisher : WinRt.HString := To_HString (storeClientPublisher);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppInstallManager.all.IsStoreBlockedByPolicyAsync (HStr_storeClientName, HStr_storeClientPublisher, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_storeClientName);
      Hr := WindowsDeleteString (HStr_storeClientPublisher);
      return m_RetVal;
   end;

   function GetIsAppAllowedToInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

   begin
      Hr := this.m_IAppInstallManager.all.GetIsAppAllowedToInstallAsync (HStr_productId, m_ComRetVal'Access);
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      return m_RetVal;
   end;

   function StartAppInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      repair : WinRt.Boolean;
      forceUseOfNonRemovableStorage : WinRt.Boolean;
      catalogId : WinRt.WString;
      bundleId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_bundleId : WinRt.HString := To_HString (bundleId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.StartAppInstallAsync (HStr_productId, HStr_skuId, repair, forceUseOfNonRemovableStorage, HStr_catalogId, HStr_bundleId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
         Hr := WindowsDeleteString (HStr_catalogId);
         Hr := WindowsDeleteString (HStr_bundleId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function UpdateAppByPackageFamilyNameAsync
   (
      this : in out AppInstallManager;
      packageFamilyName : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.UpdateAppByPackageFamilyNameAsync (HStr_packageFamilyName, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFamilyName);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function SearchForUpdatesAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      catalogId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.SearchForUpdatesAsync (HStr_productId, HStr_skuId, HStr_catalogId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
         Hr := WindowsDeleteString (HStr_catalogId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function SearchForAllUpdatesAsync
   (
      this : in out AppInstallManager;
      correlationVector : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.SearchForAllUpdatesAsync (HStr_correlationVector, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function GetIsAppAllowedToInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      catalogId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.GetIsAppAllowedToInstallAsync (HStr_productId, HStr_skuId, HStr_catalogId, HStr_correlationVector, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_skuId);
      Hr := WindowsDeleteString (HStr_catalogId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   procedure Cancel
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.Cancel (HStr_productId, HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   procedure Pause
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.Pause (HStr_productId, HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   procedure Restart
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.Restart (HStr_productId, HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   function StartProductInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      catalogId : WinRt.WString;
      flightId : WinRt.WString;
      clientId : WinRt.WString;
      repair : WinRt.Boolean;
      forceUseOfNonRemovableStorage : WinRt.Boolean;
      correlationVector : WinRt.WString;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_flightId : WinRt.HString := To_HString (flightId);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.StartProductInstallAsync (HStr_productId, HStr_catalogId, HStr_flightId, HStr_clientId, repair, forceUseOfNonRemovableStorage, HStr_correlationVector, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_catalogId);
      Hr := WindowsDeleteString (HStr_flightId);
      Hr := WindowsDeleteString (HStr_clientId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function StartProductInstallForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      catalogId : WinRt.WString;
      flightId : WinRt.WString;
      clientId : WinRt.WString;
      repair : WinRt.Boolean;
      forceUseOfNonRemovableStorage : WinRt.Boolean;
      correlationVector : WinRt.WString;
      targetVolume : Windows.Management.Deployment.PackageVolume'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_flightId : WinRt.HString := To_HString (flightId);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.StartProductInstallForUserAsync (user.m_IUser.all, HStr_productId, HStr_catalogId, HStr_flightId, HStr_clientId, repair, forceUseOfNonRemovableStorage, HStr_correlationVector, targetVolume.m_IPackageVolume.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_catalogId);
      Hr := WindowsDeleteString (HStr_flightId);
      Hr := WindowsDeleteString (HStr_clientId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function UpdateAppByPackageFamilyNameForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      packageFamilyName : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_packageFamilyName : WinRt.HString := To_HString (packageFamilyName);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.UpdateAppByPackageFamilyNameForUserAsync (user.m_IUser.all, HStr_packageFamilyName, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_packageFamilyName);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function SearchForUpdatesForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      catalogId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.SearchForUpdatesForUserAsync (user.m_IUser.all, HStr_productId, HStr_skuId, HStr_catalogId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
         Hr := WindowsDeleteString (HStr_catalogId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function SearchForAllUpdatesForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      correlationVector : WinRt.WString
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.SearchForAllUpdatesForUserAsync (user.m_IUser.all, HStr_correlationVector, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function GetIsAppAllowedToInstallForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      catalogId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_catalogId : WinRt.HString := To_HString (catalogId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.GetIsAppAllowedToInstallForUserAsync (user.m_IUser.all, HStr_productId, HStr_skuId, HStr_catalogId, HStr_correlationVector, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_skuId);
      Hr := WindowsDeleteString (HStr_catalogId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function GetIsApplicableForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      skuId : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.GetIsApplicableForUserAsync (user.m_IUser.all, HStr_productId, HStr_skuId, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_skuId);
      return m_RetVal;
   end;

   procedure MoveToFrontOfDownloadQueue
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      correlationVector : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.MoveToFrontOfDownloadQueue (HStr_productId, HStr_correlationVector);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_correlationVector);
   end;

   function GetFreeUserEntitlementAsync
   (
      this : in out AppInstallManager;
      storeId : WinRt.WString;
      campaignId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      HStr_campaignId : WinRt.HString := To_HString (campaignId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GetEntitlementResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GetEntitlementResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
      m_IID            : aliased WinRt.IID := (1277482990, 19346, 23786, (164, 244, 122, 93, 110, 145, 144, 98 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult;
      m_HandlerIID     : aliased WinRt.IID := (1649778320, 7178, 22280, (146, 48, 3, 166, 88, 101, 45, 179 ));
      m_Handler        : AsyncOperationCompletedHandler_GetEntitlementResult.Kind := new AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GetEntitlementResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GetEntitlementResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate, AsyncOperationCompletedHandler_GetEntitlementResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.GetFreeUserEntitlementAsync (HStr_storeId, HStr_campaignId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGetEntitlementResult := new Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
                  Retval.m_IGetEntitlementResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
         Hr := WindowsDeleteString (HStr_campaignId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function GetFreeUserEntitlementForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      storeId : WinRt.WString;
      campaignId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      HStr_campaignId : WinRt.HString := To_HString (campaignId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GetEntitlementResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GetEntitlementResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
      m_IID            : aliased WinRt.IID := (1277482990, 19346, 23786, (164, 244, 122, 93, 110, 145, 144, 98 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult;
      m_HandlerIID     : aliased WinRt.IID := (1649778320, 7178, 22280, (146, 48, 3, 166, 88, 101, 45, 179 ));
      m_Handler        : AsyncOperationCompletedHandler_GetEntitlementResult.Kind := new AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GetEntitlementResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GetEntitlementResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate, AsyncOperationCompletedHandler_GetEntitlementResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.GetFreeUserEntitlementForUserAsync (user.m_IUser.all, HStr_storeId, HStr_campaignId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGetEntitlementResult := new Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
                  Retval.m_IGetEntitlementResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
         Hr := WindowsDeleteString (HStr_campaignId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function GetFreeDeviceEntitlementAsync
   (
      this : in out AppInstallManager;
      storeId : WinRt.WString;
      campaignId : WinRt.WString;
      correlationVector : WinRt.WString
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_storeId : WinRt.HString := To_HString (storeId);
      HStr_campaignId : WinRt.HString := To_HString (campaignId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GetEntitlementResult.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GetEntitlementResult.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
      m_IID            : aliased WinRt.IID := (1277482990, 19346, 23786, (164, 244, 122, 93, 110, 145, 144, 98 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult;
      m_HandlerIID     : aliased WinRt.IID := (1649778320, 7178, 22280, (146, 48, 3, 166, 88, 101, 45, 179 ));
      m_Handler        : AsyncOperationCompletedHandler_GetEntitlementResult.Kind := new AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GetEntitlementResult.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GetEntitlementResult.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GetEntitlementResult.Kind_Delegate, AsyncOperationCompletedHandler_GetEntitlementResult.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager4'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.GetFreeDeviceEntitlementAsync (HStr_storeId, HStr_campaignId, HStr_correlationVector, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IGetEntitlementResult := new Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult;
                  Retval.m_IGetEntitlementResult.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_storeId);
         Hr := WindowsDeleteString (HStr_campaignId);
         Hr := WindowsDeleteString (HStr_correlationVector);
      end return;
   end;

   function get_AppInstallItemsWithGroupSupport
   (
      this : in out AppInstallManager
   )
   return IVectorView_IAppInstallItem.Kind is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager5 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased GenericObject;
      m_GenericRetval  : aliased IVectorView_IAppInstallItem.Kind;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager5, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager5'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.get_AppInstallItemsWithGroupSupport (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      m_GenericRetVal := QInterface_IVectorView_IAppInstallItem (m_ComRetVal);
      m_RefCount := m_ComRetVal.Release;
      return m_GenericRetVal;
   end;

   function SearchForAllUpdatesAsync
   (
      this : in out AppInstallManager;
      correlationVector : WinRt.WString;
      clientId : WinRt.WString;
      updateOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.SearchForAllUpdatesAsync (HStr_correlationVector, HStr_clientId, updateOptions.m_IAppUpdateOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      Hr := WindowsDeleteString (HStr_clientId);
      return m_RetVal;
   end;

   function SearchForAllUpdatesForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      correlationVector : WinRt.WString;
      clientId : WinRt.WString;
      updateOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.SearchForAllUpdatesForUserAsync (user.m_IUser.all, HStr_correlationVector, HStr_clientId, updateOptions.m_IAppUpdateOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      Hr := WindowsDeleteString (HStr_clientId);
      return m_RetVal;
   end;

   function SearchForUpdatesAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      correlationVector : WinRt.WString;
      clientId : WinRt.WString;
      updateOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.SearchForUpdatesAsync (HStr_productId, HStr_skuId, HStr_correlationVector, HStr_clientId, updateOptions.m_IAppUpdateOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
         Hr := WindowsDeleteString (HStr_correlationVector);
         Hr := WindowsDeleteString (HStr_clientId);
      end return;
   end;

   function SearchForUpdatesForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      skuId : WinRt.WString;
      correlationVector : WinRt.WString;
      clientId : WinRt.WString;
      updateOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions'Class
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_skuId : WinRt.HString := To_HString (skuId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_AppInstallItem.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_AppInstallItem.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
      m_IID            : aliased WinRt.IID := (2209684671, 13792, 22957, (171, 62, 255, 179, 240, 55, 4, 249 )); -- Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem;
      m_HandlerIID     : aliased WinRt.IID := (2824609003, 3724, 21538, (178, 239, 173, 72, 237, 51, 135, 6 ));
      m_Handler        : AsyncOperationCompletedHandler_AppInstallItem.Kind := new AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_AppInstallItem.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_AppInstallItem.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_AppInstallItem.Kind_Delegate, AsyncOperationCompletedHandler_AppInstallItem.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         m_Interface := QInterface (this.m_IAppInstallManager.all);
         Hr := m_Interface.SearchForUpdatesForUserAsync (user.m_IUser.all, HStr_productId, HStr_skuId, HStr_correlationVector, HStr_clientId, updateOptions.m_IAppUpdateOptions.all, m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         if Hr = S_OK then
            m_AsyncOperation := QI (m_ComRetVal);
            m_RefCount := m_ComRetVal.Release;
            if m_AsyncOperation /= null then
               Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
               while m_Captured = m_Compare loop
                  m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
                  m_Captured := m_Completed;
               end loop;
               if m_AsyncStatus = Completed_e then
                  Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
                  Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
                  Retval.m_IAppInstallItem.all := m_RetVal;
               end if;
               m_RefCount := m_AsyncOperation.Release;
               m_RefCount := m_Handler.Release;
               if m_RefCount = 0 then
                  Free (m_Handler);
               end if;
            end if;
         end if;
         Hr := WindowsDeleteString (HStr_productId);
         Hr := WindowsDeleteString (HStr_skuId);
         Hr := WindowsDeleteString (HStr_correlationVector);
         Hr := WindowsDeleteString (HStr_clientId);
      end return;
   end;

   function StartProductInstallAsync
   (
      this : in out AppInstallManager;
      productId : WinRt.WString;
      flightId : WinRt.WString;
      clientId : WinRt.WString;
      correlationVector : WinRt.WString;
      installOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_flightId : WinRt.HString := To_HString (flightId);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.StartProductInstallAsync (HStr_productId, HStr_flightId, HStr_clientId, HStr_correlationVector, installOptions.m_IAppInstallOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_flightId);
      Hr := WindowsDeleteString (HStr_clientId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function StartProductInstallForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      productId : WinRt.WString;
      flightId : WinRt.WString;
      clientId : WinRt.WString;
      correlationVector : WinRt.WString;
      installOptions : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions'Class
   )
   return WinRt.GenericObject is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_productId : WinRt.HString := To_HString (productId);
      HStr_flightId : WinRt.HString := To_HString (flightId);
      HStr_clientId : WinRt.HString := To_HString (clientId);
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_GenericObject.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_GenericObject.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.GenericObject;
      m_IID            : aliased WinRt.IID := (2456281351, 10950, 24077, (134, 233, 49, 84, 246, 22, 198, 139 )); -- GenericObject;
      m_HandlerIID     : aliased WinRt.IID := (4180409934, 53142, 21711, (171, 137, 56, 140, 160, 4, 181, 169 ));
      m_Handler        : AsyncOperationCompletedHandler_GenericObject.Kind := new AsyncOperationCompletedHandler_GenericObject.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_GenericObject.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_GenericObject.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_GenericObject.Kind_Delegate, AsyncOperationCompletedHandler_GenericObject.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.StartProductInstallForUserAsync (user.m_IUser.all, HStr_productId, HStr_flightId, HStr_clientId, HStr_correlationVector, installOptions.m_IAppInstallOptions.all, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_productId);
      Hr := WindowsDeleteString (HStr_flightId);
      Hr := WindowsDeleteString (HStr_clientId);
      Hr := WindowsDeleteString (HStr_correlationVector);
      return m_RetVal;
   end;

   function GetIsPackageIdentityAllowedToInstallAsync
   (
      this : in out AppInstallManager;
      correlationVector : WinRt.WString;
      packageIdentityName : WinRt.WString;
      publisherCertificateName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_packageIdentityName : WinRt.HString := To_HString (packageIdentityName);
      HStr_publisherCertificateName : WinRt.HString := To_HString (publisherCertificateName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.GetIsPackageIdentityAllowedToInstallAsync (HStr_correlationVector, HStr_packageIdentityName, HStr_publisherCertificateName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      Hr := WindowsDeleteString (HStr_packageIdentityName);
      Hr := WindowsDeleteString (HStr_publisherCertificateName);
      return m_RetVal;
   end;

   function GetIsPackageIdentityAllowedToInstallForUserAsync
   (
      this : in out AppInstallManager;
      user : Windows.System.User'Class;
      correlationVector : WinRt.WString;
      packageIdentityName : WinRt.WString;
      publisherCertificateName : WinRt.WString
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_correlationVector : WinRt.HString := To_HString (correlationVector);
      HStr_packageIdentityName : WinRt.HString := To_HString (packageIdentityName);
      HStr_publisherCertificateName : WinRt.HString := To_HString (publisherCertificateName);
      m_Temp           : WinRt.Int32 := 0;
      m_Completed      : WinRt.UInt32 := 0;
      m_Captured       : WinRt.UInt32 := 0;
      m_Compare        : constant WinRt.UInt32 := 0;

      use type WinRt.Windows.Foundation.AsyncStatus;
      use type IAsyncOperation_Boolean.Kind;

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus);

      m_AsyncOperation : aliased IAsyncOperation_Boolean.Kind;
      m_AsyncStatus    : aliased WinRt.Windows.Foundation.AsyncStatus;
      m_ComRetVal      : aliased WinRt.GenericObject := null;
      m_RetVal         : aliased WinRt.Boolean;
      m_IID            : aliased WinRt.IID := (3451252659, 22408, 20637, (155, 225, 113, 204, 184, 163, 54, 42 )); -- Boolean;
      m_HandlerIID     : aliased WinRt.IID := (3251884450, 44567, 23135, (181, 162, 189, 204, 136, 68, 136, 154 ));
      m_Handler        : AsyncOperationCompletedHandler_Boolean.Kind := new AsyncOperationCompletedHandler_Boolean.Kind_Delegate'(IAsyncOperation_Callback'Access, 1, m_HandlerIID'Unchecked_Access);

      function QI is new Generic_QueryInterface (GenericObject_Interface, IAsyncOperation_Boolean.Kind, m_IID'Unchecked_Access);
      function Convert is new Ada.Unchecked_Conversion (AsyncOperationCompletedHandler_Boolean.Kind, GenericObject);
      procedure Free is new Ada.Unchecked_Deallocation (AsyncOperationCompletedHandler_Boolean.Kind_Delegate, AsyncOperationCompletedHandler_Boolean.Kind);

      procedure IAsyncOperation_Callback (asyncInfo : WinRt.GenericObject; asyncStatus: WinRt.Windows.Foundation.AsyncStatus) is
         Hr        : WinRt.HResult := 0;
      begin
         if asyncStatus = Completed_e then
            m_AsyncStatus := AsyncStatus;
         end if;
         m_Completed := 1;
         WakeByAddressSingle (m_Completed'Address);
      end;

      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager6'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.GetIsPackageIdentityAllowedToInstallForUserAsync (user.m_IUser.all, HStr_correlationVector, HStr_packageIdentityName, HStr_publisherCertificateName, m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      if Hr = S_OK then
         m_AsyncOperation := QI (m_ComRetVal);
         m_RefCount := m_ComRetVal.Release;
         if m_AsyncOperation /= null then
            Hr := m_AsyncOperation.Put_Completed (Convert (m_Handler));
            while m_Captured = m_Compare loop
               m_Temp := WaitOnAddress (m_Completed'Address, m_Compare'Address, 4, 4294967295);
               m_Captured := m_Completed;
            end loop;
            if m_AsyncStatus = Completed_e then
               Hr := m_AsyncOperation.GetResults (m_RetVal'Access);
            end if;
            m_RefCount := m_AsyncOperation.Release;
            m_RefCount := m_Handler.Release;
            if m_RefCount = 0 then
               Free (m_Handler);
            end if;
         end if;
      end if;
      Hr := WindowsDeleteString (HStr_correlationVector);
      Hr := WindowsDeleteString (HStr_packageIdentityName);
      Hr := WindowsDeleteString (HStr_publisherCertificateName);
      return m_RetVal;
   end;

   function get_CanInstallForAllUsers
   (
      this : in out AppInstallManager
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager7 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager7, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallManager7'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallManager.all);
      Hr := m_Interface.get_CanInstallForAllUsers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallManagerItemEventArgs

   procedure Initialize (this : in out AppInstallManagerItemEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallManagerItemEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallManagerItemEventArgs, IAppInstallManagerItemEventArgs_Ptr);
   begin
      if this.m_IAppInstallManagerItemEventArgs /= null then
         if this.m_IAppInstallManagerItemEventArgs.all /= null then
            RefCount := this.m_IAppInstallManagerItemEventArgs.all.Release;
            Free (this.m_IAppInstallManagerItemEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallManagerItemEventArgs

   function get_Item
   (
      this : in out AppInstallManagerItemEventArgs
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
   begin
      return RetVal : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem do
         Hr := this.m_IAppInstallManagerItemEventArgs.all.get_Item (m_ComRetVal'Access);
         Retval.m_IAppInstallItem := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem;
         Retval.m_IAppInstallItem.all := m_ComRetVal;
      end return;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallOptions

   procedure Initialize (this : in out AppInstallOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallOptions, IAppInstallOptions_Ptr);
   begin
      if this.m_IAppInstallOptions /= null then
         if this.m_IAppInstallOptions.all /= null then
            RefCount := this.m_IAppInstallOptions.all.Release;
            Free (this.m_IAppInstallOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppInstallOptions

   function Constructor return AppInstallOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions;
   begin
      return RetVal : AppInstallOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppInstallOptions := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions;
            Retval.m_IAppInstallOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallOptions

   function get_CatalogId
   (
      this : in out AppInstallOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppInstallOptions.all.get_CatalogId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CatalogId
   (
      this : in out AppInstallOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppInstallOptions.all.put_CatalogId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ForceUseOfNonRemovableStorage
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstallOptions.all.get_ForceUseOfNonRemovableStorage (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_ForceUseOfNonRemovableStorage
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallOptions.all.put_ForceUseOfNonRemovableStorage (value);
   end;

   function get_AllowForcedAppRestart
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstallOptions.all.get_AllowForcedAppRestart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowForcedAppRestart
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallOptions.all.put_AllowForcedAppRestart (value);
   end;

   function get_Repair
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstallOptions.all.get_Repair (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Repair
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallOptions.all.put_Repair (value);
   end;

   function get_TargetVolume
   (
      this : in out AppInstallOptions
   )
   return WinRt.Windows.Management.Deployment.PackageVolume'Class is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Management.Deployment.IPackageVolume;
   begin
      return RetVal : WinRt.Windows.Management.Deployment.PackageVolume do
         Hr := this.m_IAppInstallOptions.all.get_TargetVolume (m_ComRetVal'Access);
         Retval.m_IPackageVolume := new Windows.Management.Deployment.IPackageVolume;
         Retval.m_IPackageVolume.all := m_ComRetVal;
      end return;
   end;

   procedure put_TargetVolume
   (
      this : in out AppInstallOptions;
      value : Windows.Management.Deployment.PackageVolume'Class
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallOptions.all.put_TargetVolume (value.m_IPackageVolume.all);
   end;

   function get_LaunchAfterInstall
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppInstallOptions.all.get_LaunchAfterInstall (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_LaunchAfterInstall
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppInstallOptions.all.put_LaunchAfterInstall (value);
   end;

   function get_PinToDesktopAfterInstall
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_PinToDesktopAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToDesktopAfterInstall
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_PinToDesktopAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PinToStartAfterInstall
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_PinToStartAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToStartAfterInstall
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_PinToStartAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_PinToTaskbarAfterInstall
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_PinToTaskbarAfterInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_PinToTaskbarAfterInstall
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_PinToTaskbarAfterInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CompletedInstallToastNotificationMode
   (
      this : in out AppInstallOptions
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_CompletedInstallToastNotificationMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_CompletedInstallToastNotificationMode
   (
      this : in out AppInstallOptions;
      value : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_CompletedInstallToastNotificationMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstallInProgressToastNotificationMode
   (
      this : in out AppInstallOptions
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_InstallInProgressToastNotificationMode (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_InstallInProgressToastNotificationMode
   (
      this : in out AppInstallOptions;
      value : Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_InstallInProgressToastNotificationMode (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_InstallForAllUsers
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_InstallForAllUsers (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_InstallForAllUsers
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_InstallForAllUsers (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_StageButDoNotInstall
   (
      this : in out AppInstallOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_StageButDoNotInstall (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_StageButDoNotInstall
   (
      this : in out AppInstallOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_StageButDoNotInstall (value);
      m_RefCount := m_Interface.Release;
   end;

   function get_CampaignId
   (
      this : in out AppInstallOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_CampaignId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CampaignId
   (
      this : in out AppInstallOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_CampaignId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_ExtendedCampaignId
   (
      this : in out AppInstallOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.get_ExtendedCampaignId (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_ExtendedCampaignId
   (
      this : in out AppInstallOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallOptions.all);
      Hr := m_Interface.put_ExtendedCampaignId (HStr_value);
      m_RefCount := m_Interface.Release;
      Hr := WindowsDeleteString (HStr_value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppInstallStatus

   procedure Initialize (this : in out AppInstallStatus) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppInstallStatus) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppInstallStatus, IAppInstallStatus_Ptr);
   begin
      if this.m_IAppInstallStatus /= null then
         if this.m_IAppInstallStatus.all /= null then
            RefCount := this.m_IAppInstallStatus.all.Release;
            Free (this.m_IAppInstallStatus);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppInstallStatus

   function get_InstallState
   (
      this : in out AppInstallStatus
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState;
   begin
      Hr := this.m_IAppInstallStatus.all.get_InstallState (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_DownloadSizeInBytes
   (
      this : in out AppInstallStatus
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppInstallStatus.all.get_DownloadSizeInBytes (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_BytesDownloaded
   (
      this : in out AppInstallStatus
   )
   return WinRt.UInt64 is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.UInt64;
   begin
      Hr := this.m_IAppInstallStatus.all.get_BytesDownloaded (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_PercentComplete
   (
      this : in out AppInstallStatus
   )
   return WinRt.Double is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Double;
   begin
      Hr := this.m_IAppInstallStatus.all.get_PercentComplete (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_ErrorCode
   (
      this : in out AppInstallStatus
   )
   return WinRt.Windows.Foundation.HResult is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.Foundation.HResult;
   begin
      Hr := this.m_IAppInstallStatus.all.get_ErrorCode (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   function get_User
   (
      this : in out AppInstallStatus
   )
   return WinRt.Windows.System.User'Class is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.System.IUser;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallStatus2'Unchecked_Access);
   begin
      return RetVal : WinRt.Windows.System.User do
         m_Interface := QInterface (this.m_IAppInstallStatus.all);
         Hr := m_Interface.get_User (m_ComRetVal'Access);
         m_RefCount := m_Interface.Release;
         Retval.m_IUser := new Windows.System.IUser;
         Retval.m_IUser.all := m_ComRetVal;
      end return;
   end;

   function get_ReadyForLaunch
   (
      this : in out AppInstallStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallStatus2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallStatus.all);
      Hr := m_Interface.get_ReadyForLaunch (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   function get_IsStaged
   (
      this : in out AppInstallStatus
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus3 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus3, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppInstallStatus3'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppInstallStatus.all);
      Hr := m_Interface.get_IsStaged (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for AppUpdateOptions

   procedure Initialize (this : in out AppUpdateOptions) is
   begin
      null;
   end;

   procedure Finalize (this : in out AppUpdateOptions) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IAppUpdateOptions, IAppUpdateOptions_Ptr);
   begin
      if this.m_IAppUpdateOptions /= null then
         if this.m_IAppUpdateOptions.all /= null then
            RefCount := this.m_IAppUpdateOptions.all.Release;
            Free (this.m_IAppUpdateOptions);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Constructors for AppUpdateOptions

   function Constructor return AppUpdateOptions is
      Hr           : WinRt.HResult := S_OK;
      m_hString    : WinRt.HString := To_HString ("Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions");
      m_ComRetVal  : aliased Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions;
   begin
      return RetVal : AppUpdateOptions do
         Hr := RoActivateInstance (m_hString, m_ComRetVal'Address);
         if Hr = S_OK then
            Retval.m_IAppUpdateOptions := new Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions;
            Retval.m_IAppUpdateOptions.all := m_ComRetVal;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end return;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for AppUpdateOptions

   function get_CatalogId
   (
      this : in out AppUpdateOptions
   )
   return WinRt.WString is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.HString;
      AdaRetval        : WString;
   begin
      Hr := this.m_IAppUpdateOptions.all.get_CatalogId (m_ComRetVal'Access);
      AdaRetval := To_Ada (m_ComRetVal);
      Hr := WindowsDeleteString (m_ComRetVal);
      return AdaRetVal;
   end;

   procedure put_CatalogId
   (
      this : in out AppUpdateOptions;
      value : WinRt.WString
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      HStr_value : WinRt.HString := To_HString (value);
   begin
      Hr := this.m_IAppUpdateOptions.all.put_CatalogId (HStr_value);
      Hr := WindowsDeleteString (HStr_value);
   end;

   function get_AllowForcedAppRestart
   (
      this : in out AppUpdateOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IAppUpdateOptions.all.get_AllowForcedAppRestart (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_AllowForcedAppRestart
   (
      this : in out AppUpdateOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IAppUpdateOptions.all.put_AllowForcedAppRestart (value);
   end;

   function get_AutomaticallyDownloadAndInstallUpdateIfFound
   (
      this : in out AppUpdateOptions
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppUpdateOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppUpdateOptions.all);
      Hr := m_Interface.get_AutomaticallyDownloadAndInstallUpdateIfFound (m_ComRetVal'Access);
      m_RefCount := m_Interface.Release;
      return m_ComRetVal;
   end;

   procedure put_AutomaticallyDownloadAndInstallUpdateIfFound
   (
      this : in out AppUpdateOptions;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_Interface      : WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2 := null;
      m_RefCount       : WinRt.UInt32 := 0;
      function QInterface is new Generic_QueryInterface (WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions_Interface, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2, WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.IID_IAppUpdateOptions2'Unchecked_Access);
   begin
      m_Interface := QInterface (this.m_IAppUpdateOptions.all);
      Hr := m_Interface.put_AutomaticallyDownloadAndInstallUpdateIfFound (value);
      m_RefCount := m_Interface.Release;
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for GetEntitlementResult

   procedure Initialize (this : in out GetEntitlementResult) is
   begin
      null;
   end;

   procedure Finalize (this : in out GetEntitlementResult) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IGetEntitlementResult, IGetEntitlementResult_Ptr);
   begin
      if this.m_IGetEntitlementResult /= null then
         if this.m_IGetEntitlementResult.all /= null then
            RefCount := this.m_IGetEntitlementResult.all.Release;
            Free (this.m_IGetEntitlementResult);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for GetEntitlementResult

   function get_Status
   (
      this : in out GetEntitlementResult
   )
   return WinRt.Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementStatus is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementStatus;
   begin
      Hr := this.m_IGetEntitlementResult.all.get_Status (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

end;

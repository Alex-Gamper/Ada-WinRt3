--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2023 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-WinRT                                                               --
--    Version   : 3.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with WinRt.Windows.Foundation; use WinRt.Windows.Foundation;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
--------------------------------------------------------------------------------
package body WinRt.Windows.Phone.UI.Input is

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for BackPressedEventArgs

   procedure Initialize (this : in out BackPressedEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out BackPressedEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (IBackPressedEventArgs, IBackPressedEventArgs_Ptr);
   begin
      if this.m_IBackPressedEventArgs /= null then
         if this.m_IBackPressedEventArgs.all /= null then
            RefCount := this.m_IBackPressedEventArgs.all.Release;
            Free (this.m_IBackPressedEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for BackPressedEventArgs

   function get_Handled
   (
      this : in out BackPressedEventArgs
   )
   return WinRt.Boolean is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
      m_ComRetVal      : aliased WinRt.Boolean;
   begin
      Hr := this.m_IBackPressedEventArgs.all.get_Handled (m_ComRetVal'Access);
      return m_ComRetVal;
   end;

   procedure put_Handled
   (
      this : in out BackPressedEventArgs;
      value : WinRt.Boolean
   ) is
      Hr               : WinRt.HResult := S_OK;
      m_RefCount       : WinRt.UInt32 := 0;
   begin
      Hr := this.m_IBackPressedEventArgs.all.put_Handled (value);
   end;

   -----------------------------------------------------------------------------
   -- RuntimeClass Initialization/Finalization for CameraEventArgs

   procedure Initialize (this : in out CameraEventArgs) is
   begin
      null;
   end;

   procedure Finalize (this : in out CameraEventArgs) is
      RefCount : WinRt.UInt32 := 0;
      procedure Free is new Ada.Unchecked_Deallocation (ICameraEventArgs, ICameraEventArgs_Ptr);
   begin
      if this.m_ICameraEventArgs /= null then
         if this.m_ICameraEventArgs.all /= null then
            RefCount := this.m_ICameraEventArgs.all.Release;
            Free (this.m_ICameraEventArgs);
         end if;
      end if;
   end;

   -----------------------------------------------------------------------------
   -- Implemented Interfaces for CameraEventArgs

   -----------------------------------------------------------------------------
   -- Static RuntimeClass
   package body HardwareButtons is

      function add_CameraHalfPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_CameraHalfPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_CameraHalfPressed
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_CameraHalfPressed (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_CameraPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_CameraPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_CameraPressed
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_CameraPressed (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_CameraReleased
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_CameraReleased (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_CameraReleased
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics2_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics2'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_CameraReleased (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

      function add_BackPressed
      (
         handler : GenericObject
      )
      return WinRt.Windows.Foundation.EventRegistrationToken is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
         m_ComRetVal      : aliased Windows.Foundation.EventRegistrationToken;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.add_BackPressed (handler, m_ComRetVal'Access);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
         return m_ComRetVal;
      end;

      procedure remove_BackPressed
      (
         token : Windows.Foundation.EventRegistrationToken
      ) is
         Hr               : WinRt.HResult := S_OK;
         m_hString        : WinRt.HString := To_HString ("Windows.Phone.UI.Input.HardwareButtons");
         m_Factory        : access WinRt.Windows.Phone.UI.Input.IHardwareButtonsStatics_Interface'Class := null;
         m_RefCount       : WinRt.UInt32 := 0;
      begin
         Hr := RoGetActivationFactory (m_hString, IID_IHardwareButtonsStatics'Access , m_Factory'Address);
         if Hr = S_OK then
            Hr := m_Factory.remove_BackPressed (token);
            m_RefCount := m_Factory.Release;
         end if;
         Hr := WindowsDeleteString (m_hString);
      end;

   end HardwareButtons;

end;
